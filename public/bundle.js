(() => {
  let __defineProperty = Object.defineProperty;
  let __hasOwnProperty = Object.prototype.hasOwnProperty;
  let __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  let __markAsModule = (target) => {
    return __defineProperty(target, "__esModule", {value: true});
  };
  let __exportStar = (target, module) => {
    __markAsModule(target);
    for (let key in module)
      if (__hasOwnProperty.call(module, key) && !__hasOwnProperty.call(target, key) && key !== "default")
        __defineProperty(target, key, {get: () => module[key], enumerable: true});
    return target;
  };
  let __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defineProperty({}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS((exports, module) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format3) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format3, args);
            }
          }
        }
        function error(format3) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format3, args);
            }
          }
        }
        function printWarning(level, format3, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format3 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format3);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef2() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config3) {
          {
            if (hasOwnProperty2.call(config3, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config3.ref !== void 0;
        }
        function hasValidKey(config3) {
          {
            if (hasOwnProperty2.call(config3, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config3.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config3) {
          {
            if (typeof config3.ref === "string" && ReactCurrentOwner.current && config3.__self && ReactCurrentOwner.current.stateNode !== config3.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config3.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement7(type, config3, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config3 != null) {
            if (hasValidRef(config3)) {
              ref = config3.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config3);
              }
            }
            if (hasValidKey(config3)) {
              {
                checkKeyStringCoercion(config3.key);
              }
              key = "" + config3.key;
            }
            self2 = config3.__self === void 0 ? null : config3.__self;
            source = config3.__source === void 0 ? null : config3.__source;
            for (propName in config3) {
              if (hasOwnProperty2.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config3[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps2 = type.defaultProps;
            for (propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement38(element, config3, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config3 != null) {
            if (hasValidRef(config3)) {
              ref = config3.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config3)) {
              {
                checkKeyStringCoercion(config3.key);
              }
              key = "" + config3.key;
            }
            var defaultProps2;
            if (element.type && element.type.defaultProps) {
              defaultProps2 = element.type.defaultProps;
            }
            for (propName in config3) {
              if (hasOwnProperty2.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config3[propName] === void 0 && defaultProps2 !== void 0) {
                  props[propName] = defaultProps2[propName];
                } else {
                  props[propName] = config3[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement22(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement22(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement22(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext26(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps2;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps2;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps2 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef195(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo11(type, compare2) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare2 === void 0 ? null : compare2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext40(Context2) {
          var dispatcher = resolveDispatcher();
          {
            if (Context2._context !== void 0) {
              var realContext = Context2._context;
              if (realContext.Consumer === Context2) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context2) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context2);
        }
        function useState75(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer2(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef118(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect92(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect12(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback109(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo62(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle14(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue9(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId7() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement22(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement22(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement22(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement7.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement38.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i2 = 0;
              try {
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i2 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children20 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children20;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext26;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef2;
        exports.forwardRef = forwardRef195;
        exports.isValidElement = isValidElement22;
        exports.lazy = lazy;
        exports.memo = memo11;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback109;
        exports.useContext = useContext40;
        exports.useDebugValue = useDebugValue9;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect92;
        exports.useId = useId7;
        exports.useImperativeHandle = useImperativeHandle14;
        exports.useInsertionEffect = useInsertionEffect2;
        exports.useLayoutEffect = useLayoutEffect12;
        exports.useMemo = useMemo62;
        exports.useReducer = useReducer2;
        exports.useRef = useRef118;
        exports.useState = useState75;
        exports.useSyncExternalStore = useSyncExternalStore2;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i2) {
          var index = i2;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare2(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i2) {
          var index = i2;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left3 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right3 = heap[rightIndex];
            if (compare2(left3, node) < 0) {
              if (rightIndex < length && compare2(right3, left3) < 0) {
                heap[index] = right3;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left3;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare2(right3, node) < 0) {
              heap[index] = right3;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare2(a2, b2) {
          var diff = a2.sortIndex - b2.sortIndex;
          return diff !== 0 ? diff : a2.id - b2.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React405 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React405.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format3) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format3, args);
            }
          }
        }
        function error(format3) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format3, args);
            }
          }
        }
        function printWarning(level, format3, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format3 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format3);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment39 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef2 = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i2 = 0; i2 < dependencies.length; i2++) {
            allNativeEvents.add(dependencies[i2]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix3 = name.toLowerCase().slice(0, 5);
                return prefix3 !== "data-" && prefix3 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties2.hasOwnProperty(name) ? properties2[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties2 = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize51 = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize51);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize51);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize51);
          properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties2[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef2:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x2) {
            return "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef2:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment39:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e2) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i2 = 0; i2 < group.length; i2++) {
              var otherNode = group[i2];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React405.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i2 = 0; i2 < valuePropNames.length; i2++) {
              var propName = valuePropNames[i2];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i2 = 0; i2 < selectedValues.length; i2++) {
              selectedValue["$" + selectedValues[i2]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html2;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix3, key) {
          return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix3) {
            isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty2) {
          var isEmpty6 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty6) {
            return "";
          }
          if (!isCustomProperty2 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern2 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern2, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern2 = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern2, function(_6, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles30) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles30) {
              if (!styles30.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles30[styleName];
              if (styleValue != null) {
                var isCustomProperty2 = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty2 ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty2);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles30) {
          var style17 = node.style;
          for (var styleName in styles30) {
            if (!styles30.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty2 = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty2) {
                warnValidStyle$1(styleName, styles30[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles30[styleName], isCustomProperty2);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty2) {
              style17.setProperty(styleName, styleValue);
            } else {
              style17[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles30) {
          var expanded = {};
          for (var key in styles30) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i2 = 0; i2 < longhands.length; i2++) {
              expanded[longhands[i2]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i2 = 0; i2 < queuedTargets.length; i2++) {
              restoreStateOfTarget(queuedTargets[i2]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a2, b2) {
          if (isInsideEventHandler) {
            return fn(a2, b2);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a2, b2);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e2) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d2, e2, f2) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d2, e2, f2) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a2, b2, c2, d2, e2, f2) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d2, e2, f2) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b2 = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b2 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b2) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.return !== b2.return) {
              a2 = parentA;
              b2 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a2.alternate !== b2) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a2.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root3, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root3) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root3);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x2) {
          var asUint = x2 >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root3) {
          return getHighestPriorityLanes(root3.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root3, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root3, lanes) {
          return (lanes & root3.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b2) {
          return (a2 & b2) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a2, b2) {
          return a2 | b2;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a2, b2) {
          return a2 & b2;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b2) {
          return a2 !== NoLane && a2 < b2 ? a2 : b2;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i2 = 0; i2 < TotalLanes; i2++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
          }
          var eventTimes = root3.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = NoLanes;
          root3.pingedLanes = NoLanes;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
          var entanglements = root3.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root3, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          var memoizedUpdaters = root3.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root3, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a2, b2) {
          return a2 !== 0 && a2 < b2 ? a2 : b2;
        }
        function lowerEventPriority(a2, b2) {
          return a2 === 0 || a2 > b2 ? a2 : b2;
        }
        function isHigherEventPriority(a2, b2) {
          return a2 !== 0 && a2 < b2;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root3) {
          var currentState = root3.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i2 = 0;
          for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
          if (i2 === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
              var queuedEvent = queuedDiscreteEvents[i2];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled2() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive2
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            passive: passive2
          });
          return listener;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset2() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start2;
          var startValue = startText;
          var startLength = startValue.length;
          var end2;
          var endValue = getText();
          var endLength = endValue.length;
          for (start2 = 0; start2 < startLength; start2++) {
            if (startValue[start2] !== endValue[start2]) {
              break;
            }
          }
          var minEnd = startLength - start2;
          for (end2 = 1; end2 <= minEnd; end2++) {
            if (startValue[startLength - end2] !== endValue[endLength - end2]) {
              break;
            }
          }
          var sliceTail = end2 > 1 ? 1 - end2 : void 0;
          fallbackText = endValue.slice(start2, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize2 = Interface[_propName];
              if (normalize2) {
                this[_propName] = normalize2(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset2();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            var currentKey = keysA[i2];
            if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset4) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset4 && nodeEnd >= offset4) {
                return {
                  node,
                  offset: offset4 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument10 = outerNode.ownerDocument;
          var win = ownerDocument10 && ownerDocument10.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e2) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start2 = -1;
          var end2 = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start2 = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end2 = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end2 = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start2 === -1 || end2 === -1) {
            return null;
          }
          return {
            start: start2,
            end: end2
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start2 = Math.min(offsets.start, length);
          var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length);
          if (!selection.extend && start2 > end2) {
            var temp = end2;
            end2 = start2;
            start2 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start2);
          var endMarker = getNodeForCharacterOffset(node, end2);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start2 > end2) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i2 = 0; i2 < ancestors.length; i2++) {
              var info = ancestors[i2];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection2(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start2 = offsets.start;
          var end2 = offsets.end;
          if (end2 === void 0) {
            end2 = start2;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start2;
            input.selectionEnd = Math.min(end2, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style16 = {};
        if (canUseDOM) {
          style16 = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style16) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
            var eventName = simpleEventPluginEvents[i2];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
              var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
            var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument10 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument10 !== null) {
              if (!ownerDocument10[listeningMarker]) {
                ownerDocument10[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument10);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common4, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common4) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common4) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common4 = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common4, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common4, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html2) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html2;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop4() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop4;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
            var propKey = updatePayload[i2];
            var propValue = updatePayload[i2 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement7(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument10 = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument10.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument10.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument10.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument10.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled2();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement7(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style17 = instance.style;
          if (typeof style17.setProperty === "function") {
            style17.setProperty("display", "none", "important");
          } else {
            style17.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display3 = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display3);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor2, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor2.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor2, value, fiber) {
          index++;
          valueStack[index] = cursor2.current;
          {
            fiberStack[index] = fiber;
          }
          cursor2.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i2 < queue.length; i2++) {
                var callback = queue[i2];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i2 + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow2 = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow2;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow2 = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow2;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps2 = Component.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
              var queue = concurrentQueues[i2];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root3, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i2 = 0; i2 < effects.length; i2++) {
              var effect4 = effects[i2];
              var callback = effect4.callback;
              if (callback !== null) {
                effect4.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React405.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment39) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child = newChildren[i2];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment39) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (c2 === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion4 = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
            var mutableSource = workInProgressSources[i2];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version3 = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version3];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version3);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table2 = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i2 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table2 += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (objectIs(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect4 = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect4.next = effect4;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect4;
              effect4.next = firstEffect;
              componentUpdateQueue.lastEffect = effect4;
            }
          }
          return effect4;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion4, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion4, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start2 = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start2;
          return [isPending, start2];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root3 = getWorkInProgressRoot();
          var identifierPrefix = root3.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  root3.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  if (root3 !== null) {
                    root3.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e2) {
            setTimeout(function() {
              throw e2;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root3, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root3, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root3, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root3, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare2 = Component.compare;
            compare2 = compare2 !== null ? compare2 : shallowEqual;
            if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x2) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root3 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef2: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root3 = getWorkInProgressRoot();
              if (root3 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root3 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef2: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment39:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef2:
            case Fragment39:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root3 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root3 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root3, firstChild) {
          focusedInstanceHandle = prepareForCommit(root3.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect4 = firstEffect;
            do {
              if ((effect4.tag & flags) === flags) {
                var destroy = effect4.destroy;
                effect4.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion4) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion4) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect4 = effect4.next;
            } while (effect4 !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect4 = firstEffect;
            do {
              if ((effect4.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect4.create;
                {
                  if ((flags & Insertion4) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect4.destroy = create();
                {
                  if ((flags & Insertion4) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect4.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect4.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect4.tag & Insertion4) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect4 = effect4.next;
            } while (effect4 !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root3, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect4 = firstEffect;
                    do {
                      var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion4) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect4 = effect4.next;
                    } while (effect4 !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root3, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root3);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var childToDelete = deletions[i2];
              try {
                commitDeletionEffects(root3, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root3);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion4 | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion4 | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root3.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root3, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root3, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root3, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root3, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root3, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i2 = 0; i2 < deletions.length; i2++) {
                  var fiberToDelete = deletions[i2];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef2:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root3, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root3, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root3 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
          var current2 = root3.current;
          current2.lanes = lane;
          markRootUpdated(root3, lane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root3.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root3.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root3, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root3, lanes);
              var finishedWork = root3.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root3, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root3, NoLanes);
                  markRootSuspended$1(root3, lanes);
                  ensureRootIsScheduled(root3, now());
                  throw _fatalError;
                }
              }
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root3, now());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function recoverFromConcurrentError(root3, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root3)) {
            var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root3.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root3, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i2 = 0; i2 < checks.length; i2++) {
                    var check = checks[i2];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root3, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root3, now());
            return null;
          }
          var exitStatus = renderRootSync(root3, lanes);
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root3, now());
          return null;
        }
        function flushRoot(root3, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root3, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root3, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a2, b2, c2, d2) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a2, b2, c2, d2);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync5(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          var rootWorkInProgress = createWorkInProgress(root3.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root3, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (finishedWork === root3.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root3.callbackNode = null;
          root3.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes);
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root3, finishedWork, lanes);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root3, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root3.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root3.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root3.onRecoverableError;
            for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
              var recoverableError = recoverableErrors[i2];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root3.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root3.current);
          commitPassiveMountEffects(root3, root3.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i2 = 0; i2 < profilerEffects.length; i2++) {
              var _fiber = profilerEffects[i2];
              commitPassiveEffectDurations(root3, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root3.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root3 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root3;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root3);
          {
            var stateNode = root3.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root3 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root3 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
          if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root3, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
          {
            if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef2: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync5(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync5(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef2:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
          } catch (e2) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef2;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef2:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef2;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment39, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        var ReactVersion = "18.2.0";
        function createPortal2(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer4(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root3.context = getContextForSubtree(null);
          var current2 = root3.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root3, lane, eventTime);
          return root3;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root3 = enqueueUpdate(current$1, update, lane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
            entangleTransitions(root3, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root3 = fiber.stateNode;
              if (isRootDehydrated(root3)) {
                var lanes = getHighestPriorityPendingLanes(root3);
                flushRoot(root3, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync5(function() {
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                if (oldPath[i2] !== newPath[i2]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          if (root3 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root3.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          if (root3 !== null) {
            this._internalRoot = null;
            var container = root3.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync5(function() {
              updateContainer(null, root3, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot2(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root3 = createContainer4(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root3);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i2 = 0; i2 < mutableSources.length; i2++) {
              var mutableSource = mutableSources[i2];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root3);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            var root3 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root3;
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync5();
            return root3;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer4(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync5(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root3;
          if (!maybeRoot) {
            root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root3 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root3, parentComponent, callback);
          }
          return getPublicRootInstance(root3);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync5(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync5);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal2(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync5(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS((exports) => {
    "use strict";
    var m2 = require_react_dom();
    if (false) {
      exports.createRoot = m2.createRoot;
      exports.hydrateRoot = m2.hydrateRoot;
    } else {
      var i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c2, o2) {
        i2.usingClientEntryPoint = true;
        try {
          return m2.createRoot(c2, o2);
        } finally {
          i2.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c2, h2, o2) {
        i2.usingClientEntryPoint = true;
        try {
          return m2.hydrateRoot(c2, h2, o2);
        } finally {
          i2.usingClientEntryPoint = false;
        }
      };
    }
  });

  // node_modules/@mui/utils/node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development4 = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment39 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal8 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment39;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal8;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/@mui/utils/node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is4 = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development4();
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order22 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order22.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty2.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  });

  // node_modules/@mui/utils/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret6 = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/@mui/utils/node_modules/prop-types/lib/has.js
  var require_has6 = __commonJS((exports, module) => {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/@mui/utils/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes6 = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret6();
      var loggedTypeFailures = {};
      var has = require_has6();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/@mui/utils/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers6 = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is4();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret6();
    var has = require_has6();
    var checkPropTypes = require_checkPropTypes6();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/@mui/utils/node_modules/prop-types/index.js
  var require_prop_types6 = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is4();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers6()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/@mui/utils/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development5 = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment39 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal8 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment39;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal8;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/@mui/utils/node_modules/react-is/index.js
  var require_react_is5 = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development5();
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS((exports, module) => {
    function _extends2() {
      module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends2.apply(this, arguments);
    }
    module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development6 = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment39 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal8 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment39;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal8;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/react-is/index.js
  var require_react_is6 = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development6();
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS((exports, module) => {
    "use strict";
    var reactIs = require_react_is6();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var key = keys[i2];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics2;
  });

  // node_modules/@mui/styled-engine/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret4 = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/@mui/styled-engine/node_modules/prop-types/lib/has.js
  var require_has4 = __commonJS((exports, module) => {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/@mui/styled-engine/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes4 = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret4();
      var loggedTypeFailures = {};
      var has = require_has4();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/@mui/styled-engine/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers4 = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is6();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret4();
    var has = require_has4();
    var checkPropTypes = require_checkPropTypes4();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/@mui/styled-engine/node_modules/prop-types/index.js
  var require_prop_types4 = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is6();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers4()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React405 = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React405.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format3) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format3, args);
            }
          }
        }
        function printWarning(level, format3, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format3 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format3);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values3, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config3) {
          {
            if (hasOwnProperty2.call(config3, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config3.ref !== void 0;
        }
        function hasValidKey(config3) {
          {
            if (hasOwnProperty2.call(config3, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config3.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config3, self2) {
          {
            if (typeof config3.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config3.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config3, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config3)) {
              {
                checkKeyStringCoercion(config3.key);
              }
              key = "" + config3.key;
            }
            if (hasValidRef(config3)) {
              ref = config3.ref;
              warnIfStringRefCannotBeAutoConverted(config3, self2);
            }
            for (propName in config3) {
              if (hasOwnProperty2.call(config3, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config3[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement22(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement22(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement22(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement22(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i2 = 0; i2 < children.length; i2++) {
                      validateChildKeys(children[i2], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx2 = jsxWithValidationDynamic;
        var jsxs = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx2;
        exports.jsxs = jsxs;
      })();
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_jsx_runtime_development();
    }
  });

  // node_modules/@mui/system/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret5 = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/@mui/system/node_modules/prop-types/lib/has.js
  var require_has5 = __commonJS((exports, module) => {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/@mui/system/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes5 = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret5();
      var loggedTypeFailures = {};
      var has = require_has5();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/@mui/system/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers5 = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is6();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret5();
    var has = require_has5();
    var checkPropTypes = require_checkPropTypes5();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/@mui/system/node_modules/prop-types/index.js
  var require_prop_types5 = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is6();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers5()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/@mui/material/node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment39 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal8 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment39;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal8;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/@mui/material/node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  });

  // node_modules/@mui/material/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret2 = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/@mui/material/node_modules/prop-types/lib/has.js
  var require_has2 = __commonJS((exports, module) => {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/@mui/material/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes2 = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret2();
      var loggedTypeFailures = {};
      var has = require_has2();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/@mui/material/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers2 = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is2();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret2();
    var has = require_has2();
    var checkPropTypes = require_checkPropTypes2();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/@mui/material/node_modules/prop-types/index.js
  var require_prop_types2 = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is2();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers2()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/@mui/base/node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment39 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal8 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment39;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal8;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/@mui/base/node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  });

  // node_modules/@mui/base/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/@mui/base/node_modules/prop-types/lib/has.js
  var require_has = __commonJS((exports, module) => {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/@mui/base/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var loggedTypeFailures = {};
      var has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/@mui/base/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/@mui/base/node_modules/prop-types/index.js
  var require_prop_types = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment39 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal8 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment12(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment39;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal8;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment12;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/@mui/material/node_modules/react-is/index.js
  var require_react_is3 = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development3();
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret8 = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes8 = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret8();
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers8 = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is6();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret8();
    var checkPropTypes = require_checkPropTypes8();
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/prop-types/index.js
  var require_prop_types8 = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is6();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers8()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/@mui/x-data-grid/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret7 = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/@mui/x-data-grid/node_modules/prop-types/lib/has.js
  var require_has7 = __commonJS((exports, module) => {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/@mui/x-data-grid/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes7 = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret7();
      var loggedTypeFailures = {};
      var has = require_has7();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/@mui/x-data-grid/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers7 = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is6();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret7();
    var has = require_has7();
    var checkPropTypes = require_checkPropTypes7();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement22, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement22(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement22(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/@mui/x-data-grid/node_modules/prop-types/index.js
  var require_prop_types7 = __commonJS((exports, module) => {
    if (true) {
      var ReactIs = require_react_is6();
      var throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers7()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React405 = require_react();
        var ReactSharedInternals = React405.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format3) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format3, args);
            }
          }
        }
        function printWarning(level, format3, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format3 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format3);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState75 = React405.useState, useEffect92 = React405.useEffect, useLayoutEffect12 = React405.useLayoutEffect, useDebugValue9 = React405.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React405.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState75({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect12(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect92(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue9(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim2 = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore2;
        var useSyncExternalStore$2 = React405.useSyncExternalStore !== void 0 ? React405.useSyncExternalStore : shim2;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  });

  // node_modules/@mui/material/colors/common.js
  const common = {
    black: "#000",
    white: "#fff"
  };
  const common_default = common;

  // node_modules/@mui/material/colors/red.js
  const red2 = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  const red_default = red2;

  // node_modules/@mui/material/colors/purple.js
  const purple2 = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  const purple_default = purple2;

  // node_modules/@mui/material/colors/blue.js
  const blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  const blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  const lightBlue2 = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  const lightBlue_default = lightBlue2;

  // node_modules/@mui/material/colors/green.js
  const green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  const green_default = green;

  // node_modules/@mui/material/colors/orange.js
  const orange2 = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  const orange_default = orange2;

  // node_modules/@mui/material/colors/grey.js
  const grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  const grey_default = grey;

  // node_modules/@mui/utils/esm/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@mui/utils/esm/deepmerge.js
  function isPlainObject(item) {
    return item !== null && typeof item === "object" && item.constructor === Object;
  }
  function deepClone(source) {
    if (!isPlainObject(source)) {
      return source;
    }
    const output = {};
    Object.keys(source).forEach((key) => {
      output[key] = deepClone(source[key]);
    });
    return output;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach((key) => {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
          output[key] = deepmerge(target[key], source[key], options);
        } else if (options.clone) {
          output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }

  // node_modules/@mui/utils/esm/elementAcceptingRef.js
  const prop_types181 = __toModule(require_prop_types6());
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementAcceptingRef = chainPropTypes(prop_types181.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(prop_types181.default.element.isRequired, acceptingRef);
  const elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@mui/utils/esm/elementTypeAcceptingRef.js
  const prop_types182 = __toModule(require_prop_types6());
  function isClassComponent2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  const elementTypeAcceptingRef_default = chainPropTypes(prop_types182.default.elementType, elementTypeAcceptingRef);

  // node_modules/@mui/utils/esm/exactProp.js
  const specialProperty = "exact-prop: ​";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }

  // node_modules/@mui/utils/esm/formatMuiErrorMessage.js
  function formatMuiErrorMessage(code) {
    let url = "https://mui.com/production-error/?code=" + code;
    for (let i2 = 1; i2 < arguments.length; i2 += 1) {
      url += "&args[]=" + encodeURIComponent(arguments[i2]);
    }
    return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
  }

  // node_modules/@mui/utils/esm/getDisplayName.js
  const react_is12 = __toModule(require_react_is5());
  const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    const match = `${fn}`.match(fnNameMatchRegex);
    const name = match && match[1];
    return name || "";
  }
  function getFunctionComponentName(Component, fallback = "") {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component) {
    if (Component == null) {
      return void 0;
    }
    if (typeof Component === "string") {
      return Component;
    }
    if (typeof Component === "function") {
      return getFunctionComponentName(Component, "Component");
    }
    if (typeof Component === "object") {
      switch (Component.$$typeof) {
        case react_is12.ForwardRef:
          return getWrappedName(Component, Component.render, "ForwardRef");
        case react_is12.Memo:
          return getWrappedName(Component, Component.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }

  // node_modules/@mui/utils/esm/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/refType.js
  const prop_types183 = __toModule(require_prop_types6());
  const refType2 = prop_types183.default.oneOfType([prop_types183.default.func, prop_types183.default.object]);
  const refType_default = refType2;

  // node_modules/@mui/utils/esm/capitalize.js
  function capitalize48(string) {
    if (typeof string !== "string") {
      throw new Error(`MUI: \`capitalize(string)\` expects a string argument.`);
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@mui/utils/esm/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // node_modules/@mui/utils/esm/debounce.js
  function debounce(func, wait = 166) {
    let timeout;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout);
    };
    return debounced;
  }

  // node_modules/@mui/utils/esm/isMuiElement.js
  const React257 = __toModule(require_react());
  function isMuiElement7(element, muiNames) {
    return React257.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  // node_modules/@mui/utils/esm/ownerDocument.js
  function ownerDocument(node) {
    return node && node.ownerDocument || document;
  }

  // node_modules/@mui/utils/esm/ownerWindow.js
  function ownerWindow(node) {
    const doc = ownerDocument(node);
    return doc.defaultView || window;
  }

  // node_modules/@mui/utils/esm/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@mui/utils/esm/useEnhancedEffect.js
  const React259 = __toModule(require_react());
  const useEnhancedEffect11 = typeof window !== "undefined" ? React259.useLayoutEffect : React259.useEffect;
  const useEnhancedEffect_default = useEnhancedEffect11;

  // node_modules/@mui/utils/esm/useId.js
  const React262 = __toModule(require_react());
  let globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React262.useState(idOverride);
    const id = idOverride || defaultId;
    React262.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  const maybeReactUseId = React262["useId"];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }

  // node_modules/@mui/utils/esm/unsupportedProp.js
  function unsupportedProp5(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/useControlled.js
  const React258 = __toModule(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React258.useRef(controlled !== void 0);
    const [valueState, setValue] = React258.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React258.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React258.useRef(defaultProp);
      React258.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React258.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@mui/utils/esm/useEventCallback.js
  const React260 = __toModule(require_react());
  function useEventCallback(fn) {
    const ref = React260.useRef(fn);
    useEnhancedEffect_default(() => {
      ref.current = fn;
    });
    return React260.useCallback((...args) => (0, ref.current)(...args), []);
  }

  // node_modules/@mui/utils/esm/useForkRef.js
  const React261 = __toModule(require_react());
  function useForkRef(...refs) {
    return React261.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }

  // node_modules/@mui/utils/esm/useIsFocusVisible.js
  const React263 = __toModule(require_react());
  let hadKeyboardEvent = true;
  let hadFocusVisibleRecently = false;
  let hadFocusVisibleRecentlyTimeout;
  const inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node) {
    const {
      type,
      tagName
    } = node;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node.readOnly) {
      return true;
    }
    if (node.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown2(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown2, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = React263.useCallback((node) => {
      if (node != null) {
        prepare(node.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React263.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        window.clearTimeout(hadFocusVisibleRecentlyTimeout);
        hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
          hadFocusVisibleRecently = false;
        }, 100);
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }

  // node_modules/@mui/utils/esm/getScrollbarSize.js
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // node_modules/@mui/utils/esm/usePreviousProps.js
  const React264 = __toModule(require_react());
  const usePreviousProps2 = (value) => {
    const ref = React264.useRef({});
    React264.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  const usePreviousProps_default = usePreviousProps2;

  // node_modules/@mui/utils/esm/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x2) {
    return typeof x2 === "number" && isFinite(x2) && Math.floor(x2) === x2;
  }
  const isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  const integerPropType_default = validator;

  // node_modules/@mui/utils/esm/resolveProps.js
  function resolveProps(defaultProps2, props) {
    const output = _extends({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = _extends({}, defaultProps2[propName], output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps2[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = _extends({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps2[propName];
      }
    });
    return output;
  }

  // node_modules/@mui/utils/esm/composeClasses/composeClasses.js
  function composeClasses2(slots, getUtilityClass, classes = void 0) {
    const output = {};
    Object.keys(slots).forEach((slot) => {
      output[slot] = slots[slot].reduce((acc, key) => {
        if (key) {
          const utilityClass = getUtilityClass(key);
          if (utilityClass !== "") {
            acc.push(utilityClass);
          }
          if (classes && classes[key]) {
            acc.push(classes[key]);
          }
        }
        return acc;
      }, []).join(" ");
    });
    return output;
  }

  // node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
  const defaultGenerator = (componentName) => componentName;
  const createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  const ClassNameGenerator = createClassNameGenerator();
  const ClassNameGenerator_default = ClassNameGenerator;

  // node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
  const globalStateClassesMapping = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    readOnly: "readOnly",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass2(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses2(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass2(componentName, slot, globalStatePrefix);
    });
    return result;
  }

  // node_modules/@mui/material/styles/identifier.js
  const identifier_default = "$$material";

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize3(fn) {
    var cache6 = Object.create(null);
    return function(arg) {
      if (cache6[arg] === void 0)
        cache6[arg] = fn(arg);
      return cache6[arg];
    };
  }
  const emotion_memoize_esm_default = memoize3;

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = emotion_memoize_esm_default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  });
  const emotion_is_prop_valid_esm_default = isPropValid;

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag) {
        return document.styleSheets[i2];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule2 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule2 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule2;
      }
      if (this.isSpeedy) {
        var sheet2 = sheetForTag(tag);
        try {
          sheet2.insertRule(rule, sheet2.cssRules.length);
        } catch (e2) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e2);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/dist/stylis.mjs
  var e = "-ms-";
  var r = "-moz-";
  var a = "-webkit-";
  var n = "comm";
  var c = "rule";
  var s = "decl";
  var i = "@import";
  var h = "@keyframes";
  var $ = Math.abs;
  var g = String.fromCharCode;
  var k = Object.assign;
  function m(e2, r3) {
    return C(e2, 0) ^ 45 ? (((r3 << 2 ^ C(e2, 0)) << 2 ^ C(e2, 1)) << 2 ^ C(e2, 2)) << 2 ^ C(e2, 3) : 0;
  }
  function x(e2) {
    return e2.trim();
  }
  function y(e2, r3) {
    return (e2 = r3.exec(e2)) ? e2[0] : e2;
  }
  function j(e2, r3, a2) {
    return e2.replace(r3, a2);
  }
  function z(e2, r3) {
    return e2.indexOf(r3);
  }
  function C(e2, r3) {
    return e2.charCodeAt(r3) | 0;
  }
  function O(e2, r3, a2) {
    return e2.slice(r3, a2);
  }
  function A(e2) {
    return e2.length;
  }
  function M(e2) {
    return e2.length;
  }
  function S(e2, r3) {
    return r3.push(e2), e2;
  }
  function q(e2, r3) {
    return e2.map(r3).join("");
  }
  var B = 1;
  var D = 1;
  var E = 0;
  var F = 0;
  var G = 0;
  var H = "";
  function I(e2, r3, a2, n2, c2, s2, t2) {
    return {value: e2, root: r3, parent: a2, type: n2, props: c2, children: s2, line: B, column: D, length: t2, return: ""};
  }
  function J(e2, r3) {
    return k(I("", null, null, "", null, null, 0), e2, {length: -e2.length}, r3);
  }
  function K() {
    return G;
  }
  function L() {
    G = F > 0 ? C(H, --F) : 0;
    if (D--, G === 10)
      D = 1, B--;
    return G;
  }
  function N() {
    G = F < E ? C(H, F++) : 0;
    if (D++, G === 10)
      D = 1, B++;
    return G;
  }
  function P() {
    return C(H, F);
  }
  function Q() {
    return F;
  }
  function R(e2, r3) {
    return O(H, e2, r3);
  }
  function T(e2) {
    switch (e2) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function U(e2) {
    return B = D = 1, E = A(H = e2), F = 0, [];
  }
  function V(e2) {
    return H = "", e2;
  }
  function W(e2) {
    return x(R(F - 1, ee(e2 === 91 ? e2 + 2 : e2 === 40 ? e2 + 1 : e2)));
  }
  function Y(e2) {
    while (G = P())
      if (G < 33)
        N();
      else
        break;
    return T(e2) > 2 || T(G) > 3 ? "" : " ";
  }
  function _5(e2, r3) {
    while (--r3 && N())
      if (G < 48 || G > 102 || G > 57 && G < 65 || G > 70 && G < 97)
        break;
    return R(e2, Q() + (r3 < 6 && P() == 32 && N() == 32));
  }
  function ee(e2) {
    while (N())
      switch (G) {
        case e2:
          return F;
        case 34:
        case 39:
          if (e2 !== 34 && e2 !== 39)
            ee(G);
          break;
        case 40:
          if (e2 === 41)
            ee(e2);
          break;
        case 92:
          N();
          break;
      }
    return F;
  }
  function re(e2, r3) {
    while (N())
      if (e2 + G === 47 + 10)
        break;
      else if (e2 + G === 42 + 42 && P() === 47)
        break;
    return "/*" + R(r3, F - 1) + "*" + g(e2 === 47 ? e2 : N());
  }
  function ae(e2) {
    while (!T(P()))
      N();
    return R(e2, F);
  }
  function ne(e2) {
    return V(ce("", null, null, null, [""], e2 = U(e2), 0, [0], e2));
  }
  function ce(e2, r3, a2, n2, c2, s2, t2, u2, i2) {
    var f2 = 0;
    var o2 = 0;
    var l2 = t2;
    var v2 = 0;
    var p2 = 0;
    var h2 = 0;
    var b2 = 1;
    var w2 = 1;
    var d2 = 1;
    var $2 = 0;
    var k2 = "";
    var m2 = c2;
    var x2 = s2;
    var y2 = n2;
    var O2 = k2;
    while (w2)
      switch (h2 = $2, $2 = N()) {
        case 40:
          if (h2 != 108 && C(O2, l2 - 1) == 58) {
            if (z(O2 += j(W($2), "&", "&\f"), "&\f") != -1)
              d2 = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          O2 += W($2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          O2 += Y(h2);
          break;
        case 92:
          O2 += _5(Q() - 1, 7);
          continue;
        case 47:
          switch (P()) {
            case 42:
            case 47:
              S(te(re(N(), Q()), r3, a2), i2);
              break;
            default:
              O2 += "/";
          }
          break;
        case 123 * b2:
          u2[f2++] = A(O2) * d2;
        case 125 * b2:
        case 59:
        case 0:
          switch ($2) {
            case 0:
            case 125:
              w2 = 0;
            case 59 + o2:
              if (d2 == -1)
                O2 = j(O2, /\f/g, "");
              if (p2 > 0 && A(O2) - l2)
                S(p2 > 32 ? ue(O2 + ";", n2, a2, l2 - 1) : ue(j(O2, " ", "") + ";", n2, a2, l2 - 2), i2);
              break;
            case 59:
              O2 += ";";
            default:
              S(y2 = se(O2, r3, a2, f2, o2, c2, u2, k2, m2 = [], x2 = [], l2), s2);
              if ($2 === 123)
                if (o2 === 0)
                  ce(O2, r3, y2, y2, m2, s2, l2, u2, x2);
                else
                  switch (v2 === 99 && C(O2, 3) === 110 ? 100 : v2) {
                    case 100:
                    case 109:
                    case 115:
                      ce(e2, y2, y2, n2 && S(se(e2, y2, y2, 0, 0, c2, u2, k2, c2, m2 = [], l2), x2), c2, x2, l2, u2, n2 ? m2 : x2);
                      break;
                    default:
                      ce(O2, y2, y2, y2, [""], x2, 0, u2, x2);
                  }
          }
          f2 = o2 = p2 = 0, b2 = d2 = 1, k2 = O2 = "", l2 = t2;
          break;
        case 58:
          l2 = 1 + A(O2), p2 = h2;
        default:
          if (b2 < 1) {
            if ($2 == 123)
              --b2;
            else if ($2 == 125 && b2++ == 0 && L() == 125)
              continue;
          }
          switch (O2 += g($2), $2 * b2) {
            case 38:
              d2 = o2 > 0 ? 1 : (O2 += "\f", -1);
              break;
            case 44:
              u2[f2++] = (A(O2) - 1) * d2, d2 = 1;
              break;
            case 64:
              if (P() === 45)
                O2 += W(N());
              v2 = P(), o2 = l2 = A(k2 = O2 += ae(Q())), $2++;
              break;
            case 45:
              if (h2 === 45 && A(O2) == 2)
                b2 = 0;
          }
      }
    return s2;
  }
  function se(e2, r3, a2, n2, s2, t2, u2, i2, f2, o2, l2) {
    var v2 = s2 - 1;
    var p2 = s2 === 0 ? t2 : [""];
    var h2 = M(p2);
    for (var b2 = 0, w2 = 0, d2 = 0; b2 < n2; ++b2)
      for (var g2 = 0, k2 = O(e2, v2 + 1, v2 = $(w2 = u2[b2])), m2 = e2; g2 < h2; ++g2)
        if (m2 = x(w2 > 0 ? p2[g2] + " " + k2 : j(k2, /&\f/g, p2[g2])))
          f2[d2++] = m2;
    return I(e2, r3, a2, s2 === 0 ? c : i2, f2, o2, l2);
  }
  function te(e2, r3, a2) {
    return I(e2, r3, a2, n, g(K()), O(e2, 2, -2), 0);
  }
  function ue(e2, r3, a2, n2) {
    return I(e2, r3, a2, s, O(e2, 0, n2), O(e2, n2 + 1, -1), n2);
  }
  function fe(e2, r3) {
    var a2 = "";
    var n2 = M(e2);
    for (var c2 = 0; c2 < n2; c2++)
      a2 += r3(e2[c2], c2, e2, r3) || "";
    return a2;
  }
  function oe(e2, r3, a2, t2) {
    switch (e2.type) {
      case i:
      case s:
        return e2.return = e2.return || e2.value;
      case n:
        return "";
      case h:
        return e2.return = e2.value + "{" + fe(e2.children, t2) + "}";
      case c:
        e2.value = e2.props.join(",");
    }
    return A(a2 = fe(e2.children, t2)) ? e2.return = e2.value + "{" + a2 + "}" : "";
  }
  function le(e2) {
    var r3 = M(e2);
    return function(a2, n2, c2, s2) {
      var t2 = "";
      for (var u2 = 0; u2 < r3; u2++)
        t2 += e2[u2](a2, n2, c2, s2) || "";
      return t2;
    };
  }
  function ve(e2) {
    return function(r3) {
      if (!r3.root) {
        if (r3 = r3.return)
          e2(r3);
      }
    };
  }

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize = function weakMemoize2(func) {
    var cache6 = new WeakMap();
    return function(arg) {
      if (cache6.has(arg)) {
        return cache6.get(arg);
      }
      var ret = func(arg);
      cache6.set(arg, ret);
      return ret;
    };
  };
  const emotion_weak_memoize_esm_default = weakMemoize;

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character = 0;
    while (true) {
      previous = character;
      character = P();
      if (previous === 38 && character === 12) {
        points[index] = 1;
      }
      if (T(character)) {
        break;
      }
      N();
    }
    return R(begin, F);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character = 44;
    do {
      switch (T(character)) {
        case 0:
          if (character === 38 && P() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(F - 1, points, index);
          break;
        case 2:
          parsed[index] += W(character);
          break;
        case 4:
          if (character === 44) {
            parsed[++index] = P() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        default:
          parsed[index] += g(character);
      }
    } while (character = N());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return V(toRules(U(value), points));
  };
  var fixedElements = new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i2 = 0, k2 = 0; i2 < rules.length; i2++) {
      for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
        element.props[k2] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i2];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache6) {
    return function(element, index, children) {
      if (element.type !== "rule" || cache6.compat)
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses) {
        var isNested = !!element.parent;
        var commentContainer = isNested ? element.parent.children : children;
        for (var i2 = commentContainer.length - 1; i2 >= 0; i2--) {
          var node = commentContainer[i2];
          if (node.line < element.line) {
            break;
          }
          if (node.column < element.column) {
            if (isIgnoringComment(node)) {
              return;
            }
            break;
          }
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
    for (var i2 = index - 1; i2 >= 0; i2--) {
      if (!isImportRule(children[i2])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  function prefix(value, length) {
    switch (m(value, length)) {
      case 5103:
        return a + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return a + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return a + value + r + value + e + value + value;
      case 6828:
      case 4268:
        return a + value + e + value + value;
      case 6165:
        return a + value + e + "flex-" + value + value;
      case 5187:
        return a + value + j(value, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + value;
      case 5443:
        return a + value + e + "flex-item-" + j(value, /flex-|-self/, "") + value;
      case 4675:
        return a + value + e + "flex-line-pack" + j(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return a + value + e + j(value, "shrink", "negative") + value;
      case 5292:
        return a + value + e + j(value, "basis", "preferred-size") + value;
      case 6060:
        return a + "box-" + j(value, "-grow", "") + a + value + e + j(value, "grow", "positive") + value;
      case 4554:
        return a + j(value, /([^-])(transform)/g, "$1" + a + "$2") + value;
      case 6187:
        return j(j(j(value, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return j(value, /(image-set\([^]*)/, a + "$1$`$1");
      case 4968:
        return j(j(value, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return j(value, /(.+)-inline(.+)/, a + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (A(value) - 1 - length > 6)
          switch (C(value, length + 1)) {
            case 109:
              if (C(value, length + 4) !== 45)
                break;
            case 102:
              return j(value, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3$1" + r + (C(value, length + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~z(value, "stretch") ? prefix(j(value, "stretch", "fill-available"), length) + value : value;
          }
        break;
      case 4949:
        if (C(value, length + 1) !== 115)
          break;
      case 6444:
        switch (C(value, A(value) - 3 - (~z(value, "!important") && 10))) {
          case 107:
            return j(value, ":", ":" + a) + value;
          case 101:
            return j(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a + (C(value, 14) === 45 ? "inline-" : "") + "box$3$1" + a + "$2$3$1" + e + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (C(value, length + 11)) {
          case 114:
            return a + value + e + j(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return a + value + e + j(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return a + value + e + j(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return a + value + e + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index, children, callback) {
    if (element.length > -1) {
      if (!element["return"])
        switch (element.type) {
          case s:
            element["return"] = prefix(element.value, element.length);
            break;
          case h:
            return fe([J(element, {
              value: j(element.value, "@", "@" + a)
            })], callback);
          case c:
            if (element.length)
              return q(element.props, function(value) {
                switch (y(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return fe([J(element, {
                      props: [j(value, /:(read-\w+)/, ":" + r + "$1")]
                    })], callback);
                  case "::placeholder":
                    return fe([J(element, {
                      props: [j(value, /:(plac\w+)/, ":" + a + "input-$1")]
                    }), J(element, {
                      props: [j(value, /:(plac\w+)/, ":" + r + "$1")]
                    }), J(element, {
                      props: [j(value, /:(plac\w+)/, e + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node) {
        var dataEmotionAttribute = node.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node);
        node.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
        var attrib = node.getAttribute("data-emotion").split(" ");
        for (var i2 = 1; i2 < attrib.length; i2++) {
          inserted[attrib[i2]] = true;
        }
        nodesToHydrate.push(node);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache6.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [oe, function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== n) {
            currentSheet.insert(element.value + "{}");
          }
        }
      }];
      var serializer = le(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis2 = function stylis3(styles30) {
        return fe(ne(styles30), serializer);
      };
      _insert = function insert(selector, serialized, sheet2, shouldCache) {
        currentSheet = sheet2;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet2.insert(rule + serialized.map);
            }
          };
        }
        stylis2(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache6.inserted[serialized.name] = true;
        }
      };
    }
    var cache6 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache6.sheet.hydrate(nodesToHydrate);
    return cache6;
  };
  const emotion_cache_browser_esm_default = createCache;

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser2 = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className3) {
      if (registered[className3] !== void 0) {
        registeredStyles.push(registered[className3] + ";");
      } else {
        rawClassName += className3 + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache6, serialized, isStringTag2) {
    var className3 = cache6.key + "-" + serialized.name;
    if ((isStringTag2 === false || isBrowser2 === false) && cache6.registered[className3] === void 0) {
      cache6.registered[className3] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache6, serialized, isStringTag2) {
    registerStyles(cache6, serialized, isStringTag2);
    var className3 = cache6.key + "-" + serialized.name;
    if (cache6.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        var maybeStyles = cache6.insert(serialized === current ? "." + className3 : "", current, cache6.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h2 = 0;
    var k2, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k2 = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= k2 >>> 24;
      h2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h2 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h2 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h2 ^= str.charCodeAt(i2) & 255;
        h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    h2 ^= h2 >>> 13;
    h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
  }
  const emotion_hash_esm_default = murmur2;

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  const emotion_unitless_esm_default = unitlessKeys;

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = emotion_memoize_esm_default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (emotion_unitless_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  if (true) {
    var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    var contentValues = ["normal", "none", "initial", "inherit", "unset"];
    var oldProcessStyleValue = processStyleValue;
    var msPattern = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    var hyphenatedCache = {};
    processStyleValue = function processStyleValue2(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next = interpolation.next;
          if (next !== void 0) {
            while (next !== void 0) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }
          var styles30 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles30 += interpolation.map;
          }
          return styles30;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles30 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles30 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles30 += strings[0];
    }
    for (var i2 = 1; i2 < args.length; i2++) {
      styles30 += handleInterpolation(mergedProps, registered, args[i2]);
      if (stringMode) {
        if (strings[i2] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles30 += strings[i2];
      }
    }
    var sourceMap;
    if (true) {
      styles30 = styles30.replace(sourceMapPattern, function(match2) {
        sourceMap = match2;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match;
    while ((match = labelPattern.exec(styles30)) !== null) {
      identifierName += "-" + match[1];
    }
    var name = emotion_hash_esm_default(styles30) + identifierName;
    if (true) {
      return {
        name,
        styles: styles30,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name,
      styles: styles30,
      next: cursor
    };
  };

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  const React3 = __toModule(require_react());
  const react8 = __toModule(require_react());
  var syncFallback = function syncFallback2(create) {
    return create();
  };
  var useInsertionEffect = React3["useInsertionEffect"] ? React3["useInsertionEffect"] : false;
  var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
  var useInsertionEffectWithLayoutFallback = useInsertionEffect || react8.useLayoutEffect;

  // node_modules/@emotion/react/dist/emotion-element-6a883da9.browser.esm.js
  const react2 = __toModule(require_react());
  var hasOwnProperty = {}.hasOwnProperty;
  var EmotionCacheContext = react2.createContext(typeof HTMLElement !== "undefined" ? emotion_cache_browser_esm_default({
    key: "css"
  }) : null);
  if (true) {
    EmotionCacheContext.displayName = "EmotionCacheContext";
  }
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return react2.forwardRef(function(props, ref) {
      var cache6 = react2.useContext(EmotionCacheContext);
      return func(props, cache6, ref);
    });
  };
  var ThemeContext = react2.createContext({});
  if (true) {
    ThemeContext.displayName = "EmotionThemeContext";
  }
  var getTheme = function getTheme2(outerTheme, theme) {
    if (typeof theme === "function") {
      var mergedTheme = theme(outerTheme);
      if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
        throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
      }
      return mergedTheme;
    }
    if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
      throw new Error("[ThemeProvider] Please make your theme prop a plain object");
    }
    return _extends({}, outerTheme, theme);
  };
  var createCacheWithTheme = emotion_weak_memoize_esm_default(function(outerTheme) {
    return emotion_weak_memoize_esm_default(function(theme) {
      return getTheme(outerTheme, theme);
    });
  });
  var internalReactFunctionNames = new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var Insertion = function Insertion4(_ref) {
    var cache6 = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
    registerStyles(cache6, serialized, isStringTag2);
    var rules = useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache6, serialized, isStringTag2);
    });
    return null;
  };
  var Emotion = withEmotionCache(function(props, cache6, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache6.registered[cssProp] !== void 0) {
      cssProp = cache6.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className3 = "";
    if (typeof props.className === "string") {
      className3 = getRegisteredStyles(cache6.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className3 = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, react2.useContext(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    className3 += cache6.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className3;
    return react2.createElement(react2.Fragment, null, react2.createElement(Insertion, {
      cache: cache6,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), react2.createElement(WrappedComponent, newProps));
  });
  if (true) {
    Emotion.displayName = "EmotionCssPropInternal";
  }

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  const react3 = __toModule(require_react());
  const extends3 = __toModule(require_extends());
  const hoist_non_react_statics2 = __toModule(require_hoist_non_react_statics_cjs());
  var pkg = {
    name: "@emotion/react",
    version: "11.10.8",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    exports: {
      ".": {
        module: {
          worker: "./dist/emotion-react.worker.esm.js",
          browser: "./dist/emotion-react.browser.esm.js",
          default: "./dist/emotion-react.esm.js"
        },
        default: "./dist/emotion-react.cjs.js"
      },
      "./jsx-runtime": {
        module: {
          worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
          browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
          default: "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
        },
        default: "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
      },
      "./_isolated-hnrs": {
        module: {
          worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
          browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
          default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
        },
        default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
      },
      "./jsx-dev-runtime": {
        module: {
          worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
          browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
          default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
        },
        default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
      },
      "./package.json": "./package.json",
      "./types/css-prop": "./types/css-prop.d.ts",
      "./macro": "./macro.js"
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "_isolated-hnrs",
      "types/*.d.ts",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.18.3",
      "@emotion/babel-plugin": "^11.10.8",
      "@emotion/cache": "^11.10.8",
      "@emotion/serialize": "^1.1.1",
      "@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
      "@emotion/utils": "^1.2.0",
      "@emotion/weak-memoize": "^0.3.0",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@definitelytyped/dtslint": "0.0.112",
      "@emotion/css": "11.10.8",
      "@emotion/css-prettifier": "1.1.2",
      "@emotion/server": "11.10.0",
      "@emotion/styled": "11.10.8",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1",
      typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./_isolated-hnrs.js"
      ],
      umdName: "emotionReact",
      exports: {
        envConditions: [
          "browser",
          "worker"
        ],
        extra: {
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": "./macro.js"
        }
      }
    }
  };
  var warnedAboutCssPropForGlobal = false;
  var Global = withEmotionCache(function(props, cache6) {
    if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles30 = props.styles;
    var serialized = serializeStyles([styles30], void 0, react3.useContext(ThemeContext));
    var sheetRef = react3.useRef();
    useInsertionEffectWithLayoutFallback(function() {
      var key = cache6.key + "-global";
      var sheet2 = new cache6.sheet.constructor({
        key,
        nonce: cache6.sheet.nonce,
        container: cache6.sheet.container,
        speedy: cache6.sheet.isSpeedy
      });
      var rehydrating = false;
      var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache6.sheet.tags.length) {
        sheet2.before = cache6.sheet.tags[0];
      }
      if (node !== null) {
        rehydrating = true;
        node.setAttribute("data-emotion", key);
        sheet2.hydrate([node]);
      }
      sheetRef.current = [sheet2, rehydrating];
      return function() {
        sheet2.flush();
      };
    }, [cache6]);
    useInsertionEffectWithLayoutFallback(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet2 = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache6, serialized.next, true);
      }
      if (sheet2.tags.length) {
        var element = sheet2.tags[sheet2.tags.length - 1].nextElementSibling;
        sheet2.before = element;
        sheet2.flush();
      }
      cache6.insert("", serialized, sheet2, false);
    }, [cache6, serialized.name]);
    return null;
  });
  if (true) {
    Global.displayName = "EmotionGlobal";
  }
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  var keyframes = function keyframes2() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };
  var classnames = function classnames2(args) {
    var len = args.length;
    var i2 = 0;
    var cls = "";
    for (; i2 < len; i2++) {
      var arg = args[i2];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k2 in arg) {
              if (arg[k2] && k2) {
                toAdd && (toAdd += " ");
                toAdd += k2;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge(registered, css2, className3) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className3);
    if (registeredStyles.length < 2) {
      return className3;
    }
    return rawClassName + css2(registeredStyles);
  }
  var Insertion2 = function Insertion4(_ref) {
    var cache6 = _ref.cache, serializedArr = _ref.serializedArr;
    var rules = useInsertionEffectAlwaysWithSyncFallback(function() {
      for (var i2 = 0; i2 < serializedArr.length; i2++) {
        var res = insertStyles(cache6, serializedArr[i2], false);
      }
    });
    return null;
  };
  var ClassNames = withEmotionCache(function(props, cache6) {
    var hasRendered = false;
    var serializedArr = [];
    var css2 = function css3() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache6.registered);
      serializedArr.push(serialized);
      registerStyles(cache6, serialized, false);
      return cache6.key + "-" + serialized.name;
    };
    var cx = function cx2() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge(cache6.registered, css2, classnames(args));
    };
    var content = {
      css: css2,
      cx,
      theme: react3.useContext(ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    return react3.createElement(react3.Fragment, null, react3.createElement(Insertion2, {
      cache: cache6,
      serializedArr
    }), ele);
  });
  if (true) {
    ClassNames.displayName = "EmotionClassNames";
  }
  if (true) {
    var isBrowser = true;
    var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
    if (isBrowser && !isTestEnv) {
      var globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser ? window : global;
      var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey] = true;
    }
  }

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  const react4 = __toModule(require_react());
  var testOmitPropsOnStringTag = emotion_is_prop_valid_esm_default;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
    return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
    var shouldForwardProp2;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp2 !== "function" && isReal) {
      shouldForwardProp2 = tag.__emotion_forwardProp;
    }
    return shouldForwardProp2;
  };
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var Insertion3 = function Insertion4(_ref) {
    var cache6 = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
    registerStyles(cache6, serialized, isStringTag2);
    var rules = useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache6, serialized, isStringTag2);
    });
    return null;
  };
  var createStyled = function createStyled5(tag, options) {
    if (true) {
      if (tag === void 0) {
        throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
      }
    }
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles30 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles30.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles30.push.apply(styles30, args);
      } else {
        if (args[0][0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
        }
        styles30.push(args[0][0]);
        var len = args.length;
        var i2 = 1;
        for (; i2 < len; i2++) {
          if (args[0][i2] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
          }
          styles30.push(args[i2], args[0][i2]);
        }
      }
      var Styled = withEmotionCache(function(props, cache6, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className3 = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = react4.useContext(ThemeContext);
        }
        if (typeof props.className === "string") {
          className3 = getRegisteredStyles(cache6.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className3 = props.className + " ";
        }
        var serialized = serializeStyles(styles30.concat(classInterpolations), cache6.registered, mergedProps);
        className3 += cache6.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className3 += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as")
            continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className3;
        newProps.ref = ref;
        return react4.createElement(react4.Fragment, null, react4.createElement(Insertion3, {
          cache: cache6,
          serialized,
          isStringTag: typeof FinalTag === "string"
        }), react4.createElement(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles30;
      Styled.__emotion_forwardProp = shouldForwardProp2;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && true) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        return createStyled5(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles30);
      };
      return Styled;
    };
  };
  const emotion_styled_base_browser_esm_default = createStyled;

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  const extends5 = __toModule(require_extends());
  const react6 = __toModule(require_react());
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = emotion_styled_base_browser_esm_default.bind();
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });
  const emotion_styled_browser_esm_default = newStyled;

  // node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js
  const React245 = __toModule(require_react());
  const prop_types167 = __toModule(require_prop_types4());
  const jsx_runtime253 = __toModule(require_jsx_runtime());
  function isEmpty3(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  function GlobalStyles6(props) {
    const {
      styles: styles30,
      defaultTheme: defaultTheme11 = {}
    } = props;
    const globalStyles = typeof styles30 === "function" ? (themeInput) => styles30(isEmpty3(themeInput) ? defaultTheme11 : themeInput) : styles30;
    return jsx_runtime253.jsx(Global, {
      styles: globalStyles
    });
  }
  GlobalStyles6.propTypes = {
    defaultTheme: prop_types167.default.object,
    styles: prop_types167.default.oneOfType([prop_types167.default.array, prop_types167.default.string, prop_types167.default.object, prop_types167.default.func])
  };

  // node_modules/@mui/styled-engine/index.js
  function styled125(tag, options) {
    const stylesFactory = emotion_styled_browser_esm_default(tag, options);
    if (true) {
      return (...styles30) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles30.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles30.some((style16) => style16 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles30);
      };
    }
    return stylesFactory;
  }
  const internal_processStyles = (tag, processor) => {
    if (Array.isArray(tag.__emotion_styles)) {
      tag.__emotion_styles = processor(tag.__emotion_styles);
    }
  };

  // node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  const _excluded168 = ["values", "unit", "step"];
  const sortBreakpointsValues = (values3) => {
    const breakpointsAsArray = Object.keys(values3).map((key) => ({
      key,
      val: values3[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints11) {
    const {
      values: values3 = {
        xs: 0,
        sm: 600,
        md: 900,
        lg: 1200,
        xl: 1536
      },
      unit = "px",
      step = 5
    } = breakpoints11, other = _objectWithoutPropertiesLoose(breakpoints11, _excluded168);
    const sortedValues = sortBreakpointsValues(values3);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys.indexOf(end2);
      return `@media (min-width:${typeof values3[start2] === "number" ? values3[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/system/esm/createTheme/shape.js
  const shape2 = {
    borderRadius: 4
  };
  const shape_default = shape2;

  // node_modules/@mui/system/esm/responsivePropType.js
  const prop_types180 = __toModule(require_prop_types5());
  const responsivePropType4 = prop_types180.default.oneOfType([prop_types180.default.number, prop_types180.default.string, prop_types180.default.object, prop_types180.default.array]);
  const responsivePropType_default = responsivePropType4;

  // node_modules/@mui/system/esm/merge.js
  function merge4(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
    });
  }
  const merge_default = merge4;

  // node_modules/@mui/system/esm/breakpoints.js
  const values = {
    xs: 0,
    sm: 600,
    md: 900,
    lg: 1200,
    xl: 1536
  };
  const defaultBreakpoints = {
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys3, style16) {
    return breakpointKeys3.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style16);
  }

  // node_modules/@mui/system/esm/style.js
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue2(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style13(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue2(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue2(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize48(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = {
      [prop]: responsivePropType_default
    };
    fn.filterProps = [prop];
    return fn;
  }
  const style_default = style13;

  // node_modules/@mui/system/esm/memoize.js
  function memoize5(fn) {
    const cache6 = {};
    return (arg) => {
      if (cache6[arg] === void 0) {
        cache6[arg] = fn(arg);
      }
      return cache6[arg];
    };
  }

  // node_modules/@mui/system/esm/spacing.js
  const properties = {
    m: "margin",
    p: "padding"
  };
  const directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  const aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  const getCssProperties = memoize5((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a2, b2] = prop.split("");
    const property = properties[a2];
    const direction = directions[b2] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  const spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs) => {
        if (typeof abs === "string") {
          return abs;
        }
        if (true) {
          if (typeof abs !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
          }
        }
        return themeSpacing * abs;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs) => {
        if (typeof abs === "string") {
          return abs;
        }
        if (true) {
          if (!Number.isInteger(abs)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs = Math.abs(propValue);
    const transformed = transformer(abs);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style12(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style12(props, marginKeys);
  }
  margin.propTypes = marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {});
  margin.filterProps = marginKeys;
  function padding(props) {
    return style12(props, paddingKeys);
  }
  padding.propTypes = paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {});
  padding.filterProps = paddingKeys;
  function spacing7(props) {
    return style12(props, spacingKeys);
  }
  spacing7.propTypes = spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {});
  spacing7.filterProps = spacingKeys;

  // node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing9 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing9.mui = true;
    return spacing9;
  }

  // node_modules/@mui/system/esm/compose.js
  function compose2(...styles30) {
    const handlers = styles30.reduce((acc, style16) => {
      style16.filterProps.forEach((prop) => {
        acc[prop] = style16;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = styles30.reduce((acc, style16) => Object.assign(acc, style16.propTypes), {});
    fn.filterProps = styles30.reduce((acc, style16) => acc.concat(style16.filterProps), []);
    return fn;
  }
  const compose_default = compose2;

  // node_modules/@mui/system/esm/borders.js
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  const border = style_default({
    prop: "border",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderTop = style_default({
    prop: "borderTop",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderRight = style_default({
    prop: "borderRight",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderBottom = style_default({
    prop: "borderBottom",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderLeft = style_default({
    prop: "borderLeft",
    themeKey: "borders",
    transform: borderTransform
  });
  const borderColor = style_default({
    prop: "borderColor",
    themeKey: "palette"
  });
  const borderTopColor = style_default({
    prop: "borderTopColor",
    themeKey: "palette"
  });
  const borderRightColor = style_default({
    prop: "borderRightColor",
    themeKey: "palette"
  });
  const borderBottomColor = style_default({
    prop: "borderBottomColor",
    themeKey: "palette"
  });
  const borderLeftColor = style_default({
    prop: "borderLeftColor",
    themeKey: "palette"
  });
  const borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = {
    borderRadius: responsivePropType_default
  };
  borderRadius.filterProps = ["borderRadius"];
  const borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);

  // node_modules/@mui/system/esm/cssGrid.js
  const gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = {
    gap: responsivePropType_default
  };
  gap.filterProps = ["gap"];
  const columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = {
    columnGap: responsivePropType_default
  };
  columnGap.filterProps = ["columnGap"];
  const rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = {
    rowGap: responsivePropType_default
  };
  rowGap.filterProps = ["rowGap"];
  const gridColumn = style_default({
    prop: "gridColumn"
  });
  const gridRow = style_default({
    prop: "gridRow"
  });
  const gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  const gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  const gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  const gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  const gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  const gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  const gridArea = style_default({
    prop: "gridArea"
  });
  const grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  // node_modules/@mui/system/esm/palette.js
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  const color = style_default({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  const bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  const palette3 = compose_default(color, bgcolor, backgroundColor);

  // node_modules/@mui/system/esm/sizing.js
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  const width = style_default({
    prop: "width",
    transform: sizingTransform
  });
  const maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
        const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values[propValue];
        return {
          maxWidth: breakpoint || sizingTransform(propValue)
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  const minWidth = style_default({
    prop: "minWidth",
    transform: sizingTransform
  });
  const height = style_default({
    prop: "height",
    transform: sizingTransform
  });
  const maxHeight = style_default({
    prop: "maxHeight",
    transform: sizingTransform
  });
  const minHeight = style_default({
    prop: "minHeight",
    transform: sizingTransform
  });
  const sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  const sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  const boxSizing = style_default({
    prop: "boxSizing"
  });
  const sizing3 = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

  // node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
  const defaultSxConfig2 = {
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    boxShadow: {
      themeKey: "shadows"
    },
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  const defaultSxConfig_default = defaultSxConfig2;

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue3(prop, val, theme, config3) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config3[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style16
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style16) {
        return style16(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue2(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue2(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize48(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx10(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {}
      } = props || {};
      if (!sx) {
        return null;
      }
      const config3 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig_default;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css2 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config3[styleKey]) {
                css2 = merge_default(css2, getThemeValue3(styleKey, value, theme, config3));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x2) => ({
                  [styleKey]: x2
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css2[styleKey] = styleFunctionSx10({
                    sx: value,
                    theme
                  });
                } else {
                  css2 = merge_default(css2, breakpointsValues);
                }
              }
            } else {
              css2 = merge_default(css2, getThemeValue3(styleKey, value, theme, config3));
            }
          }
        });
        return removeUnusedBreakpoints(breakpointsKeys, css2);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx10;
  }
  const styleFunctionSx9 = unstable_createStyleFunctionSx();
  styleFunctionSx9.filterProps = ["sx"];
  const styleFunctionSx_default = styleFunctionSx9;

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  const _excluded169 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme10(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded169);
    const breakpoints11 = createBreakpoints(breakpointsInput);
    const spacing9 = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints: breakpoints11,
      direction: "ltr",
      components: {},
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing9,
      shape: _extends({}, shape_default, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig_default, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  const createTheme_default2 = createTheme10;

  // node_modules/@mui/system/esm/useThemeWithoutDefault.js
  const React256 = __toModule(require_react());
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme38(defaultTheme11 = null) {
    const contextTheme = React256.useContext(ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme11 : contextTheme;
  }
  const useThemeWithoutDefault_default = useTheme38;

  // node_modules/@mui/system/esm/useTheme.js
  const systemDefaultTheme2 = createTheme_default2();
  function useTheme36(defaultTheme11 = systemDefaultTheme2) {
    return useThemeWithoutDefault_default(defaultTheme11);
  }
  const useTheme_default = useTheme36;

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  const React248 = __toModule(require_react());
  const prop_types172 = __toModule(require_prop_types5());
  const jsx_runtime256 = __toModule(require_jsx_runtime());
  function GlobalStyles9({
    styles: styles30,
    themeId,
    defaultTheme: defaultTheme11 = {}
  }) {
    const upperTheme = useTheme_default(defaultTheme11);
    const globalStyles = typeof styles30 === "function" ? styles30(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles30;
    return jsx_runtime256.jsx(GlobalStyles6, {
      styles: globalStyles
    });
  }
  GlobalStyles9.propTypes = {
    defaultTheme: prop_types172.default.object,
    styles: prop_types172.default.oneOfType([prop_types172.default.array, prop_types172.default.func, prop_types172.default.number, prop_types172.default.object, prop_types172.default.string, prop_types172.default.bool]),
    themeId: prop_types172.default.string
  };
  const GlobalStyles_default2 = GlobalStyles9;

  // node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
  const _excluded174 = ["sx"];
  const splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config3 = (_props$theme$unstable = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig_default;
    Object.keys(props).forEach((prop) => {
      if (config3[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded174);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!isPlainObject(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }

  // node_modules/clsx/dist/clsx.m.js
  function r2(e2) {
    var t2, f2, n2 = "";
    if ("string" == typeof e2 || "number" == typeof e2)
      n2 += e2;
    else if ("object" == typeof e2)
      if (Array.isArray(e2))
        for (t2 = 0; t2 < e2.length; t2++)
          e2[t2] && (f2 = r2(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
      else
        for (t2 in e2)
          e2[t2] && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  function clsx148() {
    for (var e2, t2, f2 = 0, n2 = ""; f2 < arguments.length; )
      (e2 = arguments[f2++]) && (t2 = r2(e2)) && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  const clsx_m_default = clsx148;

  // node_modules/@mui/system/esm/createBox.js
  const React252 = __toModule(require_react());
  const jsx_runtime260 = __toModule(require_jsx_runtime());
  const _excluded166 = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme11,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = styled125("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx_default);
    const Box8 = React252.forwardRef(function Box9(inProps, ref) {
      const theme = useTheme_default(defaultTheme11);
      const _extendSxProp = extendSxProp(inProps), {
        className: className3,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded166);
      return jsx_runtime260.jsx(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx_m_default(className3, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme[themeId] || theme : theme
      }, other));
    });
    return Box8;
  }

  // node_modules/@mui/system/esm/propsToClassKey.js
  const _excluded173 = ["variant"];
  function isEmpty5(string) {
    return string.length === 0;
  }
  function propsToClassKey2(props) {
    const {
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded173);
    let classKey = variant || "";
    Object.keys(other).sort().forEach((key) => {
      if (key === "color") {
        classKey += isEmpty5(classKey) ? props[key] : capitalize48(props[key]);
      } else {
        classKey += `${isEmpty5(classKey) ? key : capitalize48(key)}${capitalize48(props[key].toString())}`;
      }
    });
    return classKey;
  }

  // node_modules/@mui/system/esm/createStyled.js
  const _excluded167 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty4(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && tag.charCodeAt(0) > 96;
  }
  const getStyleOverrides = (name, theme) => {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }
    return null;
  };
  const getVariantStyles = (name, theme) => {
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }
    const variantsStyles = {};
    variants.forEach((definition) => {
      const key = propsToClassKey2(definition.props);
      variantsStyles[key] = definition.style;
    });
    return variantsStyles;
  };
  const variantsResolver = (props, styles30, theme, name) => {
    var _theme$components, _theme$components$nam;
    const {
      ownerState = {}
    } = props;
    const variantsStyles = [];
    const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
    if (themeVariants) {
      themeVariants.forEach((themeVariant) => {
        let isMatch = true;
        Object.keys(themeVariant.props).forEach((key) => {
          if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
            isMatch = false;
          }
        });
        if (isMatch) {
          variantsStyles.push(styles30[propsToClassKey2(themeVariant.props)]);
        }
      });
    }
    return variantsStyles;
  };
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  const systemDefaultTheme = createTheme_default2();
  const lowercaseFirstLetter = (string) => {
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme11,
    theme,
    themeId
  }) {
    return isEmpty4(theme) ? defaultTheme11 : theme[themeId] || theme;
  }
  function createStyled2(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme11 = systemDefaultTheme,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx_default(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme: defaultTheme11,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      internal_processStyles(tag, (styles30) => styles30.filter((style16) => !(style16 != null && style16.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        overridesResolver: overridesResolver8
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded167);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
      const skipSx = inputSkipSx || false;
      let label;
      if (true) {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = styled125(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const muiStyledResolver = (styleArg, ...expressions) => {
        const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
          return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (props) => {
            return stylesArg(_extends({}, props, {
              theme: resolveTheme(_extends({}, props, {
                defaultTheme: defaultTheme11,
                themeId
              }))
            }));
          } : stylesArg;
        }) : [];
        let transformedStyleArg = styleArg;
        if (componentName && overridesResolver8) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme11,
              themeId
            }));
            const styleOverrides = getStyleOverrides(componentName, theme);
            if (styleOverrides) {
              const resolvedStyleOverrides = {};
              Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends({}, props, {
                  theme
                })) : slotStyle;
              });
              return overridesResolver8(props, resolvedStyleOverrides);
            }
            return null;
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme11,
              themeId
            }));
            return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        } else if (typeof styleArg === "function" && styleArg.__emotion_real !== styleArg) {
          transformedStyleArg = (props) => styleArg(_extends({}, props, {
            theme: resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme11,
              themeId
            }))
          }));
        }
        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (true) {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${componentSlot || ""}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }
          Component.displayName = displayName;
        }
        if (tag.muiName) {
          Component.muiName = tag.muiName;
        }
        return Component;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }

  // node_modules/@mui/system/esm/styled.js
  const styled130 = createStyled2();
  const styled_default2 = styled130;

  // node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }

  // node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps97({
    props,
    name,
    defaultTheme: defaultTheme11,
    themeId
  }) {
    let theme = useTheme_default(defaultTheme11);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/system/esm/colorManipulator.js
  function clamp4(value, min2 = 0, max2 = 1) {
    if (true) {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return Math.min(Math.max(min2, value), max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re2 = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re2);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n2) => n2 + n2);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n2, index) => {
      return index < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(`MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().`);
    }
    let values3 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values3 = values3.split(" ");
      colorSpace = values3.shift();
      if (values3.length === 4 && values3[3].charAt(0) === "/") {
        values3[3] = values3[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);
      }
    } else {
      values3 = values3.split(",");
    }
    values3 = values3.map((value) => parseFloat(value));
    return {
      type,
      values: values3,
      colorSpace
    };
  }
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values3
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values3 = values3.map((n2, i2) => i2 < 3 ? parseInt(n2, 10) : n2);
    } else if (type.indexOf("hsl") !== -1) {
      values3[1] = `${values3[1]}%`;
      values3[2] = `${values3[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values3 = `${colorSpace} ${values3.join(" ")}`;
    } else {
      values3 = `${values3.join(", ")}`;
    }
    return `${type}(${values3})`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values3
    } = color2;
    const h2 = values3[0];
    const s2 = values3[1] / 100;
    const l2 = values3[2] / 100;
    const a2 = s2 * Math.min(l2, 1 - l2);
    const f2 = (n2, k2 = (n2 + h2 / 30) % 12) => l2 - a2 * Math.max(Math.min(k2 - 3, 9 - k2, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f2(0) * 255), Math.round(f2(8) * 255), Math.round(f2(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values3[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp4(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp4(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp4(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (255 - color2.values[i2]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i2 = 0; i2 < 3; i2 += 1) {
        color2.values[i2] += (1 - color2.values[i2]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }

  // node_modules/@mui/system/esm/Container/createContainer.js
  const React247 = __toModule(require_react());
  const prop_types171 = __toModule(require_prop_types5());
  const jsx_runtime255 = __toModule(require_jsx_runtime());
  const _excluded163 = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
  const defaultTheme8 = createTheme_default2();
  const defaultCreateStyledComponent = styled_default2("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, styles30[`maxWidth${capitalize48(String(ownerState.maxWidth))}`], ownerState.fixed && styles30.fixed, ownerState.disableGutters && styles30.disableGutters];
    }
  });
  const useThemePropsDefault = (inProps) => useThemeProps97({
    props: inProps,
    name: "MuiContainer",
    defaultTheme: defaultTheme8
  });
  const useUtilityClasses133 = (ownerState, componentName) => {
    const getContainerUtilityClass3 = (slot) => {
      return generateUtilityClass2(componentName, slot);
    };
    const {
      classes,
      fixed,
      disableGutters,
      maxWidth: maxWidth2
    } = ownerState;
    const slots = {
      root: ["root", maxWidth2 && `maxWidth${capitalize48(String(maxWidth2))}`, fixed && "fixed", disableGutters && "disableGutters"]
    };
    return composeClasses2(slots, getContainerUtilityClass3, classes);
  };
  function createContainer(options = {}) {
    const {
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps123 = useThemePropsDefault,
      componentName = "MuiContainer"
    } = options;
    const ContainerRoot = createStyledComponent(({
      theme,
      ownerState
    }) => _extends({
      width: "100%",
      marginLeft: "auto",
      boxSizing: "border-box",
      marginRight: "auto",
      display: "block"
    }, !ownerState.disableGutters && {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      [theme.breakpoints.up("sm")]: {
        paddingLeft: theme.spacing(3),
        paddingRight: theme.spacing(3)
      }
    }), ({
      theme,
      ownerState
    }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
      const breakpoint = breakpointValueKey;
      const value = theme.breakpoints.values[breakpoint];
      if (value !== 0) {
        acc[theme.breakpoints.up(breakpoint)] = {
          maxWidth: `${value}${theme.breakpoints.unit}`
        };
      }
      return acc;
    }, {}), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.maxWidth === "xs" && {
      [theme.breakpoints.up("xs")]: {
        maxWidth: Math.max(theme.breakpoints.values.xs, 444)
      }
    }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
      [theme.breakpoints.up(ownerState.maxWidth)]: {
        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
      }
    }));
    const Container7 = React247.forwardRef(function Container8(inProps, ref) {
      const props = useThemeProps123(inProps);
      const {
        className: className3,
        component = "div",
        disableGutters = false,
        fixed = false,
        maxWidth: maxWidth2 = "lg"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded163);
      const ownerState = _extends({}, props, {
        component,
        disableGutters,
        fixed,
        maxWidth: maxWidth2
      });
      const classes = useUtilityClasses133(ownerState, componentName);
      return jsx_runtime255.jsx(ContainerRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className3),
        ref
      }, other));
    });
    Container7.propTypes = {
      children: prop_types171.default.node,
      classes: prop_types171.default.object,
      className: prop_types171.default.string,
      component: prop_types171.default.elementType,
      disableGutters: prop_types171.default.bool,
      fixed: prop_types171.default.bool,
      maxWidth: prop_types171.default.oneOfType([prop_types171.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), prop_types171.default.string]),
      sx: prop_types171.default.oneOfType([prop_types171.default.arrayOf(prop_types171.default.oneOfType([prop_types171.default.func, prop_types171.default.object, prop_types171.default.bool])), prop_types171.default.func, prop_types171.default.object])
    };
    return Container7;
  }

  // node_modules/@mui/material/styles/createMixins.js
  function createMixins(breakpoints11, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints11.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints11.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  const _excluded156 = ["mode", "contrastThreshold", "tonalOffset"];
  const light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.6)",
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  const dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette5) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette5, other = _objectWithoutPropertiesLoose(palette5, _excluded156);
    const primary = palette5.primary || getDefaultPrimary(mode);
    const secondary = palette5.secondary || getDefaultSecondary(mode);
    const error = palette5.error || getDefaultError(mode);
    const info = palette5.info || getDefaultInfo(mode);
    const success = palette5.success || getDefaultSuccess(mode);
    const warning9 = palette5.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(`MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.`);
      }
      if (typeof color2.main !== "string") {
        throw new Error(`MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });`);
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes2 = {
      dark,
      light
    };
    if (true) {
      if (!modes2[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge(_extends({
      common: _extends({}, common_default),
      mode,
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      error: augmentColor({
        color: error,
        name: "error"
      }),
      warning: augmentColor({
        color: warning9,
        name: "warning"
      }),
      info: augmentColor({
        color: info,
        name: "info"
      }),
      success: augmentColor({
        color: success,
        name: "success"
      }),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, modes2[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  const _excluded159 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round2(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  const caseAllCaps = {
    textTransform: "uppercase"
  };
  const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography2(palette5, typography4) {
    const _ref = typeof typography4 === "function" ? typography4(palette5) : typography4, {
      fontFamily: fontFamily2 = defaultFontFamily,
      fontSize: fontSize2 = 14,
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      htmlFontSize = 16,
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded159);
    if (true) {
      if (typeof fontSize2 !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize2 / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight2, size, lineHeight2, letterSpacing2, casing) => _extends({
      fontFamily: fontFamily2,
      fontWeight: fontWeight2,
      fontSize: pxToRem(size),
      lineHeight: lineHeight2
    }, fontFamily2 === defaultFontFamily ? {
      letterSpacing: `${round2(letterSpacing2 / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  const shadowKeyUmbraOpacity = 0.2;
  const shadowKeyPenumbraOpacity = 0.14;
  const shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  const shadows2 = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  const shadows_default = shadows2;

  // node_modules/@mui/material/styles/createTransitions.js
  const _excluded158 = ["duration", "easing", "delay"];
  const easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  const duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions3(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded158);
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  const zIndex2 = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  const zIndex_default = zIndex2;

  // node_modules/@mui/material/styles/createTheme.js
  const _excluded157 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded157);
    if (options.vars) {
      throw new Error(`MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.`);
    }
    const palette5 = createPalette(paletteInput);
    const systemTheme = createTheme_default2(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette5,
      shadows: shadows_default.slice(),
      typography: createTypography2(palette5, typographyInput),
      transitions: createTransitions3(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node, component) => {
        let key;
        for (key in node) {
          const child = node[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass2("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig_default, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  const createTheme_default = createTheme2;

  // node_modules/@mui/material/styles/cssUtils.js
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length) {
    return parseFloat(length);
  }

  // node_modules/@mui/material/styles/defaultTheme.js
  const defaultTheme4 = createTheme_default();
  const defaultTheme_default = defaultTheme4;

  // node_modules/@mui/material/styles/useTheme.js
  const React238 = __toModule(require_react());
  function useTheme3() {
    const theme = useTheme_default(defaultTheme_default);
    if (true) {
      React238.useDebugValue(theme);
    }
    return theme[identifier_default] || theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  function useThemeProps2({
    props,
    name
  }) {
    return useThemeProps97({
      props,
      name,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
  const slotShouldForwardProp = shouldForwardProp;
  const styled123 = createStyled2({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp
  });
  const styled_default = styled123;

  // node_modules/@mui/material/styles/getOverlayAlpha.js
  const getOverlayAlpha3 = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  const getOverlayAlpha_default = getOverlayAlpha3;

  // node_modules/@mui/material/utils/capitalize.js
  const capitalize_default = capitalize48;

  // node_modules/@mui/base/utils/isHostComponent.js
  function isHostComponent2(element) {
    return typeof element === "string";
  }

  // node_modules/@mui/base/utils/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent2(elementType)) {
      return otherProps;
    }
    return _extends({}, otherProps, {
      ownerState: _extends({}, otherProps.ownerState, ownerState)
    });
  }

  // node_modules/@mui/base/utils/ClassNameConfigurator.js
  const React53 = __toModule(require_react());
  const jsx_runtime41 = __toModule(require_jsx_runtime());
  const defaultContextValue = {
    disableDefaultClasses: false
  };
  const ClassNameConfiguratorContext = React53.createContext(defaultContextValue);
  function useClassNamesOverride(generateUtilityClass141) {
    const {
      disableDefaultClasses
    } = React53.useContext(ClassNameConfiguratorContext);
    return (slot) => {
      if (disableDefaultClasses) {
        return "";
      }
      return generateUtilityClass141(slot);
    };
  }

  // node_modules/@mui/base/utils/extractEventHandlers.js
  function extractEventHandlers2(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/resolveComponentProps.js
  function resolveComponentProps2(componentProps, ownerState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState);
    }
    return componentProps;
  }

  // node_modules/@mui/base/utils/omitEventHandlers.js
  function omitEventHandlers2(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/mergeSlotProps.js
  function mergeSlotProps2(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className: className3
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_m_default(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className3, additionalProps == null ? void 0 : additionalProps.className);
      const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers2(_extends({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers2(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers2(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_m_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className3, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  const _excluded23 = ["elementType", "externalSlotProps", "ownerState"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded23);
    const resolvedComponentsProps = resolveComponentProps2(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps2(_extends({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState(elementType, _extends({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }

  // node_modules/@mui/base/useBadge/useBadge.js
  function useBadge2(parameters) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = parameters;
    const prevProps = usePreviousProps_default({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max2 = maxProp
    } = invisible ? prevProps : parameters;
    const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max2,
      displayValue
    };
  }

  // node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js
  const React6 = __toModule(require_react());
  const prop_types3 = __toModule(require_prop_types());
  const jsx_runtime4 = __toModule(require_jsx_runtime());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React6.useRef(false);
    const nodeRef = React6.useRef(null);
    const activatedRef = React6.useRef(false);
    const syntheticEventRef = React6.useRef(false);
    React6.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef(children.ref, nodeRef);
    const handleClickAway = useEventCallback((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React6.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React6.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return jsx_runtime4.jsx(React6.Fragment, {
      children: React6.cloneElement(children, childrenProps)
    });
  }
  ClickAwayListener.propTypes = {
    children: elementAcceptingRef_default.isRequired,
    disableReactTree: prop_types3.default.bool,
    mouseEvent: prop_types3.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    onClickAway: prop_types3.default.func.isRequired,
    touchEvent: prop_types3.default.oneOf(["onTouchEnd", "onTouchStart", false])
  };
  if (true) {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }
  const ClickAwayListener_default = ClickAwayListener;

  // node_modules/@mui/base/FocusTrap/FocusTrap.js
  const React7 = __toModule(require_react());
  const prop_types4 = __toModule(require_prop_types());
  const jsx_runtime5 = __toModule(require_jsx_runtime());
  const jsx_runtime6 = __toModule(require_jsx_runtime());
  const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node) {
    const tabindexAttr = parseInt(node.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node.contentEditable === "true" || (node.nodeName === "AUDIO" || node.nodeName === "VIDEO" || node.nodeName === "DETAILS") && node.getAttribute("tabindex") === null) {
      return 0;
    }
    return node.tabIndex;
  }
  function isNonTabbableRadio(node) {
    if (node.tagName !== "INPUT" || node.type !== "radio") {
      return false;
    }
    if (!node.name) {
      return false;
    }
    const getRadio = (selector) => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node.name}"]`);
    }
    return roving !== node;
  }
  function isNodeMatchingSelectorFocusable(node) {
    if (node.disabled || node.tagName === "INPUT" && node.type === "hidden" || isNonTabbableRadio(node)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root2) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node, i2) => {
      const nodeTabIndex = getTabIndex(node);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node);
      } else {
        orderedTabNodes.push({
          documentOrder: i2,
          tabIndex: nodeTabIndex,
          node
        });
      }
    });
    return orderedTabNodes.sort((a2, b2) => a2.tabIndex === b2.tabIndex ? a2.documentOrder - b2.documentOrder : a2.tabIndex - b2.tabIndex).map((a2) => a2.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled: isEnabled2 = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React7.useRef(false);
    const sentinelStart = React7.useRef(null);
    const sentinelEnd = React7.useRef(null);
    const nodeToRestore = React7.useRef(null);
    const reactFocusEventTarget = React7.useRef(null);
    const activated = React7.useRef(false);
    const rootRef = React7.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React7.useRef(null);
    React7.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React7.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React7.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const contain = (nativeEvent) => {
        const {
          current: rootElement
        } = rootRef;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled2() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (!rootElement.contains(doc.activeElement)) {
          if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }
          if (!activated.current) {
            return;
          }
          let tabbable = [];
          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }
          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;
            const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];
            if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
              if (isShiftTab) {
                focusPrevious.focus();
              } else {
                focusNext.focus();
              }
            }
          } else {
            rootElement.focus();
          }
        }
      };
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled2() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain(null);
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled2, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return jsx_runtime6.jsxs(React7.Fragment, {
      children: [jsx_runtime5.jsx("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), React7.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), jsx_runtime5.jsx("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  FocusTrap.propTypes = {
    children: elementAcceptingRef_default,
    disableAutoFocus: prop_types4.default.bool,
    disableEnforceFocus: prop_types4.default.bool,
    disableRestoreFocus: prop_types4.default.bool,
    getTabbable: prop_types4.default.func,
    isEnabled: prop_types4.default.func,
    open: prop_types4.default.bool.isRequired
  };
  if (true) {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }
  const FocusTrap_default = FocusTrap;

  // node_modules/@popperjs/core/lib/enums.js
  var top2 = "top";
  var bottom2 = "bottom";
  var right2 = "right";
  var left2 = "left";
  var auto = "auto";
  var basePlacements = [top2, bottom2, right2, left2];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName2(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow2(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument10 = node.ownerDocument;
      return ownerDocument10 ? ownerDocument10.defaultView || window : window;
    }
    return node;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow2(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement2(node) {
    var OwnElement = getWindow2(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow2(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style16 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement2(element) || !getNodeName2(element)) {
        return;
      }
      Object.assign(element.style, style16);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style16 = styleProperties.reduce(function(style17, property) {
          style17[property] = "";
          return style17;
        }, {});
        if (!isHTMLElement2(element) || !getNodeName2(element)) {
          return;
        }
        Object.assign(element.style, style16);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  const applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement2(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round3 = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport2() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement2(element)) {
      scaleX = element.offsetWidth > 0 ? round3(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round3(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow2(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport2() && isFixedStrategy;
    var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width2 = clientRect.width / scaleX;
    var height2 = clientRect.height / scaleY;
    return {
      width: width2,
      height: height2,
      top: y2,
      right: x2 + width2,
      bottom: y2 + height2,
      left: x2,
      x: x2,
      y: y2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect2(element) {
    var clientRect = getBoundingClientRect(element);
    var width2 = element.offsetWidth;
    var height2 = element.offsetHeight;
    if (Math.abs(clientRect.width - width2) <= 1) {
      width2 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height2) <= 1) {
      height2 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width2,
      height: height2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow2(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement2(element) {
    return ["table", "td", "th"].indexOf(getNodeName2(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement2(element) {
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode2(element) {
    if (getNodeName2(element) === "html") {
      return element;
    }
    return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement2(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement2(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement2(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode2(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement2(currentNode) && ["html", "body"].indexOf(getNodeName2(currentNode)) < 0) {
      var css2 = getComputedStyle2(currentNode);
      if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent2(element) {
    var window2 = getWindow2(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement2(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName2(offsetParent) === "html" || getNodeName2(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement2(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within2(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v2 = within2(min2, value, max2);
    return v2 > max2 ? max2 : v2;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject2() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject2(paddingObject) {
    return Object.assign({}, getFreshSideObject2(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap2(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject2(typeof padding2 !== "number" ? padding2 : expandToHashMap2(padding2, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets5 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement2(state.placement);
    var axis = getMainAxisFromPlacement2(basePlacement);
    var isVertical = [left2, right2].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets5) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect2(arrowElement);
    var minProp = axis === "y" ? top2 : left2;
    var maxProp = axis === "y" ? bottom2 : right2;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets5[axis] - state.rects.popper[len];
    var startDiff = popperOffsets5[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent2(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset4 = within2(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset4, _state$modifiersData$.centerOffset = offset4 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement2(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  const arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation2(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x2 = _ref.x, y2 = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round3(x2 * dpr) / dpr || 0,
      y: round3(y2 * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper3 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x: x2,
      y: y2
    }) : {
      x: x2,
      y: y2
    };
    x2 = _ref3.x;
    y2 = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left2;
    var sideY = top2;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent2(popper3);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow2(popper3)) {
        offsetParent = getDocumentElement2(popper3);
        if (getComputedStyle2(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top2 || (placement === left2 || placement === right2) && variation === end) {
        sideY = bottom2;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
        y2 -= offsetY - popperRect.height;
        y2 *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left2 || (placement === top2 || placement === bottom2) && variation === end) {
        sideX = right2;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
        x2 -= offsetX - popperRect.width;
        x2 *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x2,
      y: y2
    }, getWindow2(popper3)) : {
      x: x2,
      y: y2
    };
    x2 = _ref4.x;
    y2 = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement2(state.placement),
      variation: getVariation2(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  const computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow2(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  const eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement2(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash3 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement2(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash3[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll2(node) {
    var win = getWindow2(node);
    var scrollLeft3 = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft3,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX2(element) {
    return getBoundingClientRect(getDocumentElement2(element)).left + getWindowScroll2(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect2(element, strategy) {
    var win = getWindow2(element);
    var html2 = getDocumentElement2(element);
    var visualViewport = win.visualViewport;
    var width2 = html2.clientWidth;
    var height2 = html2.clientHeight;
    var x2 = 0;
    var y2 = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      var layoutViewport = isLayoutViewport2();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x: x2 + getWindowScrollBarX2(element),
      y: y2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect2(element) {
    var _element$ownerDocumen;
    var html2 = getDocumentElement2(element);
    var winScroll = getWindowScroll2(element);
    var body2 = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width2 = max(html2.scrollWidth, html2.clientWidth, body2 ? body2.scrollWidth : 0, body2 ? body2.clientWidth : 0);
    var height2 = max(html2.scrollHeight, html2.clientHeight, body2 ? body2.scrollHeight : 0, body2 ? body2.clientHeight : 0);
    var x2 = -winScroll.scrollLeft + getWindowScrollBarX2(element);
    var y2 = -winScroll.scrollTop;
    if (getComputedStyle2(body2 || html2).direction === "rtl") {
      x2 += max(html2.clientWidth, body2 ? body2.clientWidth : 0) - width2;
    }
    return {
      width: width2,
      height: height2,
      x: x2,
      y: y2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent2(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow2 = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow2 + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName2(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement2(node) && isScrollParent2(node)) {
      return node;
    }
    return getScrollParent(getParentNode2(node));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents2(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow2(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent2(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents2(getParentNode2(target)));
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect2(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect2(getViewportRect2(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect2(getDocumentRect2(getDocumentElement2(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents2(getParentNode2(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement2(element) ? getOffsetParent2(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName2(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets2(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement2(placement) : null;
    var variation = placement ? getVariation2(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top2:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom2:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right2:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left2:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement2(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow2(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject2(typeof padding2 !== "number" ? padding2 : expandToHashMap2(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement2(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets5 = computeOffsets2({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect2(Object.assign({}, popperRect, popperOffsets5));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset4 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right2, bottom2].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top2, bottom2].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset4[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement2(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation2(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation2(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow2(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement2(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a2, b2) {
      return overflows[a2] - overflows[b2];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement2(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement2(placement);
    return [getOppositeVariationPlacement2(placement), oppositePlacement, getOppositeVariationPlacement2(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement2(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement2(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement2(placement2) === auto ? computeAutoPlacement2(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i2 = 0; i2 < placements2.length; i2++) {
      var placement = placements2[i2];
      var _basePlacement = getBasePlacement2(placement);
      var isStartVariation = getVariation2(placement) === start;
      var isVertical = [top2, bottom2].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow2 = detectOverflow2(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right2 : left2 : isStartVariation ? bottom2 : top2;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement2(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement2(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow2[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow2[mainVariationSide] <= 0, overflow2[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  const flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow2, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow2.top - rect.height - preventedOffsets.y,
      right: overflow2.right - rect.width + preventedOffsets.x,
      bottom: overflow2.bottom - rect.height + preventedOffsets.y,
      left: overflow2.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow2) {
    return [top2, right2, bottom2, left2].some(function(side) {
      return overflow2[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow2(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow2(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  const hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset4) {
    var basePlacement = getBasePlacement2(placement);
    var invertDistance = [left2, top2].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset4 === "function" ? offset4(Object.assign({}, rects, {
      placement
    })) : offset4, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left2, right2].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset2(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset4 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset4);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x2;
      state.modifiersData.popperOffsets.y += y2;
    }
    state.modifiersData[name] = data;
  }
  const offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset2
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets2(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets2({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  const popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets2,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis2(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow2(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow2 = detectOverflow2(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement2(state.placement);
    var variation = getVariation2(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement2(basePlacement);
    var altAxis = getAltAxis2(mainAxis);
    var popperOffsets5 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets5) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top2 : left2;
      var altSide = mainAxis === "y" ? bottom2 : right2;
      var len = mainAxis === "y" ? "height" : "width";
      var offset4 = popperOffsets5[mainAxis];
      var min2 = offset4 + overflow2[mainSide];
      var max2 = offset4 - overflow2[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect2(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject2();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within2(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent2(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset4 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset4 + maxOffset - offsetModifierValue;
      var preventedOffset = within2(tether ? min(min2, tetherMin) : min2, offset4, tether ? max(max2, tetherMax) : max2);
      popperOffsets5[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset4;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top2 : left2;
      var _altSide = mainAxis === "x" ? bottom2 : right2;
      var _offset = popperOffsets5[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow2[_mainSide];
      var _max = _offset - overflow2[_altSide];
      var isOriginSide = [top2, left2].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within2(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets5[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  const preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow2,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll2(node) {
    if (node === getWindow2(node) || !isHTMLElement2(node)) {
      return getWindowScroll2(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round3(rect.width) / element.offsetWidth || 1;
    var scaleY = round3(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect2(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement2(offsetParent);
    var offsetParentIsScaled = isHTMLElement2(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement2(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName2(offsetParent) !== "body" || isScrollParent2(documentElement)) {
        scroll = getNodeScroll2(offsetParent);
      }
      if (isHTMLElement2(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX2(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order2(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers2(modifiers) {
    var orderedModifiers = order2(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce9(fn) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p2, c2) {
      return p2.replace(/%s/, c2);
    }, str);
  }

  // node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers2(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s2) {
              return '"' + s2 + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  // node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy2(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function(item) {
      var identifier9 = fn(item);
      if (!identifiers.has(identifier9)) {
        identifiers.add(identifier9);
        return true;
      }
    });
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName2(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper7(reference2, popper3, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper3
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents2(reference2) : reference2.contextElement ? listScrollParents2(reference2.contextElement) : [],
            popper: listScrollParents2(popper3)
          };
          var orderedModifiers = orderModifiers2(mergeByName2([].concat(defaultModifiers3, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m2) {
            return m2.enabled;
          });
          if (true) {
            var modifiers = uniqueBy2([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers2(modifiers);
            if (getBasePlacement2(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle2(popper3), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin2) {
              return parseFloat(margin2);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper4 = _state$elements.popper;
          if (!areValidElements(reference3, popper4)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect2(reference3, getOffsetParent2(popper4), state.options.strategy === "fixed"),
            popper: getLayoutRect2(popper4)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn === "function") {
              state = fn({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        update: debounce9(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper3)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn) {
          return fn();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper2 = popperGenerator();

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = popperGenerator({
    defaultModifiers: defaultModifiers2
  });

  // node_modules/@mui/base/Portal/Portal.js
  const React19 = __toModule(require_react());
  const ReactDOM = __toModule(require_react_dom());
  const prop_types14 = __toModule(require_prop_types());
  const jsx_runtime19 = __toModule(require_jsx_runtime());
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  const Portal3 = React19.forwardRef(function Portal8(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React19.useState(null);
    const handleRef = useForkRef(React19.isValidElement(children) ? children.ref : null, forwardedRef);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer2(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(forwardedRef, mountNode);
        return () => {
          setRef(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (React19.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return React19.cloneElement(children, newProps);
      }
      return jsx_runtime19.jsx(React19.Fragment, {
        children
      });
    }
    return jsx_runtime19.jsx(React19.Fragment, {
      children: mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode
    });
  });
  Portal3.propTypes = {
    children: prop_types14.default.node,
    container: prop_types14.default.oneOfType([HTMLElementType, prop_types14.default.func]),
    disablePortal: prop_types14.default.bool
  };
  if (true) {
    Portal3["propTypes"] = exactProp(Portal3.propTypes);
  }
  const Portal_default = Portal3;

  // node_modules/@mui/base/Popper/popperClasses.js
  function getPopperUtilityClass(slot) {
    return generateUtilityClass2("MuiPopper", slot);
  }
  const popperClasses3 = generateUtilityClasses2("MuiPopper", ["root"]);

  // node_modules/@mui/base/Popper/Popper.js
  const React18 = __toModule(require_react());
  const prop_types13 = __toModule(require_prop_types());
  const jsx_runtime18 = __toModule(require_jsx_runtime());
  const _excluded10 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
  const _excluded22 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement(element);
  }
  const useUtilityClasses10 = () => {
    const slots = {
      root: ["root"]
    };
    return composeClasses2(slots, useClassNamesOverride(getPopperUtilityClass));
  };
  const defaultPopperOptions = {};
  const PopperTooltip = React18.forwardRef(function PopperTooltip2(props, forwardedRef) {
    var _slots$root;
    const {
      anchorEl,
      children,
      direction,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
    const tooltipRef = React18.useRef(null);
    const ownRef = useForkRef(tooltipRef, forwardedRef);
    const popperRef = React18.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React18.useRef(handlePopperRef);
    useEnhancedEffect_default(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React18.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React18.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React18.useState(resolveAnchorEl(anchorEl));
    React18.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React18.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl(anchorEl));
      }
    }, [anchorEl]);
    useEnhancedEffect_default(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (true) {
        if (resolvedAnchorElement && isHTMLElement(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper3 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper3);
      return () => {
        popper3.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes = useUtilityClasses10();
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: props,
      className: classes.root
    });
    return jsx_runtime18.jsx(Root, _extends({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  const Popper2 = React18.forwardRef(function Popper15(props, forwardedRef) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style16,
      transition = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);
    const [exited, setExited] = React18.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
    }
    const display3 = !open && keepMounted && (!transition || exited) ? "none" : void 0;
    const transitionProps = transition ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return jsx_runtime18.jsx(Portal_default, {
      disablePortal,
      container,
      children: jsx_runtime18.jsx(PopperTooltip, _extends({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref: forwardedRef,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends({
          position: "fixed",
          top: 0,
          left: 0,
          display: display3
        }, style16),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  Popper2.propTypes = {
    anchorEl: chainPropTypes(prop_types13.default.oneOfType([HTMLElementType, prop_types13.default.object, prop_types13.default.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    children: prop_types13.default.oneOfType([prop_types13.default.node, prop_types13.default.func]),
    container: prop_types13.default.oneOfType([HTMLElementType, prop_types13.default.func]),
    direction: prop_types13.default.oneOf(["ltr", "rtl"]),
    disablePortal: prop_types13.default.bool,
    keepMounted: prop_types13.default.bool,
    modifiers: prop_types13.default.arrayOf(prop_types13.default.shape({
      data: prop_types13.default.object,
      effect: prop_types13.default.func,
      enabled: prop_types13.default.bool,
      fn: prop_types13.default.func,
      name: prop_types13.default.any,
      options: prop_types13.default.object,
      phase: prop_types13.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: prop_types13.default.arrayOf(prop_types13.default.string),
      requiresIfExists: prop_types13.default.arrayOf(prop_types13.default.string)
    })),
    open: prop_types13.default.bool.isRequired,
    placement: prop_types13.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    popperOptions: prop_types13.default.shape({
      modifiers: prop_types13.default.array,
      onFirstUpdate: prop_types13.default.func,
      placement: prop_types13.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: prop_types13.default.oneOf(["absolute", "fixed"])
    }),
    popperRef: refType_default,
    slotProps: prop_types13.default.shape({
      root: prop_types13.default.oneOfType([prop_types13.default.func, prop_types13.default.object])
    }),
    slots: prop_types13.default.shape({
      root: prop_types13.default.elementType
    }),
    transition: prop_types13.default.bool
  };
  const Popper_default = Popper2;

  // node_modules/@mui/base/Modal/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  class ModalManager2 {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  }

  // node_modules/@mui/base/Modal/modalClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass2("MuiModal", slot);
  }
  const modalClasses3 = generateUtilityClasses2("MuiModal", ["root", "hidden", "backdrop"]);
  const modalClasses_default = modalClasses3;

  // node_modules/@mui/base/Modal/Modal.js
  const React14 = __toModule(require_react());
  const prop_types9 = __toModule(require_prop_types());
  const jsx_runtime12 = __toModule(require_jsx_runtime());
  const jsx_runtime13 = __toModule(require_jsx_runtime());
  const _excluded7 = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
  const useUtilityClasses7 = (ownerState) => {
    const {
      open,
      exited
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses2(slots, useClassNamesOverride(getModalUtilityClass));
  };
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  const defaultManager = new ModalManager2();
  const Modal = React14.forwardRef(function Modal12(props, forwardedRef) {
    var _props$ariaHidden, _slots$root;
    const {
      children,
      closeAfterTransition = false,
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      manager: managerProp = defaultManager,
      onBackdropClick,
      onClose,
      onKeyDown,
      open,
      onTransitionEnter,
      onTransitionExited,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
    const manager = managerProp;
    const [exited, setExited] = React14.useState(!open);
    const modal = React14.useRef({});
    const mountNodeRef = React14.useRef(null);
    const modalRef = React14.useRef(null);
    const handleRef = useForkRef(modalRef, forwardedRef);
    const hasTransition = getHasTransition(children);
    const ariaHiddenProp = (_props$ariaHidden = props["aria-hidden"]) != null ? _props$ariaHidden : true;
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback(() => {
      const resolvedContainer = getContainer(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React14.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback((node) => {
      mountNodeRef.current = node;
      if (!node || !modalRef.current) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React14.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [manager, ariaHiddenProp]);
    React14.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React14.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const ownerState = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      exited,
      hideBackdrop,
      keepMounted
    });
    const classes = useUtilityClasses7(ownerState);
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    const handleBackdropClick = (event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const handleKeyDown3 = (event) => {
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: handleRef,
        role: "presentation",
        onKeyDown: handleKeyDown3
      },
      className: classes.root,
      ownerState
    });
    const BackdropComponent = slots.backdrop;
    const backdropProps = useSlotProps({
      elementType: BackdropComponent,
      externalSlotProps: slotProps.backdrop,
      additionalProps: {
        "aria-hidden": true,
        onClick: handleBackdropClick,
        open
      },
      className: classes.backdrop,
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return jsx_runtime12.jsx(Portal_default, {
      ref: handlePortalRef,
      container,
      disablePortal,
      children: jsx_runtime13.jsxs(Root, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? jsx_runtime12.jsx(BackdropComponent, _extends({}, backdropProps)) : null, jsx_runtime12.jsx(FocusTrap_default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: React14.cloneElement(children, childProps)
        })]
      }))
    });
  });
  Modal.propTypes = {
    children: elementAcceptingRef_default.isRequired,
    closeAfterTransition: prop_types9.default.bool,
    container: prop_types9.default.oneOfType([HTMLElementType, prop_types9.default.func]),
    disableAutoFocus: prop_types9.default.bool,
    disableEnforceFocus: prop_types9.default.bool,
    disableEscapeKeyDown: prop_types9.default.bool,
    disablePortal: prop_types9.default.bool,
    disableRestoreFocus: prop_types9.default.bool,
    disableScrollLock: prop_types9.default.bool,
    hideBackdrop: prop_types9.default.bool,
    keepMounted: prop_types9.default.bool,
    onBackdropClick: prop_types9.default.func,
    onClose: prop_types9.default.func,
    open: prop_types9.default.bool.isRequired,
    slotProps: prop_types9.default.shape({
      backdrop: prop_types9.default.oneOfType([prop_types9.default.func, prop_types9.default.object]),
      root: prop_types9.default.oneOfType([prop_types9.default.func, prop_types9.default.object])
    }),
    slots: prop_types9.default.shape({
      backdrop: prop_types9.default.elementType,
      root: prop_types9.default.elementType
    })
  };
  const Modal_default2 = Modal;

  // node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
  const React31 = __toModule(require_react());
  const prop_types24 = __toModule(require_prop_types());
  const ReactDOM2 = __toModule(require_react_dom());
  const jsx_runtime35 = __toModule(require_jsx_runtime());
  const jsx_runtime36 = __toModule(require_jsx_runtime());
  const _excluded21 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue(value) {
    return parseInt(value, 10) || 0;
  }
  const styles = {
    shadow: {
      visibility: "hidden",
      position: "absolute",
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      transform: "translateZ(0)"
    }
  };
  function isEmpty(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
  }
  const TextareaAutosize = React31.forwardRef(function TextareaAutosize6(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style16,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
    const {
      current: isControlled
    } = React31.useRef(value != null);
    const inputRef = React31.useRef(null);
    const handleRef = useForkRef(forwardedRef, inputRef);
    const shadowRef = React31.useRef(null);
    const renders = React31.useRef(0);
    const [state, setState] = React31.useState({
      outerHeightStyle: 0
    });
    const getUpdatedState = React31.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0
        };
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle.boxSizing;
      const padding2 = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
      const border2 = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflow: overflow2
      };
    }, [maxRows, minRows, props.placeholder]);
    const updateState = (prevState, newState) => {
      const {
        outerHeightStyle,
        overflow: overflow2
      } = newState;
      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
        renders.current += 1;
        return {
          overflow: overflow2,
          outerHeightStyle
        };
      }
      if (true) {
        if (renders.current === 20) {
          console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
        }
      }
      return prevState;
    };
    const syncHeight = React31.useCallback(() => {
      const newState = getUpdatedState();
      if (isEmpty(newState)) {
        return;
      }
      setState((prevState) => {
        return updateState(prevState, newState);
      });
    }, [getUpdatedState]);
    const syncHeightWithFlushSync = () => {
      const newState = getUpdatedState();
      if (isEmpty(newState)) {
        return;
      }
      ReactDOM2.flushSync(() => {
        setState((prevState) => {
          return updateState(prevState, newState);
        });
      });
    };
    React31.useEffect(() => {
      const handleResize = debounce(() => {
        renders.current = 0;
        if (inputRef.current) {
          syncHeightWithFlushSync();
        }
      });
      let resizeObserver;
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      containerWindow.addEventListener("resize", handleResize);
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        resizeObserver.observe(input);
      }
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    });
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    React31.useEffect(() => {
      renders.current = 0;
    }, [value]);
    const handleChange = (event) => {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return jsx_runtime36.jsxs(React31.Fragment, {
      children: [jsx_runtime35.jsx("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: _extends({
          height: state.outerHeightStyle,
          overflow: state.overflow ? "hidden" : void 0
        }, style16)
      }, other)), jsx_runtime35.jsx("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style16, {
          padding: 0
        })
      })]
    });
  });
  TextareaAutosize.propTypes = {
    className: prop_types24.default.string,
    maxRows: prop_types24.default.oneOfType([prop_types24.default.number, prop_types24.default.string]),
    minRows: prop_types24.default.oneOfType([prop_types24.default.number, prop_types24.default.string]),
    onChange: prop_types24.default.func,
    placeholder: prop_types24.default.string,
    style: prop_types24.default.object,
    value: prop_types24.default.oneOfType([prop_types24.default.arrayOf(prop_types24.default.string), prop_types24.default.number, prop_types24.default.string])
  };
  const TextareaAutosize_default = TextareaAutosize;

  // node_modules/@mui/base/useAutocomplete/useAutocomplete.js
  const React32 = __toModule(require_react());
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config3 = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify,
      trim = false
    } = config3;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i2 = 0; i2 < array.length; i2 += 1) {
      if (comp(array[i2])) {
        return i2;
      }
    }
    return -1;
  }
  const defaultFilterOptions = createFilterOptions();
  const pageSize = 5;
  const defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  function useAutocomplete2(props) {
    const {
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (true) {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React32.useRef(false);
    const firstFocus = React32.useRef(true);
    const inputRef = React32.useRef(null);
    const listboxRef = React32.useRef(null);
    const [anchorEl, setAnchorEl] = React32.useState(null);
    const [focusedTag, setFocusedTag] = React32.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React32.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React32.useState(false);
    const resetInputValue = React32.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React32.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(options.filter((option) => {
      if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
        return false;
      }
      return true;
    }), {
      inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
      getOptionLabel
    }) : [];
    const previousProps = usePreviousProps_default({
      filteredOptions,
      value
    });
    React32.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (true) {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = useEventCallback((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React32.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index, direction) {
      if (!listboxRef.current || index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const setHighlightedIndex = useEventCallback(({
      event,
      index,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index;
      if (index === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev) {
        prev.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      if (!listboxNode) {
        return;
      }
      if (index === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const checkHighlightedOptionExists = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i2) => getOptionLabel(value[i2]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          const previousHighlightedOptionExists = filteredOptions.some((option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
          if (previousHighlightedOptionExists) {
            return true;
          }
        }
      }
      return false;
    };
    const syncHighlightedIndex = React32.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      if (checkHighlightedOptionExists()) {
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      filteredOptions.length,
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = useEventCallback((node) => {
      setRef(listboxRef, node);
      if (!node) {
        return;
      }
      syncHighlightedIndex();
    });
    if (true) {
      React32.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React32.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i2) => val === newValue[i2])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React32.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (true) {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index, direction) {
      if (index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown3 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index = focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur2 = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseMove = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      if (highlightedIndexRef.current !== index) {
        setHighlightedIndex({
          event,
          index,
          reason: "mouse"
        });
      }
    };
    const handleOptionTouchStart = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "touch"
      });
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index) => (event) => {
      const newValue = value.slice();
      newValue.splice(index, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = () => {
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (inputValue === "" || !open) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (true) {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index,
            index,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur2();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown3(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur2,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index
      }) => _extends({
        key: index,
        "data-tag-index": index,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index,
        option
      }) => {
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index}`,
          onMouseMove: handleOptionMouseMove,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      expanded: popupOpen && anchorEl,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass2("MuiSvgIcon", slot);
  }
  const svgIconClasses3 = generateUtilityClasses2("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  const React183 = __toModule(require_react());
  const prop_types138 = __toModule(require_prop_types2());
  const jsx_runtime188 = __toModule(require_jsx_runtime());
  const jsx_runtime189 = __toModule(require_jsx_runtime());
  const _excluded128 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  const useUtilityClasses112 = (ownerState) => {
    const {
      color: color2,
      fontSize: fontSize2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize2)}`]
    };
    return composeClasses2(slots, getSvgIconUtilityClass, classes);
  };
  const SvgIconRoot = styled_default("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.color !== "inherit" && styles30[`color${capitalize_default(ownerState.color)}`], styles30[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      fill: "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
        disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  const SvgIcon2 = React183.forwardRef(function SvgIcon6(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className: className3,
      color: color2 = "inherit",
      component = "svg",
      fontSize: fontSize2 = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded128);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      fontSize: fontSize2,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses112(ownerState);
    return jsx_runtime189.jsxs(SvgIconRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className3),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, {
      ownerState,
      children: [children, titleAccess ? jsx_runtime188.jsx("title", {
        children: titleAccess
      }) : null]
    }));
  });
  SvgIcon2.propTypes = {
    children: prop_types138.default.node,
    classes: prop_types138.default.object,
    className: prop_types138.default.string,
    color: prop_types138.default.oneOfType([prop_types138.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), prop_types138.default.string]),
    component: prop_types138.default.elementType,
    fontSize: prop_types138.default.oneOfType([prop_types138.default.oneOf(["inherit", "large", "medium", "small"]), prop_types138.default.string]),
    htmlColor: prop_types138.default.string,
    inheritViewBox: prop_types138.default.bool,
    shapeRendering: prop_types138.default.string,
    sx: prop_types138.default.oneOfType([prop_types138.default.arrayOf(prop_types138.default.oneOfType([prop_types138.default.func, prop_types138.default.object, prop_types138.default.bool])), prop_types138.default.func, prop_types138.default.object]),
    titleAccess: prop_types138.default.string,
    viewBox: prop_types138.default.string
  };
  SvgIcon2.muiName = "SvgIcon";
  const SvgIcon_default = SvgIcon2;

  // node_modules/@mui/material/utils/createSvgIcon.js
  const React241 = __toModule(require_react());
  const jsx_runtime251 = __toModule(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component(props, ref) {
      return jsx_runtime251.jsx(SvgIcon_default, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (true) {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon_default.muiName;
    return React241.memo(React241.forwardRef(Component));
  }

  // node_modules/@mui/material/utils/debounce.js
  const debounce_default = debounce;

  // node_modules/@mui/material/utils/isMuiElement.js
  const isMuiElement_default = isMuiElement7;

  // node_modules/@mui/material/utils/ownerDocument.js
  const ownerDocument_default = ownerDocument;

  // node_modules/@mui/material/utils/ownerWindow.js
  const ownerWindow_default = ownerWindow;

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  const useEnhancedEffect_default2 = useEnhancedEffect_default;

  // node_modules/@mui/material/utils/useId.js
  const useId_default = useId;

  // node_modules/@mui/material/utils/unsupportedProp.js
  const unsupportedProp_default = unsupportedProp5;

  // node_modules/@mui/material/utils/useControlled.js
  const useControlled_default = useControlled;

  // node_modules/@mui/material/utils/useEventCallback.js
  const useEventCallback_default = useEventCallback;

  // node_modules/@mui/material/utils/useForkRef.js
  const useForkRef_default = useForkRef;

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  const useIsFocusVisible_default = useIsFocusVisible;

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf(o2, p2);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-transition-group/esm/config.js
  const config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  const prop_types245 = __toModule(require_prop_types8());
  var timeoutsShape = prop_types245.default.oneOfType([prop_types245.default.number, prop_types245.default.shape({
    enter: prop_types245.default.number,
    exit: prop_types245.default.number,
    appear: prop_types245.default.number
  }).isRequired]);
  var classNamesShape = prop_types245.default.oneOfType([prop_types245.default.string, prop_types245.default.shape({
    enter: prop_types245.default.string,
    exit: prop_types245.default.string,
    active: prop_types245.default.string
  }), prop_types245.default.shape({
    enter: prop_types245.default.string,
    enterDone: prop_types245.default.string,
    enterActive: prop_types245.default.string,
    exit: prop_types245.default.string,
    exitDone: prop_types245.default.string,
    exitActive: prop_types245.default.string
  })]);

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  const react22 = __toModule(require_react());
  const TransitionGroupContext_default = react22.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node) {
    return node.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  const prop_types243 = __toModule(require_prop_types8());
  const react20 = __toModule(require_react());
  const react_dom2 = __toModule(require_react_dom());
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition3 = function(_React$Component) {
    _inheritsLoose(Transition5, _React$Component);
    function Transition5(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition5.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition5.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout;
      if (timeout != null && typeof timeout !== "number") {
        exit = timeout.exit;
        enter = timeout.enter;
        appear = timeout.appear !== void 0 ? timeout.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom2.default.findDOMNode(this);
            if (node)
              forceReflow(node);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [react_dom2.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : react_dom2.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom2.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return react20.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : react20.default.cloneElement(react20.default.Children.only(children), childProps));
    };
    return Transition5;
  }(react20.default.Component);
  Transition3.contextType = TransitionGroupContext_default;
  Transition3.propTypes = {
    nodeRef: prop_types243.default.shape({
      current: typeof Element === "undefined" ? prop_types243.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return prop_types243.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    children: prop_types243.default.oneOfType([prop_types243.default.func.isRequired, prop_types243.default.element.isRequired]).isRequired,
    in: prop_types243.default.bool,
    mountOnEnter: prop_types243.default.bool,
    unmountOnExit: prop_types243.default.bool,
    appear: prop_types243.default.bool,
    enter: prop_types243.default.bool,
    exit: prop_types243.default.bool,
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    addEndListener: prop_types243.default.func,
    onEnter: prop_types243.default.func,
    onEntering: prop_types243.default.func,
    onEntered: prop_types243.default.func,
    onExit: prop_types243.default.func,
    onExiting: prop_types243.default.func,
    onExited: prop_types243.default.func
  };
  function noop2() {
  }
  Transition3.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop2,
    onEntering: noop2,
    onEntered: noop2,
    onExit: noop2,
    onExiting: noop2,
    onExited: noop2
  };
  Transition3.UNMOUNTED = UNMOUNTED;
  Transition3.EXITED = EXITED;
  Transition3.ENTERING = ENTERING;
  Transition3.ENTERED = ENTERED;
  Transition3.EXITING = EXITING;
  const Transition_default = Transition3;

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  const react23 = __toModule(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && react23.isValidElement(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children)
      react23.Children.map(children, function(c2) {
        return c2;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    }
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i2;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i2 = 0; i2 < nextKeysPending[nextKey].length; i2++) {
          var pendingNextKey = nextKeysPending[nextKey][i2];
          childMapping[nextKeysPending[nextKey][i2]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i2 = 0; i2 < pendingKeys.length; i2++) {
      childMapping[pendingKeys[i2]] = getValueForKey(pendingKeys[i2]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return react23.cloneElement(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!react23.isValidElement(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = react23.isValidElement(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = react23.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = react23.cloneElement(child, {
          in: false
        });
      } else if (hasNext && hasPrev && react23.isValidElement(prevChild)) {
        children[key] = react23.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  const prop_types244 = __toModule(require_prop_types8());
  const react21 = __toModule(require_react());
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k2) {
      return obj[k2];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup2 = function(_React$Component) {
    _inheritsLoose(TransitionGroup4, _React$Component);
    function TransitionGroup4(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup4.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup4.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return react21.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return react21.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, react21.default.createElement(Component, props, children));
    };
    return TransitionGroup4;
  }(react21.default.Component);
  TransitionGroup2.propTypes = {
    component: prop_types244.default.any,
    children: prop_types244.default.node,
    appear: prop_types244.default.bool,
    enter: prop_types244.default.bool,
    exit: prop_types244.default.bool,
    childFactory: prop_types244.default.func
  };
  TransitionGroup2.defaultProps = defaultProps;
  const TransitionGroup_default = TransitionGroup2;

  // node_modules/@mui/material/transitions/utils.js
  const reflow = (node) => node.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout,
      easing: easing2,
      style: style16 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style16.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
      easing: (_style$transitionTimi = style16.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style16.transitionDelay
    };
  }

  // node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass2("MuiPaper", slot);
  }
  const paperClasses3 = generateUtilityClasses2("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/Paper/Paper.js
  const React153 = __toModule(require_react());
  const prop_types111 = __toModule(require_prop_types2());
  const jsx_runtime150 = __toModule(require_jsx_runtime());
  const _excluded104 = ["className", "component", "elevation", "square", "variant"];
  const useUtilityClasses91 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses2(slots, getPaperUtilityClass, classes);
  };
  const PaperRoot = styled_default("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, styles30[ownerState.variant], !ownerState.square && styles30.rounded, ownerState.variant === "elevation" && styles30[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha_default(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  const Paper10 = React153.forwardRef(function Paper17(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className: className3,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses91(ownerState);
    if (true) {
      const theme = useTheme3();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return jsx_runtime150.jsx(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className3),
      ref
    }, other));
  });
  Paper10.propTypes = {
    children: prop_types111.default.node,
    classes: prop_types111.default.object,
    className: prop_types111.default.string,
    component: prop_types111.default.elementType,
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    square: prop_types111.default.bool,
    sx: prop_types111.default.oneOfType([prop_types111.default.arrayOf(prop_types111.default.oneOfType([prop_types111.default.func, prop_types111.default.object, prop_types111.default.bool])), prop_types111.default.func, prop_types111.default.object]),
    variant: prop_types111.default.oneOfType([prop_types111.default.oneOf(["elevation", "outlined"]), prop_types111.default.string])
  };
  const Paper_default = Paper10;

  // node_modules/@mui/material/ButtonBase/Ripple.js
  const React80 = __toModule(require_react());
  const prop_types44 = __toModule(require_prop_types2());
  const jsx_runtime68 = __toModule(require_jsx_runtime());
  function Ripple(props) {
    const {
      className: className3,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout
    } = props;
    const [leaving, setLeaving] = React80.useState(false);
    const rippleClassName = clsx_m_default(className3, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_m_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React80.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout]);
    return jsx_runtime68.jsx("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: jsx_runtime68.jsx("span", {
        className: childClassName
      })
    });
  }
  Ripple.propTypes = {
    classes: prop_types44.default.object.isRequired,
    className: prop_types44.default.string,
    in: prop_types44.default.bool,
    onExited: prop_types44.default.func,
    pulsate: prop_types44.default.bool,
    rippleSize: prop_types44.default.number,
    rippleX: prop_types44.default.number,
    rippleY: prop_types44.default.number,
    timeout: prop_types44.default.number.isRequired
  };
  const Ripple_default = Ripple;

  // node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  const touchRippleClasses3 = generateUtilityClasses2("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  const touchRippleClasses_default = touchRippleClasses3;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  const React81 = __toModule(require_react());
  const prop_types45 = __toModule(require_prop_types2());
  const jsx_runtime69 = __toModule(require_jsx_runtime());
  const _excluded42 = ["center", "classes", "className"];
  let _ = (t2) => t2;
  let _t;
  let _t2;
  let _t3;
  let _t4;
  const DURATION = 550;
  const DELAY_RIPPLE = 80;
  const enterKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  const exitKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  const pulsateKeyframe = keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  const TouchRippleRoot = styled_default("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  const TouchRippleRipple = styled_default(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  const TouchRipple2 = React81.forwardRef(function TouchRipple3(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
    const [ripples, setRipples] = React81.useState([]);
    const nextKey = React81.useRef(0);
    const rippleCallback = React81.useRef(null);
    React81.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React81.useRef(false);
    const startTimer = React81.useRef(null);
    const startTimerCommit = React81.useRef(null);
    const container = React81.useRef(null);
    React81.useEffect(() => {
      return () => {
        clearTimeout(startTimer.current);
      };
    }, []);
    const startCommit = React81.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, jsx_runtime69.jsx(TouchRippleRipple, {
        classes: {
          ripple: clsx_m_default(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_m_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_m_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_m_default(classes.child, touchRippleClasses_default.child),
          childLeaving: clsx_m_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_m_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React81.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React81.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React81.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React81.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return jsx_runtime69.jsx(TouchRippleRoot, _extends({
      className: clsx_m_default(touchRippleClasses_default.root, classes.root, className3),
      ref: container
    }, other, {
      children: jsx_runtime69.jsx(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  TouchRipple2.propTypes = {
    center: prop_types45.default.bool,
    classes: prop_types45.default.object,
    className: prop_types45.default.string
  };
  const TouchRipple_default = TouchRipple2;

  // node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass2("MuiButtonBase", slot);
  }
  const buttonBaseClasses2 = generateUtilityClasses2("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  const buttonBaseClasses_default = buttonBaseClasses2;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  const React79 = __toModule(require_react());
  const prop_types43 = __toModule(require_prop_types2());
  const jsx_runtime66 = __toModule(require_jsx_runtime());
  const jsx_runtime67 = __toModule(require_jsx_runtime());
  const _excluded41 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  const useUtilityClasses36 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses2(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  const ButtonBaseRoot = styled_default("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    outline: 0,
    border: 0,
    margin: 0,
    borderRadius: 0,
    padding: 0,
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    WebkitAppearance: "none",
    textDecoration: "none",
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  const ButtonBase5 = React79.forwardRef(function ButtonBase22(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className: className3,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
    const buttonRef = React79.useRef(null);
    const rippleRef = React79.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React79.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React79.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React79.useState(false);
    React79.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React79.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur2 = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React79.useRef(false);
    const handleKeyDown3 = useEventCallback_default((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, focusVisibleRef, buttonRef);
    if (true) {
      React79.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses36(ownerState);
    return jsx_runtime67.jsxs(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx_m_default(classes.root, className3),
      ownerState,
      onBlur: handleBlur2,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown3,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? jsx_runtime66.jsx(TouchRipple_default, _extends({
        ref: handleRippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null]
    }));
  });
  ButtonBase5.propTypes = {
    action: refType_default,
    centerRipple: prop_types43.default.bool,
    children: prop_types43.default.node,
    classes: prop_types43.default.object,
    className: prop_types43.default.string,
    component: elementTypeAcceptingRef_default,
    disabled: prop_types43.default.bool,
    disableRipple: prop_types43.default.bool,
    disableTouchRipple: prop_types43.default.bool,
    focusRipple: prop_types43.default.bool,
    focusVisibleClassName: prop_types43.default.string,
    href: prop_types43.default.any,
    LinkComponent: prop_types43.default.elementType,
    onBlur: prop_types43.default.func,
    onClick: prop_types43.default.func,
    onContextMenu: prop_types43.default.func,
    onDragLeave: prop_types43.default.func,
    onFocus: prop_types43.default.func,
    onFocusVisible: prop_types43.default.func,
    onKeyDown: prop_types43.default.func,
    onKeyUp: prop_types43.default.func,
    onMouseDown: prop_types43.default.func,
    onMouseLeave: prop_types43.default.func,
    onMouseUp: prop_types43.default.func,
    onTouchEnd: prop_types43.default.func,
    onTouchMove: prop_types43.default.func,
    onTouchStart: prop_types43.default.func,
    sx: prop_types43.default.oneOfType([prop_types43.default.arrayOf(prop_types43.default.oneOfType([prop_types43.default.func, prop_types43.default.object, prop_types43.default.bool])), prop_types43.default.func, prop_types43.default.object]),
    tabIndex: prop_types43.default.number,
    TouchRippleProps: prop_types43.default.object,
    touchRippleRef: prop_types43.default.oneOfType([prop_types43.default.func, prop_types43.default.shape({
      current: prop_types43.default.shape({
        pulsate: prop_types43.default.func.isRequired,
        start: prop_types43.default.func.isRequired,
        stop: prop_types43.default.func.isRequired
      })
    })]),
    type: prop_types43.default.oneOfType([prop_types43.default.oneOf(["button", "reset", "submit"]), prop_types43.default.string])
  };
  const ButtonBase_default = ButtonBase5;

  // node_modules/@mui/material/IconButton/iconButtonClasses.js
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass2("MuiIconButton", slot);
  }
  const iconButtonClasses2 = generateUtilityClasses2("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  const iconButtonClasses_default = iconButtonClasses2;

  // node_modules/@mui/material/IconButton/IconButton.js
  const React122 = __toModule(require_react());
  const prop_types82 = __toModule(require_prop_types2());
  const jsx_runtime110 = __toModule(require_jsx_runtime());
  const _excluded75 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  const useUtilityClasses65 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize_default(color2)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses2(slots, getIconButtonUtilityClass, classes);
  };
  const IconButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.color !== "default" && styles30[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles30[`edge${capitalize_default(ownerState.edge)}`], styles30[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette5 = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette5 == null ? void 0 : palette5.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette5 && {
        backgroundColor: theme.vars ? `rgba(${palette5.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette5.main, theme.palette.action.hoverOpacity)
      }, {
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses_default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  const IconButton3 = React122.forwardRef(function IconButton9(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className: className3,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded75);
    const ownerState = _extends({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses65(ownerState);
    return jsx_runtime110.jsx(IconButtonRoot, _extends({
      className: clsx_m_default(classes.root, className3),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  IconButton3.propTypes = {
    children: chainPropTypes(prop_types82.default.node, (props) => {
      const found = React122.Children.toArray(props.children).some((child) => React122.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    classes: prop_types82.default.object,
    className: prop_types82.default.string,
    color: prop_types82.default.oneOfType([prop_types82.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), prop_types82.default.string]),
    disabled: prop_types82.default.bool,
    disableFocusRipple: prop_types82.default.bool,
    disableRipple: prop_types82.default.bool,
    edge: prop_types82.default.oneOf(["end", "start", false]),
    size: prop_types82.default.oneOfType([prop_types82.default.oneOf(["small", "medium", "large"]), prop_types82.default.string]),
    sx: prop_types82.default.oneOfType([prop_types82.default.arrayOf(prop_types82.default.oneOfType([prop_types82.default.func, prop_types82.default.object, prop_types82.default.bool])), prop_types82.default.func, prop_types82.default.object])
  };
  const IconButton_default = IconButton3;

  // node_modules/@mui/material/internal/svg-icons/Close.js
  const React218 = __toModule(require_react());
  const jsx_runtime231 = __toModule(require_jsx_runtime());
  const Close_default = createSvgIcon(jsx_runtime231.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/Typography/typographyClasses.js
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass2("MuiTypography", slot);
  }
  const typographyClasses3 = generateUtilityClasses2("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);

  // node_modules/@mui/material/Typography/Typography.js
  const React208 = __toModule(require_react());
  const prop_types161 = __toModule(require_prop_types2());
  const jsx_runtime220 = __toModule(require_jsx_runtime());
  const _excluded151 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  const useUtilityClasses131 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses2(slots, getTypographyUtilityClass, classes);
  };
  const TypographyRoot = styled_default("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.variant && styles30[ownerState.variant], ownerState.align !== "inherit" && styles30[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles30.noWrap, ownerState.gutterBottom && styles30.gutterBottom, ownerState.paragraph && styles30.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  const defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  const colorTransformations2 = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  const transformDeprecatedColors2 = (color2) => {
    return colorTransformations2[color2] || color2;
  };
  const Typography10 = React208.forwardRef(function Typography13(inProps, ref) {
    const themeProps = useThemeProps2({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors2(themeProps.color);
    const props = extendSxProp(_extends({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className: className3,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded151);
    const ownerState = _extends({}, props, {
      align,
      color: color2,
      className: className3,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses131(ownerState);
    return jsx_runtime220.jsx(TypographyRoot, _extends({
      as: Component,
      ref,
      ownerState,
      className: clsx_m_default(classes.root, className3)
    }, other));
  });
  Typography10.propTypes = {
    align: prop_types161.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    children: prop_types161.default.node,
    classes: prop_types161.default.object,
    className: prop_types161.default.string,
    component: prop_types161.default.elementType,
    gutterBottom: prop_types161.default.bool,
    noWrap: prop_types161.default.bool,
    paragraph: prop_types161.default.bool,
    sx: prop_types161.default.oneOfType([prop_types161.default.arrayOf(prop_types161.default.oneOfType([prop_types161.default.func, prop_types161.default.object, prop_types161.default.bool])), prop_types161.default.func, prop_types161.default.object]),
    variant: prop_types161.default.oneOfType([prop_types161.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), prop_types161.default.string]),
    variantMapping: prop_types161.default.object
  };
  const Typography_default = Typography10;

  // node_modules/@mui/material/Popper/Popper.js
  const prop_types113 = __toModule(require_prop_types2());
  const React155 = __toModule(require_react());
  const jsx_runtime152 = __toModule(require_jsx_runtime());
  const _excluded106 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
  const PopperRoot = styled_default(Popper_default, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })({});
  const Popper8 = React155.forwardRef(function Popper15(inProps, ref) {
    var _slots$root;
    const theme = useThemeWithoutDefault_default();
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopper"
    });
    const {
      anchorEl,
      component,
      components: components3,
      componentsProps,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
    const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components3 == null ? void 0 : components3.Root;
    const otherProps = _extends({
      anchorEl,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition
    }, other);
    return jsx_runtime152.jsx(PopperRoot, _extends({
      as: component,
      direction: theme == null ? void 0 : theme.direction,
      slots: {
        root: RootComponent
      },
      slotProps: slotProps != null ? slotProps : componentsProps
    }, otherProps, {
      ref
    }));
  });
  Popper8.propTypes = {
    anchorEl: prop_types113.default.oneOfType([HTMLElementType, prop_types113.default.object, prop_types113.default.func]),
    children: prop_types113.default.oneOfType([prop_types113.default.node, prop_types113.default.func]),
    component: prop_types113.default.elementType,
    components: prop_types113.default.shape({
      Root: prop_types113.default.elementType
    }),
    componentsProps: prop_types113.default.shape({
      root: prop_types113.default.oneOfType([prop_types113.default.func, prop_types113.default.object])
    }),
    container: prop_types113.default.oneOfType([HTMLElementType, prop_types113.default.func]),
    disablePortal: prop_types113.default.bool,
    keepMounted: prop_types113.default.bool,
    modifiers: prop_types113.default.arrayOf(prop_types113.default.shape({
      data: prop_types113.default.object,
      effect: prop_types113.default.func,
      enabled: prop_types113.default.bool,
      fn: prop_types113.default.func,
      name: prop_types113.default.any,
      options: prop_types113.default.object,
      phase: prop_types113.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: prop_types113.default.arrayOf(prop_types113.default.string),
      requiresIfExists: prop_types113.default.arrayOf(prop_types113.default.string)
    })),
    open: prop_types113.default.bool.isRequired,
    placement: prop_types113.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    popperOptions: prop_types113.default.shape({
      modifiers: prop_types113.default.array,
      onFirstUpdate: prop_types113.default.func,
      placement: prop_types113.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: prop_types113.default.oneOf(["absolute", "fixed"])
    }),
    popperRef: refType_default,
    slotProps: prop_types113.default.shape({
      root: prop_types113.default.oneOfType([prop_types113.default.func, prop_types113.default.object])
    }),
    slots: prop_types113.default.shape({
      root: prop_types113.default.elementType
    }),
    sx: prop_types113.default.oneOfType([prop_types113.default.arrayOf(prop_types113.default.oneOfType([prop_types113.default.func, prop_types113.default.object, prop_types113.default.bool])), prop_types113.default.func, prop_types113.default.object]),
    transition: prop_types113.default.bool
  };
  const Popper_default2 = Popper8;

  // node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
  function getListSubheaderUtilityClass(slot) {
    return generateUtilityClass2("MuiListSubheader", slot);
  }
  const listSubheaderClasses3 = generateUtilityClasses2("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  const React141 = __toModule(require_react());
  const prop_types99 = __toModule(require_prop_types2());
  const jsx_runtime134 = __toModule(require_jsx_runtime());
  const _excluded92 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
  const useUtilityClasses82 = (ownerState) => {
    const {
      classes,
      color: color2,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "default" && `color${capitalize_default(color2)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
    };
    return composeClasses2(slots, getListSubheaderUtilityClass, classes);
  };
  const ListSubheaderRoot = styled_default("li", {
    name: "MuiListSubheader",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.color !== "default" && styles30[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles30.gutters, ownerState.inset && styles30.inset, !ownerState.disableSticky && styles30.sticky];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    boxSizing: "border-box",
    lineHeight: "48px",
    listStyle: "none",
    color: (theme.vars || theme).palette.text.secondary,
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(14)
  }, ownerState.color === "primary" && {
    color: (theme.vars || theme).palette.primary.main
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: "sticky",
    top: 0,
    zIndex: 1,
    backgroundColor: (theme.vars || theme).palette.background.paper
  }));
  const ListSubheader2 = React141.forwardRef(function ListSubheader5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListSubheader"
    });
    const {
      className: className3,
      color: color2 = "default",
      component = "li",
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disableGutters,
      disableSticky,
      inset
    });
    const classes = useUtilityClasses82(ownerState);
    return jsx_runtime134.jsx(ListSubheaderRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className3),
      ref,
      ownerState
    }, other));
  });
  ListSubheader2.muiSkipListHighlight = true;
  ListSubheader2.propTypes = {
    children: prop_types99.default.node,
    classes: prop_types99.default.object,
    className: prop_types99.default.string,
    color: prop_types99.default.oneOf(["default", "inherit", "primary"]),
    component: prop_types99.default.elementType,
    disableGutters: prop_types99.default.bool,
    disableSticky: prop_types99.default.bool,
    inset: prop_types99.default.bool,
    sx: prop_types99.default.oneOfType([prop_types99.default.arrayOf(prop_types99.default.oneOfType([prop_types99.default.func, prop_types99.default.object, prop_types99.default.bool])), prop_types99.default.func, prop_types99.default.object])
  };
  const ListSubheader_default = ListSubheader2;

  // node_modules/@mui/material/internal/svg-icons/Cancel.js
  const React214 = __toModule(require_react());
  const jsx_runtime227 = __toModule(require_jsx_runtime());
  const Cancel_default = createSvgIcon(jsx_runtime227.jsx("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@mui/material/Chip/chipClasses.js
  function getChipUtilityClass(slot) {
    return generateUtilityClass2("MuiChip", slot);
  }
  const chipClasses2 = generateUtilityClasses2("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  const chipClasses_default = chipClasses2;

  // node_modules/@mui/material/Chip/Chip.js
  const React91 = __toModule(require_react());
  const prop_types54 = __toModule(require_prop_types2());
  const jsx_runtime80 = __toModule(require_jsx_runtime());
  const jsx_runtime81 = __toModule(require_jsx_runtime());
  const _excluded51 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
  const useUtilityClasses45 = (ownerState) => {
    const {
      classes,
      disabled,
      size,
      color: color2,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color2)}`, `${variant}${capitalize_default(color2)}`],
      label: ["label", `label${capitalize_default(size)}`],
      avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color2)}`],
      icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color2)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
    };
    return composeClasses2(slots, getChipUtilityClass, classes);
  };
  const ChipRoot = styled_default("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      const {
        color: color2,
        iconColor,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles30.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles30[`avatar${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles30[`avatarColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles30.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles30[`icon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles30[`iconColor${capitalize_default(iconColor)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles30.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles30[`deleteIcon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles30[`deleteIconColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles30[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
      }, styles30.root, styles30[`size${capitalize_default(size)}`], styles30[`color${capitalize_default(color2)}`], clickable && styles30.clickable, clickable && color2 !== "default" && styles30[`clickableColor${capitalize_default(color2)})`], onDelete && styles30.deletable, onDelete && color2 !== "default" && styles30[`deletableColor${capitalize_default(color2)}`], styles30[variant], styles30[`${variant}${capitalize_default(color2)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
    return _extends({
      maxWidth: "100%",
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme.vars || theme).palette.text.primary,
      backgroundColor: (theme.vars || theme).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme.transitions.create(["background-color", "box-shadow"]),
      cursor: "default",
      outline: 0,
      textDecoration: "none",
      border: 0,
      padding: 0,
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: (theme.vars || theme).palette.secondary.contrastText,
        backgroundColor: (theme.vars || theme).palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: _extends({
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.iconColor === ownerState.color && _extends({
        color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
      }, ownerState.color !== "default" && {
        color: "inherit"
      })),
      [`& .${chipClasses_default.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: "transparent",
        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      color: (theme.vars || theme).palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: (theme.vars || theme).shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`& .${chipClasses_default.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses_default.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }));
  const ChipLabel = styled_default("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles30.label, styles30[`label${capitalize_default(size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  const Chip2 = React91.forwardRef(function Chip7(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className: className3,
      clickable: clickableProp,
      color: color2 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
    const chipRef = React91.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown3 = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = _extends({}, props, {
      component,
      disabled,
      size,
      color: color2,
      iconColor: React91.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes = useUtilityClasses45(ownerState);
    const moreProps = component === ButtonBase_default ? _extends({
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && React91.isValidElement(deleteIconProp) ? React91.cloneElement(deleteIconProp, {
        className: clsx_m_default(deleteIconProp.props.className, classes.deleteIcon),
        onClick: handleDeleteIconClick
      }) : jsx_runtime80.jsx(Cancel_default, {
        className: clsx_m_default(classes.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && React91.isValidElement(avatarProp)) {
      avatar = React91.cloneElement(avatarProp, {
        className: clsx_m_default(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && React91.isValidElement(iconProp)) {
      icon = React91.cloneElement(iconProp, {
        className: clsx_m_default(classes.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return jsx_runtime81.jsxs(ChipRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className3),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown3,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, jsx_runtime80.jsx(ChipLabel, {
        className: clsx_m_default(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  Chip2.propTypes = {
    avatar: prop_types54.default.element,
    children: unsupportedProp_default,
    classes: prop_types54.default.object,
    className: prop_types54.default.string,
    clickable: prop_types54.default.bool,
    color: prop_types54.default.oneOfType([prop_types54.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), prop_types54.default.string]),
    component: prop_types54.default.elementType,
    deleteIcon: prop_types54.default.element,
    disabled: prop_types54.default.bool,
    icon: prop_types54.default.element,
    label: prop_types54.default.node,
    onClick: prop_types54.default.func,
    onDelete: prop_types54.default.func,
    onKeyDown: prop_types54.default.func,
    onKeyUp: prop_types54.default.func,
    size: prop_types54.default.oneOfType([prop_types54.default.oneOf(["medium", "small"]), prop_types54.default.string]),
    skipFocusWhenDisabled: prop_types54.default.bool,
    sx: prop_types54.default.oneOfType([prop_types54.default.arrayOf(prop_types54.default.oneOfType([prop_types54.default.func, prop_types54.default.object, prop_types54.default.bool])), prop_types54.default.func, prop_types54.default.object]),
    tabIndex: prop_types54.default.number,
    variant: prop_types54.default.oneOfType([prop_types54.default.oneOf(["filled", "outlined"]), prop_types54.default.string])
  };
  const Chip_default = Chip2;

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  const React107 = __toModule(require_react());
  const FormControlContext6 = React107.createContext(void 0);
  if (true) {
    FormControlContext6.displayName = "FormControlContext";
  }
  const FormControlContext_default2 = FormControlContext6;

  // node_modules/@mui/material/FormControl/useFormControl.js
  const React108 = __toModule(require_react());
  function useFormControl2() {
    return React108.useContext(FormControlContext_default2);
  }

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  const React113 = __toModule(require_react());
  const prop_types74 = __toModule(require_prop_types2());
  const jsx_runtime102 = __toModule(require_jsx_runtime());
  function GlobalStyles2(props) {
    return jsx_runtime102.jsx(GlobalStyles_default2, _extends({}, props, {
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    }));
  }
  GlobalStyles2.propTypes = {
    styles: prop_types74.default.oneOfType([prop_types74.default.array, prop_types74.default.func, prop_types74.default.number, prop_types74.default.object, prop_types74.default.string, prop_types74.default.bool])
  };
  const GlobalStyles_default = GlobalStyles2;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue2(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue2(obj.value) && obj.value !== "" || SSR && hasValue2(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass2("MuiInputBase", slot);
  }
  const inputBaseClasses4 = generateUtilityClasses2("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  const inputBaseClasses_default = inputBaseClasses4;

  // node_modules/@mui/material/InputBase/InputBase.js
  const React129 = __toModule(require_react());
  const prop_types88 = __toModule(require_prop_types2());
  const jsx_runtime118 = __toModule(require_jsx_runtime());
  const jsx_runtime119 = __toModule(require_jsx_runtime());
  const _excluded81 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  const rootOverridesResolver = (props, styles30) => {
    const {
      ownerState
    } = props;
    return [styles30.root, ownerState.formControl && styles30.formControl, ownerState.startAdornment && styles30.adornedStart, ownerState.endAdornment && styles30.adornedEnd, ownerState.error && styles30.error, ownerState.size === "small" && styles30.sizeSmall, ownerState.multiline && styles30.multiline, ownerState.color && styles30[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles30.fullWidth, ownerState.hiddenLabel && styles30.hiddenLabel];
  };
  const inputOverridesResolver = (props, styles30) => {
    const {
      ownerState
    } = props;
    return [styles30.input, ownerState.size === "small" && styles30.inputSizeSmall, ownerState.multiline && styles30.inputMultiline, ownerState.type === "search" && styles30.inputTypeSearch, ownerState.startAdornment && styles30.inputAdornedStart, ownerState.endAdornment && styles30.inputAdornedEnd, ownerState.hiddenLabel && styles30.inputHiddenLabel];
  };
  const useUtilityClasses71 = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses2(slots, getInputBaseUtilityClass, classes);
  };
  const InputBaseRoot = styled_default("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    boxSizing: "border-box",
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  const InputBaseComponent = styled_default("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      margin: 0,
      WebkitTapHighlightColor: "transparent",
      display: "block",
      minWidth: 0,
      width: "100%",
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      "&:-ms-input-placeholder": placeholder,
      "&::-ms-input-placeholder": placeholder,
      "&:focus": {
        outline: 0
      },
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        WebkitAppearance: "none"
      },
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        "&:-ms-input-placeholder": placeholderHidden,
        "&::-ms-input-placeholder": placeholderHidden,
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        "&:focus:-ms-input-placeholder": placeholderVisible,
        "&:focus::-ms-input-placeholder": placeholderVisible
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      MozAppearance: "textfield"
    });
  });
  const inputGlobalStyles = jsx_runtime118.jsx(GlobalStyles_default, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  const InputBase7 = React129.forwardRef(function InputBase15(inProps, ref) {
    var _slotProps$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className: className3,
      components: components3 = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows: rows3,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React129.useRef(value != null);
    const inputRef = React129.useRef();
    const handleInputRefWarning = React129.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React129.useState(false);
    const muiFormControl = useFormControl2();
    if (true) {
      React129.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React129.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React129.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.`);
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React129.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick && !fcs.disabled) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows3) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows3,
          maxRows: rows3
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize_default;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React129.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses71(ownerState);
    const Root = slots.root || components3.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input10 = slots.input || components3.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return jsx_runtime119.jsxs(React129.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, jsx_runtime119.jsxs(Root, _extends({}, rootProps, !isHostComponent2(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_m_default(classes.root, rootProps.className, className3, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, jsx_runtime118.jsx(FormControlContext_default2.Provider, {
          value: null,
          children: jsx_runtime118.jsx(Input10, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows: rows3,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent2(Input10) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_m_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur2,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  InputBase7.propTypes = {
    "aria-describedby": prop_types88.default.string,
    autoComplete: prop_types88.default.string,
    autoFocus: prop_types88.default.bool,
    classes: prop_types88.default.object,
    className: prop_types88.default.string,
    color: prop_types88.default.oneOfType([prop_types88.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), prop_types88.default.string]),
    components: prop_types88.default.shape({
      Input: prop_types88.default.elementType,
      Root: prop_types88.default.elementType
    }),
    componentsProps: prop_types88.default.shape({
      input: prop_types88.default.object,
      root: prop_types88.default.object
    }),
    defaultValue: prop_types88.default.any,
    disabled: prop_types88.default.bool,
    disableInjectingGlobalStyles: prop_types88.default.bool,
    endAdornment: prop_types88.default.node,
    error: prop_types88.default.bool,
    fullWidth: prop_types88.default.bool,
    id: prop_types88.default.string,
    inputComponent: elementTypeAcceptingRef_default,
    inputProps: prop_types88.default.object,
    inputRef: refType_default,
    margin: prop_types88.default.oneOf(["dense", "none"]),
    maxRows: prop_types88.default.oneOfType([prop_types88.default.number, prop_types88.default.string]),
    minRows: prop_types88.default.oneOfType([prop_types88.default.number, prop_types88.default.string]),
    multiline: prop_types88.default.bool,
    name: prop_types88.default.string,
    onBlur: prop_types88.default.func,
    onChange: prop_types88.default.func,
    onClick: prop_types88.default.func,
    onFocus: prop_types88.default.func,
    onInvalid: prop_types88.default.func,
    onKeyDown: prop_types88.default.func,
    onKeyUp: prop_types88.default.func,
    placeholder: prop_types88.default.string,
    readOnly: prop_types88.default.bool,
    renderSuffix: prop_types88.default.func,
    required: prop_types88.default.bool,
    rows: prop_types88.default.oneOfType([prop_types88.default.number, prop_types88.default.string]),
    size: prop_types88.default.oneOfType([prop_types88.default.oneOf(["medium", "small"]), prop_types88.default.string]),
    slotProps: prop_types88.default.shape({
      input: prop_types88.default.object,
      root: prop_types88.default.object
    }),
    slots: prop_types88.default.shape({
      input: prop_types88.default.elementType,
      root: prop_types88.default.elementType
    }),
    startAdornment: prop_types88.default.node,
    sx: prop_types88.default.oneOfType([prop_types88.default.arrayOf(prop_types88.default.oneOfType([prop_types88.default.func, prop_types88.default.object, prop_types88.default.bool])), prop_types88.default.func, prop_types88.default.object]),
    type: prop_types88.default.string,
    value: prop_types88.default.any
  };
  const InputBase_default = InputBase7;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass2(slot) {
    return generateUtilityClass2("MuiInput", slot);
  }
  const inputClasses7 = _extends({}, inputBaseClasses_default, generateUtilityClasses2("MuiInput", ["root", "underline", "input"]));
  const inputClasses_default2 = inputClasses7;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass2("MuiOutlinedInput", slot);
  }
  const outlinedInputClasses4 = _extends({}, inputBaseClasses_default, generateUtilityClasses2("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  const outlinedInputClasses_default = outlinedInputClasses4;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass2("MuiFilledInput", slot);
  }
  const filledInputClasses3 = _extends({}, inputBaseClasses_default, generateUtilityClasses2("MuiFilledInput", ["root", "underline", "input"]));
  const filledInputClasses_default = filledInputClasses3;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  const React213 = __toModule(require_react());
  const jsx_runtime226 = __toModule(require_jsx_runtime());
  const ArrowDropDown_default = createSvgIcon(jsx_runtime226.jsx("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Autocomplete/autocompleteClasses.js
  function getAutocompleteUtilityClass(slot) {
    return generateUtilityClass2("MuiAutocomplete", slot);
  }
  const autocompleteClasses2 = generateUtilityClasses2("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  const autocompleteClasses_default = autocompleteClasses2;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  const React69 = __toModule(require_react());
  const prop_types32 = __toModule(require_prop_types2());
  const jsx_runtime52 = __toModule(require_jsx_runtime());
  const jsx_runtime53 = __toModule(require_jsx_runtime());
  var _ClearIcon;
  var _ArrowDropDownIcon;
  const _excluded31 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
  const useUtilityClasses27 = (ownerState) => {
    const {
      classes,
      disablePortal,
      expanded,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
      inputRoot: ["inputRoot"],
      input: ["input", inputFocused && "inputFocused"],
      tag: ["tag", `tagSize${capitalize_default(size)}`],
      endAdornment: ["endAdornment"],
      clearIndicator: ["clearIndicator"],
      popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
      popper: ["popper", disablePortal && "popperDisablePortal"],
      paper: ["paper"],
      listbox: ["listbox"],
      loading: ["loading"],
      noOptions: ["noOptions"],
      option: ["option"],
      groupLabel: ["groupLabel"],
      groupUl: ["groupUl"]
    };
    return composeClasses2(slots, getAutocompleteUtilityClass, classes);
  };
  const AutocompleteRoot = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size
      } = ownerState;
      return [{
        [`& .${autocompleteClasses_default.tag}`]: styles30.tag
      }, {
        [`& .${autocompleteClasses_default.tag}`]: styles30[`tagSize${capitalize_default(size)}`]
      }, {
        [`& .${autocompleteClasses_default.inputRoot}`]: styles30.inputRoot
      }, {
        [`& .${autocompleteClasses_default.input}`]: styles30.input
      }, {
        [`& .${autocompleteClasses_default.input}`]: inputFocused && styles30.inputFocused
      }, styles30.root, fullWidth && styles30.fullWidth, hasPopupIcon && styles30.hasPopupIcon, hasClearIcon && styles30.hasClearIcon];
    }
  })(({
    ownerState
  }) => _extends({
    [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    },
    "@media (pointer: fine)": {
      [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
        visibility: "visible"
      }
    }
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [`& .${autocompleteClasses_default.tag}`]: _extends({
      margin: 3,
      maxWidth: "calc(100% - 6px)"
    }, ownerState.size === "small" && {
      margin: 2,
      maxWidth: "calc(100% - 4px)"
    }),
    [`& .${autocompleteClasses_default.inputRoot}`]: {
      flexWrap: "wrap",
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses_default.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses_default2.root}`]: {
      paddingBottom: 1,
      "& .MuiInput-input": {
        padding: "4px 4px 4px 0px"
      }
    },
    [`& .${inputClasses_default2.root}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${inputClasses_default2.input}`]: {
        padding: "2px 4px 3px 0"
      }
    },
    [`& .${outlinedInputClasses_default.root}`]: {
      padding: 9,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "7.5px 4px 7.5px 5px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingTop: 6,
      paddingBottom: 6,
      paddingLeft: 6,
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "2.5px 4px 2.5px 8px"
      }
    },
    [`& .${filledInputClasses_default.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses_default.input}`]: {
        padding: "7px 4px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses_default.input}`]: {
        padding: "2.5px 4px"
      }
    },
    [`& .${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 0,
      paddingBottom: 0,
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 16,
        paddingBottom: 17
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 8,
        paddingBottom: 9
      }
    },
    [`& .${autocompleteClasses_default.input}`]: _extends({
      flexGrow: 1,
      textOverflow: "ellipsis",
      opacity: 0
    }, ownerState.inputFocused && {
      opacity: 1
    })
  }));
  const AutocompleteEndAdornment = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "EndAdornment",
    overridesResolver: (props, styles30) => styles30.endAdornment
  })({
    position: "absolute",
    right: 0,
    top: "calc(50% - 14px)"
  });
  const AutocompleteClearIndicator = styled_default(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "ClearIndicator",
    overridesResolver: (props, styles30) => styles30.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: "hidden"
  });
  const AutocompletePopupIndicator = styled_default(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "PopupIndicator",
    overridesResolver: ({
      ownerState
    }, styles30) => _extends({}, styles30.popupIndicator, ownerState.popupOpen && styles30.popupIndicatorOpen)
  })(({
    ownerState
  }) => _extends({
    padding: 2,
    marginRight: -2
  }, ownerState.popupOpen && {
    transform: "rotate(180deg)"
  }));
  const AutocompletePopper = styled_default(Popper_default2, {
    name: "MuiAutocomplete",
    slot: "Popper",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses_default.option}`]: styles30.option
      }, styles30.popper, ownerState.disablePortal && styles30.popperDisablePortal];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.modal
  }, ownerState.disablePortal && {
    position: "absolute"
  }));
  const AutocompletePaper = styled_default(Paper_default, {
    name: "MuiAutocomplete",
    slot: "Paper",
    overridesResolver: (props, styles30) => styles30.paper
  })(({
    theme
  }) => _extends({}, theme.typography.body1, {
    overflow: "auto"
  }));
  const AutocompleteLoading = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Loading",
    overridesResolver: (props, styles30) => styles30.loading
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  const AutocompleteNoOptions = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "NoOptions",
    overridesResolver: (props, styles30) => styles30.noOptions
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  const AutocompleteListbox = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Listbox",
    overridesResolver: (props, styles30) => styles30.listbox
  })(({
    theme
  }) => ({
    listStyle: "none",
    margin: 0,
    padding: "8px 0",
    maxHeight: "40vh",
    overflow: "auto",
    position: "relative",
    [`& .${autocompleteClasses_default.option}`]: {
      minHeight: 48,
      display: "flex",
      overflow: "hidden",
      justifyContent: "flex-start",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: 6,
      boxSizing: "border-box",
      outline: "0",
      WebkitTapHighlightColor: "transparent",
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      },
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover,
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      '&[aria-disabled="true"]': {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${autocompleteClasses_default.focused}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: (theme.vars || theme).palette.action.selected
          }
        },
        [`&.${autocompleteClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }
  }));
  const AutocompleteGroupLabel = styled_default(ListSubheader_default, {
    name: "MuiAutocomplete",
    slot: "GroupLabel",
    overridesResolver: (props, styles30) => styles30.groupLabel
  })(({
    theme
  }) => ({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    top: -8
  }));
  const AutocompleteGroupUl = styled_default("ul", {
    name: "MuiAutocomplete",
    slot: "GroupUl",
    overridesResolver: (props, styles30) => styles30.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses_default.option}`]: {
      paddingLeft: 24
    }
  });
  const Autocomplete = React69.forwardRef(function Autocomplete6(inProps, ref) {
    var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiAutocomplete"
    });
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className: className3,
      clearIcon = _ClearIcon || (_ClearIcon = jsx_runtime52.jsx(Close_default, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = "Clear",
      closeText = "Close",
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = "auto",
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = (more) => `+${more}`,
      getOptionLabel = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = "ul",
      ListboxProps,
      loading = false,
      loadingText = "Loading…",
      multiple = false,
      noOptionsText = "No options",
      openOnFocus = false,
      openText = "Open",
      PaperComponent = Paper_default,
      PopperComponent = Popper_default2,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = jsx_runtime52.jsx(ArrowDropDown_default, {})),
      readOnly = false,
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size = "medium",
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      expanded,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete2(_extends({}, props, {
      componentName: "Autocomplete"
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
    const {
      onMouseDown: handleInputMouseDown
    } = getInputProps();
    const ownerState = _extends({}, props, {
      disablePortal,
      expanded,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size
    });
    const classes = useUtilityClasses27(ownerState);
    let startAdornment;
    if (multiple && value.length > 0) {
      const getCustomizedTagProps = (params) => _extends({
        className: classes.tag,
        disabled
      }, getTagProps(params));
      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
      } else {
        startAdornment = value.map((option, index) => jsx_runtime52.jsx(Chip_default, _extends({
          label: getOptionLabel(option),
          size
        }, getCustomizedTagProps({
          index
        }), ChipProps)));
      }
    }
    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;
      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push(jsx_runtime52.jsx("span", {
          className: classes.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }
    const defaultRenderGroup = (params) => jsx_runtime53.jsxs("li", {
      children: [jsx_runtime52.jsx(AutocompleteGroupLabel, {
        className: classes.groupLabel,
        ownerState,
        component: "div",
        children: params.group
      }), jsx_runtime52.jsx(AutocompleteGroupUl, {
        className: classes.groupUl,
        ownerState,
        children: params.children
      })]
    }, params.key);
    const renderGroup = renderGroupProp || defaultRenderGroup;
    const defaultRenderOption = (props2, option) => jsx_runtime52.jsx("li", _extends({}, props2, {
      children: getOptionLabel(option)
    }));
    const renderOption = renderOptionProp || defaultRenderOption;
    const renderListOption = (option, index) => {
      const optionProps = getOptionProps({
        option,
        index
      });
      return renderOption(_extends({}, optionProps, {
        className: classes.option
      }), option, {
        selected: optionProps["aria-selected"],
        index,
        inputValue
      });
    };
    const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
    const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
    const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
    const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
    return jsx_runtime53.jsxs(React69.Fragment, {
      children: [jsx_runtime52.jsx(AutocompleteRoot, _extends({
        ref,
        className: clsx_m_default(classes.root, className3),
        ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size === "small" ? "small" : void 0,
          InputLabelProps: getInputLabelProps(),
          InputProps: _extends({
            ref: setAnchorEl,
            className: classes.inputRoot,
            startAdornment,
            onClick: (event) => {
              if (event.target === event.currentTarget) {
                handleInputMouseDown(event);
              }
            }
          }, (hasClearIcon || hasPopupIcon) && {
            endAdornment: jsx_runtime53.jsxs(AutocompleteEndAdornment, {
              className: classes.endAdornment,
              ownerState,
              children: [hasClearIcon ? jsx_runtime52.jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState
              }, clearIndicatorSlotProps, {
                className: clsx_m_default(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                children: clearIcon
              })) : null, hasPopupIcon ? jsx_runtime52.jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                ownerState
              }, popupIndicatorSlotProps, {
                className: clsx_m_default(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                children: popupIcon
              })) : null]
            })
          }),
          inputProps: _extends({
            className: classes.input,
            disabled,
            readOnly
          }, getInputProps())
        })
      })), anchorEl ? jsx_runtime52.jsx(AutocompletePopper, _extends({
        as: PopperComponent,
        disablePortal,
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        ownerState,
        role: "presentation",
        anchorEl,
        open: popupOpen
      }, popperSlotProps, {
        className: clsx_m_default(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
        children: jsx_runtime53.jsxs(AutocompletePaper, _extends({
          ownerState,
          as: PaperComponent
        }, paperSlotProps, {
          className: clsx_m_default(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
          children: [loading && groupedOptions.length === 0 ? jsx_runtime52.jsx(AutocompleteLoading, {
            className: classes.loading,
            ownerState,
            children: loadingText
          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? jsx_runtime52.jsx(AutocompleteNoOptions, {
            className: classes.noOptions,
            ownerState,
            role: "presentation",
            onMouseDown: (event) => {
              event.preventDefault();
            },
            children: noOptionsText
          }) : null, groupedOptions.length > 0 ? jsx_runtime52.jsx(AutocompleteListbox, _extends({
            as: ListboxComponent,
            className: classes.listbox,
            ownerState
          }, getListboxProps(), ListboxProps, {
            children: groupedOptions.map((option, index) => {
              if (groupBy) {
                return renderGroup({
                  key: option.key,
                  group: option.group,
                  children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                });
              }
              return renderListOption(option, index);
            })
          })) : null]
        }))
      })) : null]
    });
  });
  Autocomplete.propTypes = {
    autoComplete: prop_types32.default.bool,
    autoHighlight: prop_types32.default.bool,
    autoSelect: prop_types32.default.bool,
    blurOnSelect: prop_types32.default.oneOfType([prop_types32.default.oneOf(["mouse", "touch"]), prop_types32.default.bool]),
    ChipProps: prop_types32.default.object,
    classes: prop_types32.default.object,
    className: prop_types32.default.string,
    clearIcon: prop_types32.default.node,
    clearOnBlur: prop_types32.default.bool,
    clearOnEscape: prop_types32.default.bool,
    clearText: prop_types32.default.string,
    closeText: prop_types32.default.string,
    componentsProps: prop_types32.default.shape({
      clearIndicator: prop_types32.default.object,
      paper: prop_types32.default.object,
      popper: prop_types32.default.object,
      popupIndicator: prop_types32.default.object
    }),
    defaultValue: chainPropTypes(prop_types32.default.any, (props) => {
      if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
        return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
      }
      return null;
    }),
    disableClearable: prop_types32.default.bool,
    disableCloseOnSelect: prop_types32.default.bool,
    disabled: prop_types32.default.bool,
    disabledItemsFocusable: prop_types32.default.bool,
    disableListWrap: prop_types32.default.bool,
    disablePortal: prop_types32.default.bool,
    filterOptions: prop_types32.default.func,
    filterSelectedOptions: prop_types32.default.bool,
    forcePopupIcon: prop_types32.default.oneOfType([prop_types32.default.oneOf(["auto"]), prop_types32.default.bool]),
    freeSolo: prop_types32.default.bool,
    fullWidth: prop_types32.default.bool,
    getLimitTagsText: prop_types32.default.func,
    getOptionDisabled: prop_types32.default.func,
    getOptionLabel: prop_types32.default.func,
    groupBy: prop_types32.default.func,
    handleHomeEndKeys: prop_types32.default.bool,
    id: prop_types32.default.string,
    includeInputInList: prop_types32.default.bool,
    inputValue: prop_types32.default.string,
    isOptionEqualToValue: prop_types32.default.func,
    limitTags: integerPropType_default,
    ListboxComponent: prop_types32.default.elementType,
    ListboxProps: prop_types32.default.object,
    loading: prop_types32.default.bool,
    loadingText: prop_types32.default.node,
    multiple: prop_types32.default.bool,
    noOptionsText: prop_types32.default.node,
    onChange: prop_types32.default.func,
    onClose: prop_types32.default.func,
    onHighlightChange: prop_types32.default.func,
    onInputChange: prop_types32.default.func,
    onOpen: prop_types32.default.func,
    open: prop_types32.default.bool,
    openOnFocus: prop_types32.default.bool,
    openText: prop_types32.default.string,
    options: prop_types32.default.array.isRequired,
    PaperComponent: prop_types32.default.elementType,
    PopperComponent: prop_types32.default.elementType,
    popupIcon: prop_types32.default.node,
    readOnly: prop_types32.default.bool,
    renderGroup: prop_types32.default.func,
    renderInput: prop_types32.default.func.isRequired,
    renderOption: prop_types32.default.func,
    renderTags: prop_types32.default.func,
    selectOnFocus: prop_types32.default.bool,
    size: prop_types32.default.oneOfType([prop_types32.default.oneOf(["small", "medium"]), prop_types32.default.string]),
    slotProps: prop_types32.default.shape({
      clearIndicator: prop_types32.default.object,
      paper: prop_types32.default.object,
      popper: prop_types32.default.object,
      popupIndicator: prop_types32.default.object
    }),
    sx: prop_types32.default.oneOfType([prop_types32.default.arrayOf(prop_types32.default.oneOfType([prop_types32.default.func, prop_types32.default.object, prop_types32.default.bool])), prop_types32.default.func, prop_types32.default.object]),
    value: chainPropTypes(prop_types32.default.any, (props) => {
      if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
        return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
      }
      return null;
    })
  };
  const Autocomplete_default = Autocomplete;

  // node_modules/@mui/material/Fade/Fade.js
  const React104 = __toModule(require_react());
  const prop_types67 = __toModule(require_prop_types2());
  const jsx_runtime94 = __toModule(require_jsx_runtime());
  const _excluded62 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  const styles4 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  const Fade3 = React104.forwardRef(function Fade6(props, ref) {
    const theme = useTheme3();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style16,
      timeout = defaultTimeout,
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
    const enableStrictModeCompat = true;
    const nodeRef = React104.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      reflow(node);
      const transitionProps = getTransitionProps({
        style: style16,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node) => {
      const transitionProps = getTransitionProps({
        style: style16,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next);
      }
    };
    return jsx_runtime94.jsx(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout
    }, other, {
      children: (state, childProps) => {
        return React104.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles4[state], style16, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Fade3.propTypes = {
    addEndListener: prop_types67.default.func,
    appear: prop_types67.default.bool,
    children: elementAcceptingRef_default.isRequired,
    easing: prop_types67.default.oneOfType([prop_types67.default.shape({
      enter: prop_types67.default.string,
      exit: prop_types67.default.string
    }), prop_types67.default.string]),
    in: prop_types67.default.bool,
    onEnter: prop_types67.default.func,
    onEntered: prop_types67.default.func,
    onEntering: prop_types67.default.func,
    onExit: prop_types67.default.func,
    onExited: prop_types67.default.func,
    onExiting: prop_types67.default.func,
    style: prop_types67.default.object,
    timeout: prop_types67.default.oneOfType([prop_types67.default.number, prop_types67.default.shape({
      appear: prop_types67.default.number,
      enter: prop_types67.default.number,
      exit: prop_types67.default.number
    })])
  };
  const Fade_default = Fade3;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass2("MuiBackdrop", slot);
  }
  const backdropClasses2 = generateUtilityClasses2("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/material/Backdrop/Backdrop.js
  const React72 = __toModule(require_react());
  const prop_types35 = __toModule(require_prop_types2());
  const jsx_runtime56 = __toModule(require_jsx_runtime());
  const _excluded34 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  const useUtilityClasses30 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses2(slots, getBackdropUtilityClass, classes);
  };
  const BackdropRoot = styled_default("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.invisible && styles30.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  const Backdrop = React72.forwardRef(function Backdrop6(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className: className3,
      component = "div",
      components: components3 = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade_default,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses30(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return jsx_runtime56.jsx(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: jsx_runtime56.jsx(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components3.Root) != null ? _ref : component,
        className: clsx_m_default(classes.root, className3, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  Backdrop.propTypes = {
    children: prop_types35.default.node,
    classes: prop_types35.default.object,
    className: prop_types35.default.string,
    component: prop_types35.default.elementType,
    components: prop_types35.default.shape({
      Root: prop_types35.default.elementType
    }),
    componentsProps: prop_types35.default.shape({
      root: prop_types35.default.object
    }),
    invisible: prop_types35.default.bool,
    open: prop_types35.default.bool.isRequired,
    slotProps: prop_types35.default.shape({
      root: prop_types35.default.object
    }),
    slots: prop_types35.default.shape({
      root: prop_types35.default.elementType
    }),
    sx: prop_types35.default.oneOfType([prop_types35.default.arrayOf(prop_types35.default.oneOfType([prop_types35.default.func, prop_types35.default.object, prop_types35.default.bool])), prop_types35.default.func, prop_types35.default.object]),
    TransitionComponent: prop_types35.default.elementType,
    transitionDuration: prop_types35.default.oneOfType([prop_types35.default.number, prop_types35.default.shape({
      appear: prop_types35.default.number,
      enter: prop_types35.default.number,
      exit: prop_types35.default.number
    })])
  };
  const Backdrop_default = Backdrop;

  // node_modules/@mui/material/Badge/badgeClasses.js
  function getBadgeUtilityClass2(slot) {
    return generateUtilityClass2("MuiBadge", slot);
  }
  const badgeClasses5 = generateUtilityClasses2("MuiBadge", [
    "root",
    "badge",
    "dot",
    "standard",
    "anchorOriginTopRight",
    "anchorOriginBottomRight",
    "anchorOriginTopLeft",
    "anchorOriginBottomLeft",
    "invisible",
    "colorError",
    "colorInfo",
    "colorPrimary",
    "colorSecondary",
    "colorSuccess",
    "colorWarning",
    "overlapRectangular",
    "overlapCircular",
    "anchorOriginTopLeftCircular",
    "anchorOriginTopLeftRectangular",
    "anchorOriginTopRightCircular",
    "anchorOriginTopRightRectangular",
    "anchorOriginBottomLeftCircular",
    "anchorOriginBottomLeftRectangular",
    "anchorOriginBottomRightCircular",
    "anchorOriginBottomRightRectangular"
  ]);
  const badgeClasses_default2 = badgeClasses5;

  // node_modules/@mui/material/Badge/Badge.js
  const React73 = __toModule(require_react());
  const prop_types36 = __toModule(require_prop_types2());
  const jsx_runtime57 = __toModule(require_jsx_runtime());
  const jsx_runtime58 = __toModule(require_jsx_runtime());
  const _excluded35 = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
  const RADIUS_STANDARD = 10;
  const RADIUS_DOT = 4;
  const useUtilityClasses31 = (ownerState) => {
    const {
      color: color2,
      anchorOrigin,
      invisible,
      overlap,
      variant,
      classes = {}
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}${capitalize_default(overlap)}`, `overlap${capitalize_default(overlap)}`, color2 !== "default" && `color${capitalize_default(color2)}`]
    };
    return composeClasses2(slots, getBadgeUtilityClass2, classes);
  };
  const BadgeRoot = styled_default("span", {
    name: "MuiBadge",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })({
    position: "relative",
    display: "inline-flex",
    verticalAlign: "middle",
    flexShrink: 0
  });
  const BadgeBadge = styled_default("span", {
    name: "MuiBadge",
    slot: "Badge",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.badge, styles30[ownerState.variant], styles30[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles30[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles30.invisible];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(12),
    minWidth: RADIUS_STANDARD * 2,
    lineHeight: 1,
    padding: "0 6px",
    height: RADIUS_STANDARD * 2,
    borderRadius: RADIUS_STANDARD,
    zIndex: 1,
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    })
  }, ownerState.color !== "default" && {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    color: (theme.vars || theme).palette[ownerState.color].contrastText
  }, ownerState.variant === "dot" && {
    borderRadius: RADIUS_DOT,
    height: RADIUS_DOT * 2,
    minWidth: RADIUS_DOT * 2,
    padding: 0
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    top: 0,
    right: 0,
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    right: 0,
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    top: 0,
    left: 0,
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    left: 0,
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    top: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    bottom: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    top: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    bottom: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses_default2.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.invisible && {
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.leavingScreen
    })
  }));
  const Badge4 = React73.forwardRef(function Badge10(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBadge"
    });
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: "top",
        horizontal: "right"
      },
      className: className3,
      component,
      components: components3 = {},
      componentsProps = {},
      children,
      overlap: overlapProp = "rectangular",
      color: colorProp = "default",
      invisible: invisibleProp = false,
      max: maxProp = 99,
      badgeContent: badgeContentProp,
      slots,
      slotProps,
      showZero = false,
      variant: variantProp = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
    const {
      badgeContent,
      invisible: invisibleFromHook,
      max: max2,
      displayValue: displayValueFromHook
    } = useBadge2({
      max: maxProp,
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero
    });
    const prevProps = usePreviousProps_default({
      anchorOrigin: anchorOriginProp,
      color: colorProp,
      overlap: overlapProp,
      variant: variantProp,
      badgeContent: badgeContentProp
    });
    const invisible = invisibleFromHook || badgeContent == null && variantProp !== "dot";
    const {
      color: color2 = colorProp,
      overlap = overlapProp,
      anchorOrigin = anchorOriginProp,
      variant = variantProp
    } = invisible ? prevProps : props;
    const displayValue = variant !== "dot" ? displayValueFromHook : void 0;
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max2,
      displayValue,
      showZero,
      anchorOrigin,
      color: color2,
      overlap,
      variant
    });
    const classes = useUtilityClasses31(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components3.Root) != null ? _ref : BadgeRoot;
    const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components3.Badge) != null ? _ref2 : BadgeBadge;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_m_default(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className3)
    });
    const badgeProps = useSlotProps({
      elementType: BadgeSlot,
      externalSlotProps: badgeSlotProps,
      ownerState,
      className: clsx_m_default(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
    });
    return jsx_runtime58.jsxs(RootSlot, _extends({}, rootProps, {
      children: [children, jsx_runtime57.jsx(BadgeSlot, _extends({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  Badge4.propTypes = {
    anchorOrigin: prop_types36.default.shape({
      horizontal: prop_types36.default.oneOf(["left", "right"]).isRequired,
      vertical: prop_types36.default.oneOf(["bottom", "top"]).isRequired
    }),
    badgeContent: prop_types36.default.node,
    children: prop_types36.default.node,
    classes: prop_types36.default.object,
    className: prop_types36.default.string,
    color: prop_types36.default.oneOfType([prop_types36.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), prop_types36.default.string]),
    component: prop_types36.default.elementType,
    components: prop_types36.default.shape({
      Badge: prop_types36.default.elementType,
      Root: prop_types36.default.elementType
    }),
    componentsProps: prop_types36.default.shape({
      badge: prop_types36.default.oneOfType([prop_types36.default.func, prop_types36.default.object]),
      root: prop_types36.default.oneOfType([prop_types36.default.func, prop_types36.default.object])
    }),
    invisible: prop_types36.default.bool,
    max: prop_types36.default.number,
    overlap: prop_types36.default.oneOf(["circular", "rectangular"]),
    showZero: prop_types36.default.bool,
    slotProps: prop_types36.default.shape({
      badge: prop_types36.default.oneOfType([prop_types36.default.func, prop_types36.default.object]),
      root: prop_types36.default.oneOfType([prop_types36.default.func, prop_types36.default.object])
    }),
    slots: prop_types36.default.shape({
      badge: prop_types36.default.elementType,
      root: prop_types36.default.elementType
    }),
    sx: prop_types36.default.oneOfType([prop_types36.default.arrayOf(prop_types36.default.oneOfType([prop_types36.default.func, prop_types36.default.object, prop_types36.default.bool])), prop_types36.default.func, prop_types36.default.object]),
    variant: prop_types36.default.oneOfType([prop_types36.default.oneOf(["dot", "standard"]), prop_types36.default.string])
  };
  const Badge_default2 = Badge4;

  // node_modules/@mui/material/Box/Box.js
  const prop_types39 = __toModule(require_prop_types2());
  const defaultTheme = createTheme_default();
  const Box = createBox({
    themeId: identifier_default,
    defaultTheme,
    defaultClassName: "MuiBox-root",
    generateClassName: ClassNameGenerator_default.generate
  });
  Box.propTypes = {
    children: prop_types39.default.node,
    component: prop_types39.default.elementType,
    sx: prop_types39.default.oneOfType([prop_types39.default.arrayOf(prop_types39.default.oneOfType([prop_types39.default.func, prop_types39.default.object, prop_types39.default.bool])), prop_types39.default.func, prop_types39.default.object])
  };
  const Box_default = Box;

  // node_modules/@mui/material/Button/buttonClasses.js
  function getButtonUtilityClass2(slot) {
    return generateUtilityClass2("MuiButton", slot);
  }
  const buttonClasses5 = generateUtilityClasses2("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  const buttonClasses_default2 = buttonClasses5;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  const React83 = __toModule(require_react());
  const ButtonGroupContext3 = React83.createContext({});
  if (true) {
    ButtonGroupContext3.displayName = "ButtonGroupContext";
  }
  const ButtonGroupContext_default = ButtonGroupContext3;

  // node_modules/@mui/material/Button/Button.js
  const React78 = __toModule(require_react());
  const prop_types42 = __toModule(require_prop_types2());
  const jsx_runtime64 = __toModule(require_jsx_runtime());
  const jsx_runtime65 = __toModule(require_jsx_runtime());
  const _excluded40 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  const useUtilityClasses35 = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color2)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["endIcon", `iconSize${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses2(slots, getButtonUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  const commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  const ButtonRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, styles30[ownerState.variant], styles30[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles30[`size${capitalize_default(ownerState.size)}`], styles30[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles30.colorInherit, ownerState.disableElevation && styles30.disableElevation, ownerState.fullWidth && styles30.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[4],
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses_default2.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses_default2.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default2.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default2.disabled}`]: {
      boxShadow: "none"
    }
  });
  const ButtonStartIcon = styled_default("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.startIcon, styles30[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  const ButtonEndIcon = styled_default("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.endIcon, styles30[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  const Button4 = React78.forwardRef(function Button8(inProps, ref) {
    const contextProps = React78.useContext(ButtonGroupContext_default);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useThemeProps2({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className: className3,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes = useUtilityClasses35(ownerState);
    const startIcon = startIconProp && jsx_runtime64.jsx(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && jsx_runtime64.jsx(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    return jsx_runtime65.jsxs(ButtonRoot, _extends({
      ownerState,
      className: clsx_m_default(contextProps.className, classes.root, className3),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  Button4.propTypes = {
    children: prop_types42.default.node,
    classes: prop_types42.default.object,
    className: prop_types42.default.string,
    color: prop_types42.default.oneOfType([prop_types42.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), prop_types42.default.string]),
    component: prop_types42.default.elementType,
    disabled: prop_types42.default.bool,
    disableElevation: prop_types42.default.bool,
    disableFocusRipple: prop_types42.default.bool,
    disableRipple: prop_types42.default.bool,
    endIcon: prop_types42.default.node,
    focusVisibleClassName: prop_types42.default.string,
    fullWidth: prop_types42.default.bool,
    href: prop_types42.default.string,
    size: prop_types42.default.oneOfType([prop_types42.default.oneOf(["small", "medium", "large"]), prop_types42.default.string]),
    startIcon: prop_types42.default.node,
    sx: prop_types42.default.oneOfType([prop_types42.default.arrayOf(prop_types42.default.oneOfType([prop_types42.default.func, prop_types42.default.object, prop_types42.default.bool])), prop_types42.default.func, prop_types42.default.object]),
    type: prop_types42.default.oneOfType([prop_types42.default.oneOf(["button", "reset", "submit"]), prop_types42.default.string]),
    variant: prop_types42.default.oneOfType([prop_types42.default.oneOf(["contained", "outlined", "text"]), prop_types42.default.string])
  };
  const Button_default2 = Button4;

  // node_modules/@mui/material/internal/switchBaseClasses.js
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass2("PrivateSwitchBase", slot);
  }
  const switchBaseClasses2 = generateUtilityClasses2("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // node_modules/@mui/material/internal/SwitchBase.js
  const React210 = __toModule(require_react());
  const prop_types164 = __toModule(require_prop_types2());
  const jsx_runtime222 = __toModule(require_jsx_runtime());
  const jsx_runtime223 = __toModule(require_jsx_runtime());
  const _excluded153 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  const useUtilityClasses132 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return composeClasses2(slots, getSwitchBaseUtilityClass, classes);
  };
  const SwitchBaseRoot = styled_default(ButtonBase_default)(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  const SwitchBaseInput = styled_default("input")({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  const SwitchBase4 = React210.forwardRef(function SwitchBase5(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className: className3,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded153);
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl2();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses132(ownerState);
    return jsx_runtime223.jsxs(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx_m_default(classes.root, className3),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur2,
      ownerState,
      ref
    }, other, {
      children: [jsx_runtime222.jsx(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  SwitchBase4.propTypes = {
    autoFocus: prop_types164.default.bool,
    checked: prop_types164.default.bool,
    checkedIcon: prop_types164.default.node.isRequired,
    classes: prop_types164.default.object,
    className: prop_types164.default.string,
    defaultChecked: prop_types164.default.bool,
    disabled: prop_types164.default.bool,
    disableFocusRipple: prop_types164.default.bool,
    edge: prop_types164.default.oneOf(["end", "start", false]),
    icon: prop_types164.default.node.isRequired,
    id: prop_types164.default.string,
    inputProps: prop_types164.default.object,
    inputRef: refType_default,
    name: prop_types164.default.string,
    onBlur: prop_types164.default.func,
    onChange: prop_types164.default.func,
    onFocus: prop_types164.default.func,
    readOnly: prop_types164.default.bool,
    required: prop_types164.default.bool,
    sx: prop_types164.default.object,
    tabIndex: prop_types164.default.oneOfType([prop_types164.default.number, prop_types164.default.string]),
    type: prop_types164.default.string.isRequired,
    value: prop_types164.default.any
  };
  const SwitchBase_default = SwitchBase4;

  // node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  const React216 = __toModule(require_react());
  const jsx_runtime229 = __toModule(require_jsx_runtime());
  const CheckBoxOutlineBlank_default = createSvgIcon(jsx_runtime229.jsx("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@mui/material/internal/svg-icons/CheckBox.js
  const React215 = __toModule(require_react());
  const jsx_runtime228 = __toModule(require_jsx_runtime());
  const CheckBox_default = createSvgIcon(jsx_runtime228.jsx("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  const React221 = __toModule(require_react());
  const jsx_runtime234 = __toModule(require_jsx_runtime());
  const IndeterminateCheckBox_default = createSvgIcon(jsx_runtime234.jsx("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@mui/material/Checkbox/checkboxClasses.js
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass2("MuiCheckbox", slot);
  }
  const checkboxClasses2 = generateUtilityClasses2("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary"]);
  const checkboxClasses_default = checkboxClasses2;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  const React90 = __toModule(require_react());
  const prop_types53 = __toModule(require_prop_types2());
  const jsx_runtime79 = __toModule(require_jsx_runtime());
  const _excluded50 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  const useUtilityClasses44 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color2
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color2)}`]
    };
    const composedClasses = composeClasses2(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const CheckboxRoot = styled_default(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.indeterminate && styles30.indeterminate, ownerState.color !== "default" && styles30[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  const defaultCheckedIcon = jsx_runtime79.jsx(CheckBox_default, {});
  const defaultIcon = jsx_runtime79.jsx(CheckBoxOutlineBlank_default, {});
  const defaultIndeterminateIcon = jsx_runtime79.jsx(IndeterminateCheckBox_default, {});
  const Checkbox = React90.forwardRef(function Checkbox5(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color: color2,
      indeterminate,
      size
    });
    const classes = useUtilityClasses44(ownerState);
    return jsx_runtime79.jsx(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: React90.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: React90.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref,
      className: clsx_m_default(classes.root, className3)
    }, other, {
      classes
    }));
  });
  Checkbox.propTypes = {
    checked: prop_types53.default.bool,
    checkedIcon: prop_types53.default.node,
    classes: prop_types53.default.object,
    className: prop_types53.default.string,
    color: prop_types53.default.oneOfType([prop_types53.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), prop_types53.default.string]),
    defaultChecked: prop_types53.default.bool,
    disabled: prop_types53.default.bool,
    disableRipple: prop_types53.default.bool,
    icon: prop_types53.default.node,
    id: prop_types53.default.string,
    indeterminate: prop_types53.default.bool,
    indeterminateIcon: prop_types53.default.node,
    inputProps: prop_types53.default.object,
    inputRef: refType_default,
    onChange: prop_types53.default.func,
    required: prop_types53.default.bool,
    size: prop_types53.default.oneOfType([prop_types53.default.oneOf(["medium", "small"]), prop_types53.default.string]),
    sx: prop_types53.default.oneOfType([prop_types53.default.arrayOf(prop_types53.default.oneOfType([prop_types53.default.func, prop_types53.default.object, prop_types53.default.bool])), prop_types53.default.func, prop_types53.default.object]),
    value: prop_types53.default.any
  };
  const Checkbox_default = Checkbox;

  // node_modules/@mui/material/CircularProgress/circularProgressClasses.js
  function getCircularProgressUtilityClass(slot) {
    return generateUtilityClass2("MuiCircularProgress", slot);
  }
  const circularProgressClasses2 = generateUtilityClasses2("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  const React92 = __toModule(require_react());
  const prop_types55 = __toModule(require_prop_types2());
  const jsx_runtime82 = __toModule(require_jsx_runtime());
  const _excluded52 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  let _2 = (t2) => t2;
  let _t5;
  let _t22;
  let _t32;
  let _t42;
  const SIZE = 44;
  const circularRotateKeyframe = keyframes(_t5 || (_t5 = _2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  const circularDashKeyframe = keyframes(_t22 || (_t22 = _2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  const useUtilityClasses46 = (ownerState) => {
    const {
      classes,
      variant,
      color: color2,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color2)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return composeClasses2(slots, getCircularProgressUtilityClass, classes);
  };
  const CircularProgressRoot = styled_default("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, styles30[ownerState.variant], styles30[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && css(_t32 || (_t32 = _2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  const CircularProgressSVG = styled_default("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles30) => styles30.svg
  })({
    display: "block"
  });
  const CircularProgressCircle = styled_default("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.circle, styles30[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles30.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t42 || (_t42 = _2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  const CircularProgress = React92.forwardRef(function CircularProgress5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className: className3,
      color: color2 = "primary",
      disableShrink = false,
      size = 40,
      style: style16,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
    const ownerState = _extends({}, props, {
      color: color2,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });
    const classes = useUtilityClasses46(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return jsx_runtime82.jsx(CircularProgressRoot, _extends({
      className: clsx_m_default(classes.root, className3),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style16),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: jsx_runtime82.jsx(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: jsx_runtime82.jsx(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  CircularProgress.propTypes = {
    classes: prop_types55.default.object,
    className: prop_types55.default.string,
    color: prop_types55.default.oneOfType([prop_types55.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), prop_types55.default.string]),
    disableShrink: chainPropTypes(prop_types55.default.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    size: prop_types55.default.oneOfType([prop_types55.default.number, prop_types55.default.string]),
    style: prop_types55.default.object,
    sx: prop_types55.default.oneOfType([prop_types55.default.arrayOf(prop_types55.default.oneOfType([prop_types55.default.func, prop_types55.default.object, prop_types55.default.bool])), prop_types55.default.func, prop_types55.default.object]),
    thickness: prop_types55.default.number,
    value: prop_types55.default.number,
    variant: prop_types55.default.oneOf(["determinate", "indeterminate"])
  };
  const CircularProgress_default = CircularProgress;

  // node_modules/@mui/material/Container/Container.js
  const prop_types57 = __toModule(require_prop_types2());
  const Container = createContainer({
    createStyledComponent: styled_default("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles30) => {
        const {
          ownerState
        } = props;
        return [styles30.root, styles30[`maxWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fixed && styles30.fixed, ownerState.disableGutters && styles30.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useThemeProps2({
      props: inProps,
      name: "MuiContainer"
    })
  });
  Container.propTypes = {
    children: prop_types57.default.node,
    classes: prop_types57.default.object,
    component: prop_types57.default.elementType,
    disableGutters: prop_types57.default.bool,
    fixed: prop_types57.default.bool,
    maxWidth: prop_types57.default.oneOfType([prop_types57.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), prop_types57.default.string]),
    sx: prop_types57.default.oneOfType([prop_types57.default.arrayOf(prop_types57.default.oneOfType([prop_types57.default.func, prop_types57.default.object, prop_types57.default.bool])), prop_types57.default.func, prop_types57.default.object])
  };
  const Container_default = Container;

  // node_modules/@mui/material/Modal/Modal.js
  const React146 = __toModule(require_react());
  const prop_types104 = __toModule(require_prop_types2());
  const jsx_runtime140 = __toModule(require_jsx_runtime());
  const _excluded97 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "open", "slotProps", "slots", "theme"];
  const modalClasses4 = modalClasses_default;
  const ModalRoot = styled_default("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, !ownerState.open && ownerState.exited && styles30.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  const ModalBackdrop = styled_default(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles30) => {
      return styles30.backdrop;
    }
  })({
    zIndex: -1
  });
  const Modal7 = React146.forwardRef(function Modal12(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useThemeProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      classes,
      className: className3,
      closeAfterTransition = false,
      children,
      container,
      component,
      components: components3 = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      onClose,
      open,
      slotProps,
      slots,
      theme
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
    const [exited, setExited] = React146.useState(true);
    const commonProps = {
      container,
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted,
      onBackdropClick,
      onClose,
      open
    };
    const ownerState = _extends({}, props, commonProps, {
      exited
    });
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components3.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components3.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    return jsx_runtime140.jsx(Modal_default2, _extends({
      slots: {
        root: RootSlot,
        backdrop: BackdropSlot
      },
      slotProps: {
        root: () => _extends({}, resolveComponentProps2(rootSlotProps, ownerState), !isHostComponent2(RootSlot) && {
          as: component,
          theme
        }, {
          className: clsx_m_default(className3, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
        }),
        backdrop: () => _extends({}, BackdropProps, resolveComponentProps2(backdropSlotProps, ownerState), {
          className: clsx_m_default(backdropSlotProps == null ? void 0 : backdropSlotProps.className, classes == null ? void 0 : classes.backdrop)
        })
      },
      onTransitionEnter: () => setExited(false),
      onTransitionExited: () => setExited(true),
      ref
    }, other, commonProps, {
      children
    }));
  });
  Modal7.propTypes = {
    BackdropComponent: prop_types104.default.elementType,
    BackdropProps: prop_types104.default.object,
    children: elementAcceptingRef_default.isRequired,
    classes: prop_types104.default.object,
    className: prop_types104.default.string,
    closeAfterTransition: prop_types104.default.bool,
    component: prop_types104.default.elementType,
    components: prop_types104.default.shape({
      Backdrop: prop_types104.default.elementType,
      Root: prop_types104.default.elementType
    }),
    componentsProps: prop_types104.default.shape({
      backdrop: prop_types104.default.oneOfType([prop_types104.default.func, prop_types104.default.object]),
      root: prop_types104.default.oneOfType([prop_types104.default.func, prop_types104.default.object])
    }),
    container: prop_types104.default.oneOfType([HTMLElementType, prop_types104.default.func]),
    disableAutoFocus: prop_types104.default.bool,
    disableEnforceFocus: prop_types104.default.bool,
    disableEscapeKeyDown: prop_types104.default.bool,
    disablePortal: prop_types104.default.bool,
    disableRestoreFocus: prop_types104.default.bool,
    disableScrollLock: prop_types104.default.bool,
    hideBackdrop: prop_types104.default.bool,
    keepMounted: prop_types104.default.bool,
    onBackdropClick: prop_types104.default.func,
    onClose: prop_types104.default.func,
    open: prop_types104.default.bool.isRequired,
    slotProps: prop_types104.default.shape({
      backdrop: prop_types104.default.oneOfType([prop_types104.default.func, prop_types104.default.object]),
      root: prop_types104.default.oneOfType([prop_types104.default.func, prop_types104.default.object])
    }),
    slots: prop_types104.default.shape({
      backdrop: prop_types104.default.elementType,
      root: prop_types104.default.elementType
    }),
    sx: prop_types104.default.oneOfType([prop_types104.default.arrayOf(prop_types104.default.oneOfType([prop_types104.default.func, prop_types104.default.object, prop_types104.default.bool])), prop_types104.default.func, prop_types104.default.object])
  };
  const Modal_default = Modal7;

  // node_modules/@mui/material/Divider/dividerClasses.js
  function getDividerUtilityClass(slot) {
    return generateUtilityClass2("MuiDivider", slot);
  }
  const dividerClasses2 = generateUtilityClasses2("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  const dividerClasses_default = dividerClasses2;

  // node_modules/@mui/material/Divider/Divider.js
  const React101 = __toModule(require_react());
  const prop_types64 = __toModule(require_prop_types2());
  const jsx_runtime91 = __toModule(require_jsx_runtime());
  const _excluded59 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  const useUtilityClasses53 = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign: textAlign2,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign2 === "right" && orientation !== "vertical" && "textAlignRight", textAlign2 === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return composeClasses2(slots, getDividerUtilityClass, classes);
  };
  const DividerRoot = styled_default("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.absolute && styles30.absolute, styles30[ownerState.variant], ownerState.light && styles30.light, ownerState.orientation === "vertical" && styles30.vertical, ownerState.flexItem && styles30.flexItem, ownerState.children && styles30.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles30.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles30.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles30.textAlignLeft];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0,
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme.vars || theme).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    ownerState
  }) => _extends({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    "&::before, &::after": {
      content: '""',
      alignSelf: "center"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation !== "vertical" && {
    "&::before, &::after": {
      width: "100%",
      borderTop: `thin solid ${(theme.vars || theme).palette.divider}`
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  const DividerWrapper = styled_default("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.wrapper, ownerState.orientation === "vertical" && styles30.wrapperVertical];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-block",
    paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
  }));
  const Divider = React101.forwardRef(function Divider6(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className: className3,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign: textAlign2 = "center",
      variant = "fullWidth"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
    const ownerState = _extends({}, props, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign: textAlign2,
      variant
    });
    const classes = useUtilityClasses53(ownerState);
    return jsx_runtime91.jsx(DividerRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className3),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? jsx_runtime91.jsx(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  Divider.propTypes = {
    absolute: prop_types64.default.bool,
    children: prop_types64.default.node,
    classes: prop_types64.default.object,
    className: prop_types64.default.string,
    component: prop_types64.default.elementType,
    flexItem: prop_types64.default.bool,
    light: prop_types64.default.bool,
    orientation: prop_types64.default.oneOf(["horizontal", "vertical"]),
    role: prop_types64.default.string,
    sx: prop_types64.default.oneOfType([prop_types64.default.arrayOf(prop_types64.default.oneOfType([prop_types64.default.func, prop_types64.default.object, prop_types64.default.bool])), prop_types64.default.func, prop_types64.default.object]),
    textAlign: prop_types64.default.oneOf(["center", "left", "right"]),
    variant: prop_types64.default.oneOfType([prop_types64.default.oneOf(["fullWidth", "inset", "middle"]), prop_types64.default.string])
  };
  const Divider_default = Divider;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  const React105 = __toModule(require_react());
  const prop_types68 = __toModule(require_prop_types2());
  const jsx_runtime95 = __toModule(require_jsx_runtime());
  const _excluded63 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  const useUtilityClasses56 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses2(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const FilledInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles30), !ownerState.disableUnderline && styles30.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }));
  });
  const FilledInputInput = styled_default(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }));
  const FilledInput = React105.forwardRef(function FilledInput6(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components: components3 = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses56(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components3.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components3.Input) != null ? _ref2 : FilledInputInput;
    return jsx_runtime95.jsx(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  FilledInput.propTypes = {
    autoComplete: prop_types68.default.string,
    autoFocus: prop_types68.default.bool,
    classes: prop_types68.default.object,
    color: prop_types68.default.oneOfType([prop_types68.default.oneOf(["primary", "secondary"]), prop_types68.default.string]),
    components: prop_types68.default.shape({
      Input: prop_types68.default.elementType,
      Root: prop_types68.default.elementType
    }),
    componentsProps: prop_types68.default.shape({
      input: prop_types68.default.object,
      root: prop_types68.default.object
    }),
    defaultValue: prop_types68.default.any,
    disabled: prop_types68.default.bool,
    disableUnderline: prop_types68.default.bool,
    endAdornment: prop_types68.default.node,
    error: prop_types68.default.bool,
    fullWidth: prop_types68.default.bool,
    hiddenLabel: prop_types68.default.bool,
    id: prop_types68.default.string,
    inputComponent: prop_types68.default.elementType,
    inputProps: prop_types68.default.object,
    inputRef: refType_default,
    margin: prop_types68.default.oneOf(["dense", "none"]),
    maxRows: prop_types68.default.oneOfType([prop_types68.default.number, prop_types68.default.string]),
    minRows: prop_types68.default.oneOfType([prop_types68.default.number, prop_types68.default.string]),
    multiline: prop_types68.default.bool,
    name: prop_types68.default.string,
    onChange: prop_types68.default.func,
    placeholder: prop_types68.default.string,
    readOnly: prop_types68.default.bool,
    required: prop_types68.default.bool,
    rows: prop_types68.default.oneOfType([prop_types68.default.number, prop_types68.default.string]),
    slotProps: prop_types68.default.shape({
      input: prop_types68.default.object,
      root: prop_types68.default.object
    }),
    slots: prop_types68.default.shape({
      input: prop_types68.default.elementType,
      root: prop_types68.default.elementType
    }),
    startAdornment: prop_types68.default.node,
    sx: prop_types68.default.oneOfType([prop_types68.default.arrayOf(prop_types68.default.oneOfType([prop_types68.default.func, prop_types68.default.object, prop_types68.default.bool])), prop_types68.default.func, prop_types68.default.object]),
    type: prop_types68.default.string,
    value: prop_types68.default.any
  };
  FilledInput.muiName = "Input";
  const FilledInput_default = FilledInput;

  // node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass2("MuiFormControl", slot);
  }
  const formControlClasses5 = generateUtilityClasses2("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // node_modules/@mui/material/FormControl/FormControl.js
  const React106 = __toModule(require_react());
  const prop_types69 = __toModule(require_prop_types2());
  const jsx_runtime96 = __toModule(require_jsx_runtime());
  const _excluded64 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  const useUtilityClasses57 = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses2(slots, getFormControlUtilityClasses, classes);
  };
  const FormControlRoot = styled_default("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles30) => {
      return _extends({}, styles30.root, styles30[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles30.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  const FormControl5 = React106.forwardRef(function FormControl11(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className: className3,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses57(ownerState);
    const [adornedStart, setAdornedStart] = React106.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React106.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React106.useState(() => {
      let initialFilled = false;
      if (children) {
        React106.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React106.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React106.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React106.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return jsx_runtime96.jsx(FormControlContext_default2.Provider, {
      value: childContext,
      children: jsx_runtime96.jsx(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className3),
        ref
      }, other, {
        children
      }))
    });
  });
  FormControl5.propTypes = {
    children: prop_types69.default.node,
    classes: prop_types69.default.object,
    className: prop_types69.default.string,
    color: prop_types69.default.oneOfType([prop_types69.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), prop_types69.default.string]),
    component: prop_types69.default.elementType,
    disabled: prop_types69.default.bool,
    error: prop_types69.default.bool,
    focused: prop_types69.default.bool,
    fullWidth: prop_types69.default.bool,
    hiddenLabel: prop_types69.default.bool,
    margin: prop_types69.default.oneOf(["dense", "none", "normal"]),
    required: prop_types69.default.bool,
    size: prop_types69.default.oneOfType([prop_types69.default.oneOf(["medium", "small"]), prop_types69.default.string]),
    sx: prop_types69.default.oneOfType([prop_types69.default.arrayOf(prop_types69.default.oneOfType([prop_types69.default.func, prop_types69.default.object, prop_types69.default.bool])), prop_types69.default.func, prop_types69.default.object]),
    variant: prop_types69.default.oneOf(["filled", "outlined", "standard"])
  };
  const FormControl_default2 = FormControl5;

  // node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass2("MuiFormControlLabel", slot);
  }
  const formControlLabelClasses2 = generateUtilityClasses2("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
  const formControlLabelClasses_default = formControlLabelClasses2;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  const React109 = __toModule(require_react());
  const prop_types70 = __toModule(require_prop_types2());
  const jsx_runtime97 = __toModule(require_jsx_runtime());
  const jsx_runtime98 = __toModule(require_jsx_runtime());
  const _excluded65 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
  const useUtilityClasses58 = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
      label: ["label", disabled && "disabled"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses2(slots, getFormControlLabelUtilityClasses, classes);
  };
  const FormControlLabelRoot = styled_default("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles30.label
      }, styles30.root, styles30[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }
  }));
  const AsteriskComponent = styled_default("span", {
    name: "MuiFormControlLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles30) => styles30.asterisk
  })(({
    theme
  }) => ({
    [`&.${formControlLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const FormControlLabel = React109.forwardRef(function FormControlLabel5(inProps, ref) {
    var _ref, _slotProps$typography;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className: className3,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end",
      required: requiredProp,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
    const muiFormControl = useFormControl2();
    const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
    const required = requiredProp != null ? requiredProp : control.props.required;
    const controlProps = {
      disabled,
      required
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      disabled,
      labelPlacement,
      required,
      error: fcs.error
    });
    const classes = useUtilityClasses58(ownerState);
    const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = jsx_runtime97.jsx(Typography_default, _extends({
        component: "span"
      }, typographySlotProps, {
        className: clsx_m_default(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
        children: label
      }));
    }
    return jsx_runtime98.jsxs(FormControlLabelRoot, _extends({
      className: clsx_m_default(classes.root, className3),
      ownerState,
      ref
    }, other, {
      children: [React109.cloneElement(control, controlProps), label, required && jsx_runtime98.jsxs(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: [" ", "*"]
      })]
    }));
  });
  FormControlLabel.propTypes = {
    checked: prop_types70.default.bool,
    classes: prop_types70.default.object,
    className: prop_types70.default.string,
    componentsProps: prop_types70.default.shape({
      typography: prop_types70.default.object
    }),
    control: prop_types70.default.element.isRequired,
    disabled: prop_types70.default.bool,
    disableTypography: prop_types70.default.bool,
    inputRef: refType_default,
    label: prop_types70.default.node,
    labelPlacement: prop_types70.default.oneOf(["bottom", "end", "start", "top"]),
    name: prop_types70.default.string,
    onChange: prop_types70.default.func,
    required: prop_types70.default.bool,
    slotProps: prop_types70.default.shape({
      typography: prop_types70.default.object
    }),
    sx: prop_types70.default.oneOfType([prop_types70.default.arrayOf(prop_types70.default.oneOfType([prop_types70.default.func, prop_types70.default.object, prop_types70.default.bool])), prop_types70.default.func, prop_types70.default.object]),
    value: prop_types70.default.any
  };
  const FormControlLabel_default = FormControlLabel;

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass2("MuiFormHelperText", slot);
  }
  const formHelperTextClasses2 = generateUtilityClasses2("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  const formHelperTextClasses_default = formHelperTextClasses2;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  const React111 = __toModule(require_react());
  const prop_types72 = __toModule(require_prop_types2());
  const jsx_runtime100 = __toModule(require_jsx_runtime());
  var _span5;
  const _excluded67 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  const useUtilityClasses60 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses2(slots, getFormHelperTextUtilityClasses, classes);
  };
  const FormHelperTextRoot = styled_default("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.size && styles30[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles30.contained, ownerState.filled && styles30.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  const FormHelperText = React111.forwardRef(function FormHelperText5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className: className3,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
    const muiFormControl = useFormControl2();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses60(ownerState);
    return jsx_runtime100.jsx(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className3),
      ref
    }, other, {
      children: children === " " ? _span5 || (_span5 = jsx_runtime100.jsx("span", {
        className: "notranslate",
        children: "​"
      })) : children
    }));
  });
  FormHelperText.propTypes = {
    children: prop_types72.default.node,
    classes: prop_types72.default.object,
    className: prop_types72.default.string,
    component: prop_types72.default.elementType,
    disabled: prop_types72.default.bool,
    error: prop_types72.default.bool,
    filled: prop_types72.default.bool,
    focused: prop_types72.default.bool,
    margin: prop_types72.default.oneOf(["dense"]),
    required: prop_types72.default.bool,
    sx: prop_types72.default.oneOfType([prop_types72.default.arrayOf(prop_types72.default.oneOfType([prop_types72.default.func, prop_types72.default.object, prop_types72.default.bool])), prop_types72.default.func, prop_types72.default.object]),
    variant: prop_types72.default.oneOfType([prop_types72.default.oneOf(["filled", "outlined", "standard"]), prop_types72.default.string])
  };
  const FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass2("MuiFormLabel", slot);
  }
  const formLabelClasses2 = generateUtilityClasses2("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  const formLabelClasses_default = formLabelClasses2;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  const React112 = __toModule(require_react());
  const prop_types73 = __toModule(require_prop_types2());
  const jsx_runtime101 = __toModule(require_jsx_runtime());
  const _excluded68 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  const useUtilityClasses61 = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses2(slots, getFormLabelUtilityClasses, classes);
  };
  const FormLabelRoot = styled_default("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles30) => {
      return _extends({}, styles30.root, ownerState.color === "secondary" && styles30.colorSecondary, ownerState.filled && styles30.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const AsteriskComponent2 = styled_default("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles30) => styles30.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  const FormLabel = React112.forwardRef(function FormLabel5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className: className3,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
    const muiFormControl = useFormControl2();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses61(ownerState);
    return jsx_runtime101.jsxs(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className3),
      ref
    }, other, {
      children: [children, fcs.required && jsx_runtime101.jsxs(AsteriskComponent2, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: [" ", "*"]
      })]
    }));
  });
  FormLabel.propTypes = {
    children: prop_types73.default.node,
    classes: prop_types73.default.object,
    className: prop_types73.default.string,
    color: prop_types73.default.oneOfType([prop_types73.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), prop_types73.default.string]),
    component: prop_types73.default.elementType,
    disabled: prop_types73.default.bool,
    error: prop_types73.default.bool,
    filled: prop_types73.default.bool,
    focused: prop_types73.default.bool,
    required: prop_types73.default.bool,
    sx: prop_types73.default.oneOfType([prop_types73.default.arrayOf(prop_types73.default.oneOfType([prop_types73.default.func, prop_types73.default.object, prop_types73.default.bool])), prop_types73.default.func, prop_types73.default.object])
  };
  const FormLabel_default = FormLabel;

  // node_modules/@mui/material/Grow/Grow.js
  const React116 = __toModule(require_react());
  const prop_types76 = __toModule(require_prop_types2());
  const jsx_runtime104 = __toModule(require_jsx_runtime());
  const _excluded70 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  const styles5 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  const isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  const Grow = React116.forwardRef(function Grow8(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style16,
      timeout = "auto",
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
    const timer = React116.useRef();
    const autoTimeout = React116.useRef();
    const theme = useTheme3();
    const nodeRef = React116.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      reflow(node);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style16,
        timeout,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style16,
        timeout,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node.style.opacity = 0;
      node.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next) => {
      if (timeout === "auto") {
        timer.current = setTimeout(next, autoTimeout.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next);
      }
    };
    React116.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return jsx_runtime104.jsx(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout === "auto" ? null : timeout
    }, other, {
      children: (state, childProps) => {
        return React116.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles5[state], style16, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  Grow.propTypes = {
    addEndListener: prop_types76.default.func,
    appear: prop_types76.default.bool,
    children: elementAcceptingRef_default.isRequired,
    easing: prop_types76.default.oneOfType([prop_types76.default.shape({
      enter: prop_types76.default.string,
      exit: prop_types76.default.string
    }), prop_types76.default.string]),
    in: prop_types76.default.bool,
    onEnter: prop_types76.default.func,
    onEntered: prop_types76.default.func,
    onEntering: prop_types76.default.func,
    onExit: prop_types76.default.func,
    onExited: prop_types76.default.func,
    onExiting: prop_types76.default.func,
    style: prop_types76.default.object,
    timeout: prop_types76.default.oneOfType([prop_types76.default.oneOf(["auto"]), prop_types76.default.number, prop_types76.default.shape({
      appear: prop_types76.default.number,
      enter: prop_types76.default.number,
      exit: prop_types76.default.number
    })])
  };
  Grow.muiSupportAuto = true;
  const Grow_default = Grow;

  // node_modules/@mui/material/Input/Input.js
  const React127 = __toModule(require_react());
  const prop_types86 = __toModule(require_prop_types2());
  const jsx_runtime115 = __toModule(require_jsx_runtime());
  const _excluded79 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  const useUtilityClasses69 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses2(slots, getInputUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  const InputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles30), !ownerState.disableUnderline && styles30.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
      },
      [`&.${inputClasses_default2.focused}:after`]: {
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default2.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
      },
      [`&:hover:not(.${inputClasses_default2.disabled}, .${inputClasses_default2.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default2.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  const InputInput = styled_default(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  const Input4 = React127.forwardRef(function Input10(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components: components3 = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
    const classes = useUtilityClasses69(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components3.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components3.Input) != null ? _ref2 : InputInput;
    return jsx_runtime115.jsx(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  Input4.propTypes = {
    autoComplete: prop_types86.default.string,
    autoFocus: prop_types86.default.bool,
    classes: prop_types86.default.object,
    color: prop_types86.default.oneOfType([prop_types86.default.oneOf(["primary", "secondary"]), prop_types86.default.string]),
    components: prop_types86.default.shape({
      Input: prop_types86.default.elementType,
      Root: prop_types86.default.elementType
    }),
    componentsProps: prop_types86.default.shape({
      input: prop_types86.default.object,
      root: prop_types86.default.object
    }),
    defaultValue: prop_types86.default.any,
    disabled: prop_types86.default.bool,
    disableUnderline: prop_types86.default.bool,
    endAdornment: prop_types86.default.node,
    error: prop_types86.default.bool,
    fullWidth: prop_types86.default.bool,
    id: prop_types86.default.string,
    inputComponent: prop_types86.default.elementType,
    inputProps: prop_types86.default.object,
    inputRef: refType_default,
    margin: prop_types86.default.oneOf(["dense", "none"]),
    maxRows: prop_types86.default.oneOfType([prop_types86.default.number, prop_types86.default.string]),
    minRows: prop_types86.default.oneOfType([prop_types86.default.number, prop_types86.default.string]),
    multiline: prop_types86.default.bool,
    name: prop_types86.default.string,
    onChange: prop_types86.default.func,
    placeholder: prop_types86.default.string,
    readOnly: prop_types86.default.bool,
    required: prop_types86.default.bool,
    rows: prop_types86.default.oneOfType([prop_types86.default.number, prop_types86.default.string]),
    slotProps: prop_types86.default.shape({
      input: prop_types86.default.object,
      root: prop_types86.default.object
    }),
    slots: prop_types86.default.shape({
      input: prop_types86.default.elementType,
      root: prop_types86.default.elementType
    }),
    startAdornment: prop_types86.default.node,
    sx: prop_types86.default.oneOfType([prop_types86.default.arrayOf(prop_types86.default.oneOfType([prop_types86.default.func, prop_types86.default.object, prop_types86.default.bool])), prop_types86.default.func, prop_types86.default.object]),
    type: prop_types86.default.string,
    value: prop_types86.default.any
  };
  Input4.muiName = "Input";
  const Input_default2 = Input4;

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass2("MuiInputLabel", slot);
  }
  const inputLabelClasses3 = generateUtilityClasses2("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // node_modules/@mui/material/InputLabel/InputLabel.js
  const React130 = __toModule(require_react());
  const prop_types89 = __toModule(require_prop_types2());
  const jsx_runtime120 = __toModule(require_jsx_runtime());
  const _excluded82 = ["disableAnimation", "margin", "shrink", "variant", "className"];
  const useUtilityClasses72 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses2(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  const InputLabelRoot = styled_default(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles30.asterisk
      }, styles30.root, ownerState.formControl && styles30.formControl, ownerState.size === "small" && styles30.sizeSmall, ownerState.shrink && styles30.shrink, !ownerState.disableAnimation && styles30.animated, styles30[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  const InputLabel = React130.forwardRef(function InputLabel6(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
    const muiFormControl = useFormControl2();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required
    });
    const classes = useUtilityClasses72(ownerState);
    return jsx_runtime120.jsx(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx_m_default(classes.root, className3)
    }, other, {
      classes
    }));
  });
  InputLabel.propTypes = {
    children: prop_types89.default.node,
    classes: prop_types89.default.object,
    className: prop_types89.default.string,
    color: prop_types89.default.oneOfType([prop_types89.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), prop_types89.default.string]),
    disableAnimation: prop_types89.default.bool,
    disabled: prop_types89.default.bool,
    error: prop_types89.default.bool,
    focused: prop_types89.default.bool,
    margin: prop_types89.default.oneOf(["dense"]),
    required: prop_types89.default.bool,
    shrink: prop_types89.default.bool,
    size: prop_types89.default.oneOfType([prop_types89.default.oneOf(["normal", "small"]), prop_types89.default.string]),
    sx: prop_types89.default.oneOfType([prop_types89.default.arrayOf(prop_types89.default.oneOfType([prop_types89.default.func, prop_types89.default.object, prop_types89.default.bool])), prop_types89.default.func, prop_types89.default.object]),
    variant: prop_types89.default.oneOf(["filled", "outlined", "standard"])
  };
  const InputLabel_default = InputLabel;

  // node_modules/@mui/material/List/ListContext.js
  const React134 = __toModule(require_react());
  const ListContext7 = React134.createContext({});
  if (true) {
    ListContext7.displayName = "ListContext";
  }
  const ListContext_default = ListContext7;

  // node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass2("MuiList", slot);
  }
  const listClasses3 = generateUtilityClasses2("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/List/List.js
  const React133 = __toModule(require_react());
  const prop_types92 = __toModule(require_prop_types2());
  const jsx_runtime124 = __toModule(require_jsx_runtime());
  const jsx_runtime125 = __toModule(require_jsx_runtime());
  const _excluded85 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  const useUtilityClasses75 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses2(slots, getListUtilityClass, classes);
  };
  const ListRoot = styled_default("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, !ownerState.disablePadding && styles30.padding, ownerState.dense && styles30.dense, ownerState.subheader && styles30.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  const List = React133.forwardRef(function List5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className: className3,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded85);
    const context = React133.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses75(ownerState);
    return jsx_runtime125.jsx(ListContext_default.Provider, {
      value: context,
      children: jsx_runtime124.jsxs(ListRoot, _extends({
        as: component,
        className: clsx_m_default(classes.root, className3),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  List.propTypes = {
    children: prop_types92.default.node,
    classes: prop_types92.default.object,
    className: prop_types92.default.string,
    component: prop_types92.default.elementType,
    dense: prop_types92.default.bool,
    disablePadding: prop_types92.default.bool,
    subheader: prop_types92.default.node,
    sx: prop_types92.default.oneOfType([prop_types92.default.arrayOf(prop_types92.default.oneOfType([prop_types92.default.func, prop_types92.default.object, prop_types92.default.bool])), prop_types92.default.func, prop_types92.default.object])
  };
  const List_default = List;

  // node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  function getListItemIconUtilityClass(slot) {
    return generateUtilityClass2("MuiListItemIcon", slot);
  }
  const listItemIconClasses3 = generateUtilityClasses2("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  const listItemIconClasses_default = listItemIconClasses3;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  const React138 = __toModule(require_react());
  const prop_types96 = __toModule(require_prop_types2());
  const jsx_runtime130 = __toModule(require_jsx_runtime());
  const _excluded89 = ["className"];
  const useUtilityClasses79 = (ownerState) => {
    const {
      alignItems: alignItems2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems2 === "flex-start" && "alignItemsFlexStart"]
    };
    return composeClasses2(slots, getListItemIconUtilityClass, classes);
  };
  const ListItemIconRoot = styled_default("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.alignItems === "flex-start" && styles30.alignItemsFlexStart];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: (theme.vars || theme).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  const ListItemIcon = React138.forwardRef(function ListItemIcon11(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
    const context = React138.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses79(ownerState);
    return jsx_runtime130.jsx(ListItemIconRoot, _extends({
      className: clsx_m_default(classes.root, className3),
      ownerState,
      ref
    }, other));
  });
  ListItemIcon.propTypes = {
    children: prop_types96.default.node,
    classes: prop_types96.default.object,
    className: prop_types96.default.string,
    sx: prop_types96.default.oneOfType([prop_types96.default.arrayOf(prop_types96.default.oneOfType([prop_types96.default.func, prop_types96.default.object, prop_types96.default.bool])), prop_types96.default.func, prop_types96.default.object])
  };
  const ListItemIcon_default = ListItemIcon;

  // node_modules/@mui/material/ListItemText/listItemTextClasses.js
  function getListItemTextUtilityClass(slot) {
    return generateUtilityClass2("MuiListItemText", slot);
  }
  const listItemTextClasses3 = generateUtilityClasses2("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  const listItemTextClasses_default = listItemTextClasses3;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  const React140 = __toModule(require_react());
  const prop_types98 = __toModule(require_prop_types2());
  const jsx_runtime132 = __toModule(require_jsx_runtime());
  const jsx_runtime133 = __toModule(require_jsx_runtime());
  const _excluded91 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  const useUtilityClasses81 = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return composeClasses2(slots, getListItemTextUtilityClass, classes);
  };
  const ListItemTextRoot = styled_default("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles30.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles30.secondary
      }, styles30.root, ownerState.inset && styles30.inset, ownerState.primary && ownerState.secondary && styles30.multiline, ownerState.dense && styles30.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  const ListItemText = React140.forwardRef(function ListItemText9(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className: className3,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
    const {
      dense
    } = React140.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes = useUtilityClasses81(ownerState);
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = jsx_runtime132.jsx(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = jsx_runtime132.jsx(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return jsx_runtime133.jsxs(ListItemTextRoot, _extends({
      className: clsx_m_default(classes.root, className3),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  ListItemText.propTypes = {
    children: prop_types98.default.node,
    classes: prop_types98.default.object,
    className: prop_types98.default.string,
    disableTypography: prop_types98.default.bool,
    inset: prop_types98.default.bool,
    primary: prop_types98.default.node,
    primaryTypographyProps: prop_types98.default.object,
    secondary: prop_types98.default.node,
    secondaryTypographyProps: prop_types98.default.object,
    sx: prop_types98.default.oneOfType([prop_types98.default.arrayOf(prop_types98.default.oneOfType([prop_types98.default.func, prop_types98.default.object, prop_types98.default.bool])), prop_types98.default.func, prop_types98.default.object])
  };
  const ListItemText_default = ListItemText;

  // node_modules/@mui/material/utils/getScrollbarSize.js
  const getScrollbarSize_default = getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  const React144 = __toModule(require_react());
  const react_is7 = __toModule(require_react_is3());
  const prop_types102 = __toModule(require_prop_types2());
  const jsx_runtime137 = __toModule(require_jsx_runtime());
  const _excluded95 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches2(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches2(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  const MenuList2 = React144.forwardRef(function MenuList9(props, ref) {
    const {
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className: className3,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
    const listRef = React144.useRef(null);
    const textCriteriaRef = React144.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React144.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown3 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches2(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React144.Children.forEach(children, (child, index) => {
      if (!React144.isValidElement(child)) {
        return;
      }
      if (true) {
        if (react_is7.isFragment(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
      if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React144.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return React144.cloneElement(child, newChildProps);
      }
      return child;
    });
    return jsx_runtime137.jsx(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className: className3,
      onKeyDown: handleKeyDown3,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  MenuList2.propTypes = {
    autoFocus: prop_types102.default.bool,
    autoFocusItem: prop_types102.default.bool,
    children: prop_types102.default.node,
    className: prop_types102.default.string,
    disabledItemsFocusable: prop_types102.default.bool,
    disableListWrap: prop_types102.default.bool,
    onKeyDown: prop_types102.default.func,
    variant: prop_types102.default.oneOf(["menu", "selectedMenu"])
  };
  const MenuList_default = MenuList2;

  // node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass2("MuiPopover", slot);
  }
  const popoverClasses3 = generateUtilityClasses2("MuiPopover", ["root", "paper"]);

  // node_modules/@mui/material/Popover/Popover.js
  const React154 = __toModule(require_react());
  const prop_types112 = __toModule(require_prop_types2());
  const jsx_runtime151 = __toModule(require_jsx_runtime());
  const _excluded105 = ["onEntering"];
  const _excluded214 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
  function getOffsetTop(rect, vertical) {
    let offset4 = 0;
    if (typeof vertical === "number") {
      offset4 = vertical;
    } else if (vertical === "center") {
      offset4 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset4 = rect.height;
    }
    return offset4;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset4 = 0;
    if (typeof horizontal === "number") {
      offset4 = horizontal;
    } else if (horizontal === "center") {
      offset4 = rect.width / 2;
    } else if (horizontal === "right") {
      offset4 = rect.width;
    }
    return offset4;
  }
  function getTransformOriginValue(transformOrigin2) {
    return [transformOrigin2.horizontal, transformOrigin2.vertical].map((n2) => typeof n2 === "number" ? `${n2}px` : n2).join(" ");
  }
  function resolveAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  const useUtilityClasses92 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses2(slots, getPopoverUtilityClass, classes);
  };
  const PopoverRoot = styled_default(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })({});
  const PopoverPaper = styled_default(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles30) => styles30.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    outline: 0
  });
  const Popover2 = React154.forwardRef(function Popover5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className: className3,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps = {},
      transformOrigin: transformOrigin2 = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded105), other = _objectWithoutPropertiesLoose(props, _excluded214);
    const paperRef = React154.useRef();
    const handlePaperRef = useForkRef_default(paperRef, PaperProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      PaperProps,
      transformOrigin: transformOrigin2,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses92(ownerState);
    const getAnchorOffset = React154.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl2(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React154.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin2.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin2.horizontal)
      };
    }, [transformOrigin2.horizontal, transformOrigin2.vertical]);
    const getPositioningStyle = React154.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top3 = anchorOffset.top - elemTransformOrigin.vertical;
      let left3 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom3 = top3 + elemRect.height;
      const right3 = left3 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl2(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top3 < marginThreshold) {
        const diff = top3 - marginThreshold;
        top3 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom3 > heightThreshold) {
        const diff = bottom3 - heightThreshold;
        top3 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left3 < marginThreshold) {
        const diff = left3 - marginThreshold;
        left3 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right3 > widthThreshold) {
        const diff = right3 - widthThreshold;
        left3 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top3)}px`,
        left: `${Math.round(left3)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React154.useState(open);
    const setPositioningStyles = React154.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React154.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React154.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React154.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl2(anchorEl)).body : void 0);
    return jsx_runtime151.jsx(PopoverRoot, _extends({
      BackdropProps: {
        invisible: true
      },
      className: clsx_m_default(classes.root, className3),
      container,
      open,
      ref,
      ownerState
    }, other, {
      children: jsx_runtime151.jsx(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: jsx_runtime151.jsx(PopoverPaper, _extends({
          elevation
        }, PaperProps, {
          ref: handlePaperRef,
          className: clsx_m_default(classes.paper, PaperProps.className)
        }, isPositioned ? void 0 : {
          style: _extends({}, PaperProps.style, {
            opacity: 0
          })
        }, {
          ownerState,
          children
        }))
      }))
    }));
  });
  Popover2.propTypes = {
    action: refType_default,
    anchorEl: chainPropTypes(prop_types112.default.oneOfType([HTMLElementType, prop_types112.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    anchorOrigin: prop_types112.default.shape({
      horizontal: prop_types112.default.oneOfType([prop_types112.default.oneOf(["center", "left", "right"]), prop_types112.default.number]).isRequired,
      vertical: prop_types112.default.oneOfType([prop_types112.default.oneOf(["bottom", "center", "top"]), prop_types112.default.number]).isRequired
    }),
    anchorPosition: prop_types112.default.shape({
      left: prop_types112.default.number.isRequired,
      top: prop_types112.default.number.isRequired
    }),
    anchorReference: prop_types112.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    children: prop_types112.default.node,
    classes: prop_types112.default.object,
    className: prop_types112.default.string,
    container: prop_types112.default.oneOfType([HTMLElementType, prop_types112.default.func]),
    elevation: integerPropType_default,
    marginThreshold: prop_types112.default.number,
    onClose: prop_types112.default.func,
    open: prop_types112.default.bool.isRequired,
    PaperProps: prop_types112.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    sx: prop_types112.default.oneOfType([prop_types112.default.arrayOf(prop_types112.default.oneOfType([prop_types112.default.func, prop_types112.default.object, prop_types112.default.bool])), prop_types112.default.func, prop_types112.default.object]),
    transformOrigin: prop_types112.default.shape({
      horizontal: prop_types112.default.oneOfType([prop_types112.default.oneOf(["center", "left", "right"]), prop_types112.default.number]).isRequired,
      vertical: prop_types112.default.oneOfType([prop_types112.default.oneOf(["bottom", "center", "top"]), prop_types112.default.number]).isRequired
    }),
    TransitionComponent: prop_types112.default.elementType,
    transitionDuration: prop_types112.default.oneOfType([prop_types112.default.oneOf(["auto"]), prop_types112.default.number, prop_types112.default.shape({
      appear: prop_types112.default.number,
      enter: prop_types112.default.number,
      exit: prop_types112.default.number
    })]),
    TransitionProps: prop_types112.default.object
  };
  const Popover_default = Popover2;

  // node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass2(slot) {
    return generateUtilityClass2("MuiMenu", slot);
  }
  const menuClasses6 = generateUtilityClasses2("MuiMenu", ["root", "paper", "list"]);

  // node_modules/@mui/material/Menu/Menu.js
  const React142 = __toModule(require_react());
  const react_is6 = __toModule(require_react_is3());
  const prop_types100 = __toModule(require_prop_types2());
  const jsx_runtime135 = __toModule(require_jsx_runtime());
  const _excluded93 = ["onEntering"];
  const _excluded212 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
  const RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  const LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  const useUtilityClasses83 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses2(slots, getMenuUtilityClass2, classes);
  };
  const MenuRoot = styled_default(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })({});
  const MenuPaper = styled_default(Paper_default, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles30) => styles30.paper
  })({
    maxHeight: "calc(100% - 96px)",
    WebkitOverflowScrolling: "touch"
  });
  const MenuMenuList = styled_default(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles30) => styles30.list
  })({
    outline: 0
  });
  const Menu4 = React142.forwardRef(function Menu8(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu"
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded93), other = _objectWithoutPropertiesLoose(props, _excluded212);
    const theme = useTheme3();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses83(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React142.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React142.Children.map(children, (child, index) => {
      if (!React142.isValidElement(child)) {
        return;
      }
      if (true) {
        if (react_is6.isFragment(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    return jsx_runtime135.jsx(MenuRoot, _extends({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({
        as: MenuPaper
      }, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      className: classes.root,
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: jsx_runtime135.jsx(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_m_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  Menu4.propTypes = {
    anchorEl: prop_types100.default.oneOfType([HTMLElementType, prop_types100.default.func]),
    autoFocus: prop_types100.default.bool,
    children: prop_types100.default.node,
    classes: prop_types100.default.object,
    disableAutoFocusItem: prop_types100.default.bool,
    MenuListProps: prop_types100.default.object,
    onClose: prop_types100.default.func,
    open: prop_types100.default.bool.isRequired,
    PaperProps: prop_types100.default.object,
    PopoverClasses: prop_types100.default.object,
    sx: prop_types100.default.oneOfType([prop_types100.default.arrayOf(prop_types100.default.oneOfType([prop_types100.default.func, prop_types100.default.object, prop_types100.default.bool])), prop_types100.default.func, prop_types100.default.object]),
    transitionDuration: prop_types100.default.oneOfType([prop_types100.default.oneOf(["auto"]), prop_types100.default.number, prop_types100.default.shape({
      appear: prop_types100.default.number,
      enter: prop_types100.default.number,
      exit: prop_types100.default.number
    })]),
    TransitionProps: prop_types100.default.object,
    variant: prop_types100.default.oneOf(["menu", "selectedMenu"])
  };
  const Menu_default2 = Menu4;

  // node_modules/@mui/material/MenuItem/menuItemClasses.js
  function getMenuItemUtilityClass2(slot) {
    return generateUtilityClass2("MuiMenuItem", slot);
  }
  const menuItemClasses6 = generateUtilityClasses2("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  const menuItemClasses_default2 = menuItemClasses6;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  const React143 = __toModule(require_react());
  const prop_types101 = __toModule(require_prop_types2());
  const jsx_runtime136 = __toModule(require_jsx_runtime());
  const _excluded94 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
  const overridesResolver6 = (props, styles30) => {
    const {
      ownerState
    } = props;
    return [styles30.root, ownerState.dense && styles30.dense, ownerState.divider && styles30.divider, !ownerState.disableGutters && styles30.gutters];
  };
  const useUtilityClasses84 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = composeClasses2(slots, getMenuItemUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  const MenuItemRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver: overridesResolver6
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default2.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default2.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default2.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default2.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${menuItemClasses_default2.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses_default.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  const MenuItem4 = React143.forwardRef(function MenuItem16(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
    const context = React143.useContext(ListContext_default);
    const childContext = React143.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React143.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes = useUtilityClasses84(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return jsx_runtime136.jsx(ListContext_default.Provider, {
      value: childContext,
      children: jsx_runtime136.jsx(MenuItemRoot, _extends({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
        className: clsx_m_default(classes.root, className3)
      }, other, {
        ownerState,
        classes
      }))
    });
  });
  MenuItem4.propTypes = {
    autoFocus: prop_types101.default.bool,
    children: prop_types101.default.node,
    classes: prop_types101.default.object,
    className: prop_types101.default.string,
    component: prop_types101.default.elementType,
    dense: prop_types101.default.bool,
    disabled: prop_types101.default.bool,
    disableGutters: prop_types101.default.bool,
    divider: prop_types101.default.bool,
    focusVisibleClassName: prop_types101.default.string,
    role: prop_types101.default.string,
    selected: prop_types101.default.bool,
    sx: prop_types101.default.oneOfType([prop_types101.default.arrayOf(prop_types101.default.oneOfType([prop_types101.default.func, prop_types101.default.object, prop_types101.default.bool])), prop_types101.default.func, prop_types101.default.object]),
    tabIndex: prop_types101.default.number
  };
  const MenuItem_default = MenuItem4;

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass2("MuiNativeSelect", slot);
  }
  const nativeSelectClasses4 = generateUtilityClasses2("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  const nativeSelectClasses_default = nativeSelectClasses4;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  const React148 = __toModule(require_react());
  const prop_types106 = __toModule(require_prop_types2());
  const jsx_runtime142 = __toModule(require_jsx_runtime());
  const jsx_runtime143 = __toModule(require_jsx_runtime());
  const _excluded99 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  const useUtilityClasses87 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses2(slots, getNativeSelectUtilityClasses, classes);
  };
  const nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    WebkitAppearance: "none",
    userSelect: "none",
    borderRadius: 0,
    cursor: "pointer",
    "&:focus": _extends({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
    }),
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    "&&&": {
      paddingRight: 24,
      minWidth: 16
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
    },
    "&&&": {
      paddingRight: 32
    }
  });
  const NativeSelectSelect = styled_default("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.select, styles30[ownerState.variant], ownerState.error && styles30.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles30.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  const nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    pointerEvents: "none",
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  const NativeSelectIcon = styled_default("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.icon, ownerState.variant && styles30[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles30.iconOpen];
    }
  })(nativeSelectIconStyles);
  const NativeSelectInput2 = React148.forwardRef(function NativeSelectInput5(props, ref) {
    const {
      className: className3,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded99);
    const ownerState = _extends({}, props, {
      disabled,
      variant,
      error
    });
    const classes = useUtilityClasses87(ownerState);
    return jsx_runtime143.jsxs(React148.Fragment, {
      children: [jsx_runtime142.jsx(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_m_default(classes.select, className3),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : jsx_runtime142.jsx(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  NativeSelectInput2.propTypes = {
    children: prop_types106.default.node,
    classes: prop_types106.default.object,
    className: prop_types106.default.string,
    disabled: prop_types106.default.bool,
    error: prop_types106.default.bool,
    IconComponent: prop_types106.default.elementType.isRequired,
    inputRef: refType_default,
    multiple: prop_types106.default.bool,
    name: prop_types106.default.string,
    onChange: prop_types106.default.func,
    value: prop_types106.default.any,
    variant: prop_types106.default.oneOf(["standard", "outlined", "filled"])
  };
  const NativeSelectInput_default = NativeSelectInput2;

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  const React149 = __toModule(require_react());
  const prop_types107 = __toModule(require_prop_types2());
  const jsx_runtime144 = __toModule(require_jsx_runtime());
  var _span7;
  const _excluded100 = ["children", "classes", "className", "label", "notched"];
  const NotchedOutlineRoot = styled_default("fieldset")({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  const NotchedOutlineLegend = styled_default("legend")(({
    ownerState,
    theme
  }) => _extends({
    float: "unset",
    width: "auto",
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    padding: 0,
    height: 11,
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className: className3,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return jsx_runtime144.jsx(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className: className3,
      ownerState
    }, other, {
      children: jsx_runtime144.jsx(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? jsx_runtime144.jsx("span", {
          children: label
        }) : _span7 || (_span7 = jsx_runtime144.jsx("span", {
          className: "notranslate",
          children: "​"
        }))
      })
    }));
  }
  NotchedOutline.propTypes = {
    children: prop_types107.default.node,
    classes: prop_types107.default.object,
    className: prop_types107.default.string,
    label: prop_types107.default.node,
    notched: prop_types107.default.bool.isRequired,
    style: prop_types107.default.object
  };

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  const React150 = __toModule(require_react());
  const prop_types108 = __toModule(require_prop_types2());
  const jsx_runtime145 = __toModule(require_jsx_runtime());
  const jsx_runtime146 = __toModule(require_jsx_runtime());
  const _excluded101 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  const useUtilityClasses88 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses2(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  const OutlinedInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  const NotchedOutlineRoot2 = styled_default(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles30) => styles30.notchedOutline
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  });
  const OutlinedInputInput = styled_default(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  const OutlinedInput = React150.forwardRef(function OutlinedInput6(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components: components3 = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
    const classes = useUtilityClasses88(props);
    const muiFormControl = useFormControl2();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["required"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components3.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components3.Input) != null ? _ref2 : OutlinedInputInput;
    return jsx_runtime146.jsx(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => jsx_runtime146.jsx(NotchedOutlineRoot2, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = jsx_runtime145.jsxs(React150.Fragment, {
          children: [label, " ", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  OutlinedInput.propTypes = {
    autoComplete: prop_types108.default.string,
    autoFocus: prop_types108.default.bool,
    classes: prop_types108.default.object,
    color: prop_types108.default.oneOfType([prop_types108.default.oneOf(["primary", "secondary"]), prop_types108.default.string]),
    components: prop_types108.default.shape({
      Input: prop_types108.default.elementType,
      Root: prop_types108.default.elementType
    }),
    defaultValue: prop_types108.default.any,
    disabled: prop_types108.default.bool,
    endAdornment: prop_types108.default.node,
    error: prop_types108.default.bool,
    fullWidth: prop_types108.default.bool,
    id: prop_types108.default.string,
    inputComponent: prop_types108.default.elementType,
    inputProps: prop_types108.default.object,
    inputRef: refType_default,
    label: prop_types108.default.node,
    margin: prop_types108.default.oneOf(["dense", "none"]),
    maxRows: prop_types108.default.oneOfType([prop_types108.default.number, prop_types108.default.string]),
    minRows: prop_types108.default.oneOfType([prop_types108.default.number, prop_types108.default.string]),
    multiline: prop_types108.default.bool,
    name: prop_types108.default.string,
    notched: prop_types108.default.bool,
    onChange: prop_types108.default.func,
    placeholder: prop_types108.default.string,
    readOnly: prop_types108.default.bool,
    required: prop_types108.default.bool,
    rows: prop_types108.default.oneOfType([prop_types108.default.number, prop_types108.default.string]),
    slots: prop_types108.default.shape({
      input: prop_types108.default.elementType,
      root: prop_types108.default.elementType
    }),
    startAdornment: prop_types108.default.node,
    sx: prop_types108.default.oneOfType([prop_types108.default.arrayOf(prop_types108.default.oneOfType([prop_types108.default.func, prop_types108.default.object, prop_types108.default.bool])), prop_types108.default.func, prop_types108.default.object]),
    type: prop_types108.default.string,
    value: prop_types108.default.any
  };
  OutlinedInput.muiName = "Input";
  const OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/internal/svg-icons/FirstPage.js
  const React220 = __toModule(require_react());
  const jsx_runtime233 = __toModule(require_jsx_runtime());
  const FirstPage_default = createSvgIcon(jsx_runtime233.jsx("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");

  // node_modules/@mui/material/internal/svg-icons/LastPage.js
  const React225 = __toModule(require_react());
  const jsx_runtime238 = __toModule(require_jsx_runtime());
  const LastPage_default = createSvgIcon(jsx_runtime238.jsx("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");

  // node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass2("MuiSelect", slot);
  }
  const selectClasses6 = generateUtilityClasses2("MuiSelect", ["select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  const selectClasses_default2 = selectClasses6;

  // node_modules/@mui/material/Select/SelectInput.js
  const React164 = __toModule(require_react());
  const react_is8 = __toModule(require_react_is3());
  const prop_types120 = __toModule(require_prop_types2());
  const jsx_runtime161 = __toModule(require_jsx_runtime());
  const jsx_runtime162 = __toModule(require_jsx_runtime());
  var _span8;
  const _excluded112 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  const SelectSelect = styled_default("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [
        {
          [`&.${selectClasses_default2.select}`]: styles30.select
        },
        {
          [`&.${selectClasses_default2.select}`]: styles30[ownerState.variant]
        },
        {
          [`&.${selectClasses_default2.error}`]: styles30.error
        },
        {
          [`&.${selectClasses_default2.multiple}`]: styles30.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    [`&.${selectClasses_default2.select}`]: {
      height: "auto",
      minHeight: "1.4375em",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  const SelectIcon = styled_default("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.icon, ownerState.variant && styles30[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles30.iconOpen];
    }
  })(nativeSelectIconStyles);
  const SelectNativeInput = styled_default("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles30) => styles30.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues2(a2, b2) {
    if (typeof b2 === "object" && b2 !== null) {
      return a2 === b2;
    }
    return String(a2) === String(b2);
  }
  function isEmpty2(display3) {
    return display3 == null || typeof display3 === "string" && !display3.trim();
  }
  const useUtilityClasses97 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses2(slots, getSelectUtilityClasses, classes);
  };
  const SelectInput2 = React164.forwardRef(function SelectInput3(props, ref) {
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className: className3,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded112);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React164.useRef(null);
    const displayRef = React164.useRef(null);
    const [displayNode, setDisplayNode] = React164.useState(null);
    const {
      current: isOpenControlled
    } = React164.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React164.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React164.useCallback((node) => {
      displayRef.current = node;
      if (node) {
        setDisplayNode(node);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React164.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React164.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React164.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React164.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React164.Children.toArray(children);
    const handleChange = (event) => {
      const index = childrenArray.map((child2) => child2.props.value).indexOf(event.target.value);
      if (index === -1) {
        return;
      }
      const child = childrenArray[index];
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown3 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur2 = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display3;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display3 = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!React164.isValidElement(child)) {
        return null;
      }
      if (true) {
        if (react_is8.isFragment(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.`);
        }
        selected = value.some((v2) => areEqualValues2(v2, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues2(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return React164.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        "data-value": child.props.value
      });
    });
    if (true) {
      React164.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values3 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values3.filter((x2) => x2 != null).map((x2) => `\`${x2}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display3 = null;
        } else {
          display3 = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display3 = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes = useUtilityClasses97(ownerState);
    return jsx_runtime162.jsxs(React164.Fragment, {
      children: [jsx_runtime161.jsx(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "button",
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown3,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur2,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_m_default(SelectDisplayProps.className, classes.select, className3),
        id: buttonId,
        children: isEmpty2(display3) ? _span8 || (_span8 = jsx_runtime161.jsx("span", {
          className: "notranslate",
          children: "​"
        })) : display3
      })), jsx_runtime161.jsx(SelectNativeInput, _extends({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), jsx_runtime161.jsx(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), jsx_runtime161.jsx(Menu_default2, _extends({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends({}, MenuProps.PaperProps, {
          style: _extends({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        }),
        children: items
      }))]
    });
  });
  SelectInput2.propTypes = {
    "aria-describedby": prop_types120.default.string,
    "aria-label": prop_types120.default.string,
    autoFocus: prop_types120.default.bool,
    autoWidth: prop_types120.default.bool,
    children: prop_types120.default.node,
    classes: prop_types120.default.object,
    className: prop_types120.default.string,
    defaultOpen: prop_types120.default.bool,
    defaultValue: prop_types120.default.any,
    disabled: prop_types120.default.bool,
    displayEmpty: prop_types120.default.bool,
    error: prop_types120.default.bool,
    IconComponent: prop_types120.default.elementType.isRequired,
    inputRef: refType_default,
    labelId: prop_types120.default.string,
    MenuProps: prop_types120.default.object,
    multiple: prop_types120.default.bool,
    name: prop_types120.default.string,
    onBlur: prop_types120.default.func,
    onChange: prop_types120.default.func,
    onClose: prop_types120.default.func,
    onFocus: prop_types120.default.func,
    onOpen: prop_types120.default.func,
    open: prop_types120.default.bool,
    readOnly: prop_types120.default.bool,
    renderValue: prop_types120.default.func,
    SelectDisplayProps: prop_types120.default.object,
    tabIndex: prop_types120.default.oneOfType([prop_types120.default.number, prop_types120.default.string]),
    type: prop_types120.default.any,
    value: prop_types120.default.any,
    variant: prop_types120.default.oneOf(["standard", "outlined", "filled"])
  };
  const SelectInput_default = SelectInput2;

  // node_modules/@mui/material/Select/Select.js
  const React163 = __toModule(require_react());
  const prop_types119 = __toModule(require_prop_types2());
  const jsx_runtime160 = __toModule(require_jsx_runtime());
  const _excluded111 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  const useUtilityClasses96 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  const styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles30) => styles30.root,
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
    slot: "Root"
  };
  const StyledInput = styled_default(Input_default2, styledRootConfig)("");
  const StyledOutlinedInput = styled_default(OutlinedInput_default, styledRootConfig)("");
  const StyledFilledInput = styled_default(FilledInput_default, styledRootConfig)("");
  const Select4 = React163.forwardRef(function Select10(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className: className3,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded111);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl2();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses96(ownerState);
    const InputComponent = input || {
      standard: jsx_runtime160.jsx(StyledInput, {
        ownerState
      }),
      outlined: jsx_runtime160.jsx(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: jsx_runtime160.jsx(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return jsx_runtime160.jsx(React163.Fragment, {
      children: React163.cloneElement(InputComponent, _extends({
        inputComponent,
        inputProps: _extends({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
        }, input ? input.props.inputProps : {})
      }, multiple && native && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx_m_default(InputComponent.props.className, className3)
      }, !input && {
        variant
      }, other))
    });
  });
  Select4.propTypes = {
    autoWidth: prop_types119.default.bool,
    children: prop_types119.default.node,
    classes: prop_types119.default.object,
    className: prop_types119.default.string,
    defaultOpen: prop_types119.default.bool,
    defaultValue: prop_types119.default.any,
    displayEmpty: prop_types119.default.bool,
    IconComponent: prop_types119.default.elementType,
    id: prop_types119.default.string,
    input: prop_types119.default.element,
    inputProps: prop_types119.default.object,
    label: prop_types119.default.node,
    labelId: prop_types119.default.string,
    MenuProps: prop_types119.default.object,
    multiple: prop_types119.default.bool,
    native: prop_types119.default.bool,
    onChange: prop_types119.default.func,
    onClose: prop_types119.default.func,
    onOpen: prop_types119.default.func,
    open: prop_types119.default.bool,
    renderValue: prop_types119.default.func,
    SelectDisplayProps: prop_types119.default.object,
    sx: prop_types119.default.oneOfType([prop_types119.default.arrayOf(prop_types119.default.oneOfType([prop_types119.default.func, prop_types119.default.object, prop_types119.default.bool])), prop_types119.default.func, prop_types119.default.object]),
    value: prop_types119.default.oneOfType([prop_types119.default.oneOf([""]), prop_types119.default.any]),
    variant: prop_types119.default.oneOf(["filled", "outlined", "standard"])
  };
  Select4.muiName = "Select";
  const Select_default = Select4;

  // node_modules/@mui/material/Skeleton/skeletonClasses.js
  function getSkeletonUtilityClass(slot) {
    return generateUtilityClass2("MuiSkeleton", slot);
  }
  const skeletonClasses3 = generateUtilityClasses2("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);

  // node_modules/@mui/material/Skeleton/Skeleton.js
  const React165 = __toModule(require_react());
  const prop_types121 = __toModule(require_prop_types2());
  const jsx_runtime163 = __toModule(require_jsx_runtime());
  const _excluded113 = ["animation", "className", "component", "height", "style", "variant", "width"];
  let _4 = (t2) => t2;
  let _t7;
  let _t24;
  let _t34;
  let _t44;
  const useUtilityClasses98 = (ownerState) => {
    const {
      classes,
      variant,
      animation,
      hasChildren,
      width: width2,
      height: height2
    } = ownerState;
    const slots = {
      root: ["root", variant, animation, hasChildren && "withChildren", hasChildren && !width2 && "fitContent", hasChildren && !height2 && "heightAuto"]
    };
    return composeClasses2(slots, getSkeletonUtilityClass, classes);
  };
  const pulseKeyframe = keyframes(_t7 || (_t7 = _4`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
  const waveKeyframe = keyframes(_t24 || (_t24 = _4`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
  const SkeletonRoot = styled_default("span", {
    name: "MuiSkeleton",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, styles30[ownerState.variant], ownerState.animation !== false && styles30[ownerState.animation], ownerState.hasChildren && styles30.withChildren, ownerState.hasChildren && !ownerState.width && styles30.fitContent, ownerState.hasChildren && !ownerState.height && styles30.heightAuto];
    }
  })(({
    theme,
    ownerState
  }) => {
    const radiusUnit = getUnit(theme.shape.borderRadius) || "px";
    const radiusValue = toUnitless(theme.shape.borderRadius);
    return _extends({
      display: "block",
      backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === "light" ? 0.11 : 0.13),
      height: "1.2em"
    }, ownerState.variant === "text" && {
      marginTop: 0,
      marginBottom: 0,
      height: "auto",
      transformOrigin: "0 55%",
      transform: "scale(1, 0.60)",
      borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
      "&:empty:before": {
        content: '"\\00a0"'
      }
    }, ownerState.variant === "circular" && {
      borderRadius: "50%"
    }, ownerState.variant === "rounded" && {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.hasChildren && {
      "& > *": {
        visibility: "hidden"
      }
    }, ownerState.hasChildren && !ownerState.width && {
      maxWidth: "fit-content"
    }, ownerState.hasChildren && !ownerState.height && {
      height: "auto"
    });
  }, ({
    ownerState
  }) => ownerState.animation === "pulse" && css(_t34 || (_t34 = _4`
      animation: ${0} 1.5s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && css(_t44 || (_t44 = _4`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
  const Skeleton = React165.forwardRef(function Skeleton5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSkeleton"
    });
    const {
      animation = "pulse",
      className: className3,
      component = "span",
      height: height2,
      style: style16,
      variant = "text",
      width: width2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded113);
    const ownerState = _extends({}, props, {
      animation,
      component,
      variant,
      hasChildren: Boolean(other.children)
    });
    const classes = useUtilityClasses98(ownerState);
    return jsx_runtime163.jsx(SkeletonRoot, _extends({
      as: component,
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState
    }, other, {
      style: _extends({
        width: width2,
        height: height2
      }, style16)
    }));
  });
  Skeleton.propTypes = {
    animation: prop_types121.default.oneOf(["pulse", "wave", false]),
    children: prop_types121.default.node,
    classes: prop_types121.default.object,
    className: prop_types121.default.string,
    component: prop_types121.default.elementType,
    height: prop_types121.default.oneOfType([prop_types121.default.number, prop_types121.default.string]),
    style: prop_types121.default.object,
    sx: prop_types121.default.oneOfType([prop_types121.default.arrayOf(prop_types121.default.oneOfType([prop_types121.default.func, prop_types121.default.object, prop_types121.default.bool])), prop_types121.default.func, prop_types121.default.object]),
    variant: prop_types121.default.oneOfType([prop_types121.default.oneOf(["circular", "rectangular", "rounded", "text"]), prop_types121.default.string]),
    width: prop_types121.default.oneOfType([prop_types121.default.number, prop_types121.default.string])
  };
  const Skeleton_default = Skeleton;

  // node_modules/@mui/material/Tooltip/tooltipClasses.js
  function getTooltipUtilityClass(slot) {
    return generateUtilityClass2("MuiTooltip", slot);
  }
  const tooltipClasses3 = generateUtilityClasses2("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  const tooltipClasses_default = tooltipClasses3;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  const React207 = __toModule(require_react());
  const prop_types160 = __toModule(require_prop_types2());
  const jsx_runtime218 = __toModule(require_jsx_runtime());
  const jsx_runtime219 = __toModule(require_jsx_runtime());
  const _excluded150 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  const useUtilityClasses130 = (ownerState) => {
    const {
      classes,
      disableInteractive,
      arrow: arrow4,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ["popper", !disableInteractive && "popperInteractive", arrow4 && "popperArrow"],
      tooltip: ["tooltip", arrow4 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize_default(placement.split("-")[0])}`],
      arrow: ["arrow"]
    };
    return composeClasses2(slots, getTooltipUtilityClass, classes);
  };
  const TooltipPopper = styled_default(Popper_default2, {
    name: "MuiTooltip",
    slot: "Popper",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.popper, !ownerState.disableInteractive && styles30.popperInteractive, ownerState.arrow && styles30.popperArrow, !ownerState.open && styles30.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.tooltip,
    pointerEvents: "none"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !open && {
    pointerEvents: "none"
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses_default.arrow}`]: {
      top: 0,
      marginTop: "-0.71em",
      "&::before": {
        transformOrigin: "0 100%"
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses_default.arrow}`]: {
      bottom: 0,
      marginBottom: "-0.71em",
      "&::before": {
        transformOrigin: "100% 0"
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: "-0.71em"
    } : {
      right: 0,
      marginRight: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "100% 100%"
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: "-0.71em"
    } : {
      left: 0,
      marginLeft: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "0 0"
      }
    })
  }));
  const TooltipTooltip = styled_default("div", {
    name: "MuiTooltip",
    slot: "Tooltip",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.tooltip, ownerState.touch && styles30.touch, ownerState.arrow && styles30.tooltipArrow, styles30[`tooltipPlacement${capitalize_default(ownerState.placement.split("-")[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
    borderRadius: (theme.vars || theme).shape.borderRadius,
    color: (theme.vars || theme).palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: "4px 8px",
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: "break-word",
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: "relative",
    margin: 0
  }, ownerState.touch && {
    padding: "8px 16px",
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: _extends({
      transformOrigin: "right center"
    }, !ownerState.isRtl ? _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    }) : _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: _extends({
      transformOrigin: "left center"
    }, !ownerState.isRtl ? _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    }) : _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: _extends({
      transformOrigin: "center bottom",
      marginBottom: "14px"
    }, ownerState.touch && {
      marginBottom: "24px"
    }),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: _extends({
      transformOrigin: "center top",
      marginTop: "14px"
    }, ownerState.touch && {
      marginTop: "24px"
    })
  }));
  const TooltipArrow = styled_default("span", {
    name: "MuiTooltip",
    slot: "Arrow",
    overridesResolver: (props, styles30) => styles30.arrow
  })(({
    theme
  }) => ({
    overflow: "hidden",
    position: "absolute",
    width: "1em",
    height: "0.71em",
    boxSizing: "border-box",
    color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.9),
    "&::before": {
      content: '""',
      margin: "auto",
      display: "block",
      width: "100%",
      height: "100%",
      backgroundColor: "currentColor",
      transform: "rotate(45deg)"
    }
  }));
  let hystersisOpen = false;
  let hystersisTimer = null;
  let cursorPosition = {
    x: 0,
    y: 0
  };
  function composeEventHandler(handler, eventHandler) {
    return (event) => {
      if (eventHandler) {
        eventHandler(event);
      }
      handler(event);
    };
  }
  const Tooltip2 = React207.forwardRef(function Tooltip6(inProps, ref) {
    var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTooltip"
    });
    const {
      arrow: arrow4 = false,
      children,
      components: components3 = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = "bottom",
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      slotProps = {},
      slots = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow_default,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded150);
    const theme = useTheme3();
    const isRtl = theme.direction === "rtl";
    const [childNode, setChildNode] = React207.useState();
    const [arrowRef, setArrowRef] = React207.useState(null);
    const ignoreNonTouchEvents = React207.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = React207.useRef();
    const enterTimer = React207.useRef();
    const leaveTimer = React207.useRef();
    const touchTimer = React207.useRef();
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    });
    let open = openState;
    if (true) {
      const {
        current: isControlled
      } = React207.useRef(openProp !== void 0);
      React207.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    const id = useId_default(idProp);
    const prevUserSelect = React207.useRef();
    const stopTouchInteraction = React207.useCallback(() => {
      if (prevUserSelect.current !== void 0) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = void 0;
      }
      clearTimeout(touchTimer.current);
    }, []);
    React207.useEffect(() => {
      return () => {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        stopTouchInteraction();
      };
    }, [stopTouchInteraction]);
    const handleOpen = (event) => {
      clearTimeout(hystersisTimer);
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen && !open) {
        onOpen(event);
      }
    };
    const handleClose = useEventCallback_default((event) => {
      clearTimeout(hystersisTimer);
      hystersisTimer = setTimeout(() => {
        hystersisOpen = false;
      }, 800 + leaveDelay);
      setOpenState(false);
      if (onClose && open) {
        onClose(event);
      }
      clearTimeout(closeTimer.current);
      closeTimer.current = setTimeout(() => {
        ignoreNonTouchEvents.current = false;
      }, theme.transitions.duration.shortest);
    });
    const handleEnter = (event) => {
      if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
        return;
      }
      if (childNode) {
        childNode.removeAttribute("title");
      }
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.current = setTimeout(() => {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };
    const handleLeave = (event) => {
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveDelay);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [, setChildIsFocusVisible] = React207.useState(false);
    const handleBlur2 = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleLeave(event);
      }
    };
    const handleFocus = (event) => {
      if (!childNode) {
        setChildNode(event.currentTarget);
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleEnter(event);
      }
    };
    const detectTouchStart = (event) => {
      ignoreNonTouchEvents.current = true;
      const childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    const handleMouseOver = handleEnter;
    const handleMouseLeave = handleLeave;
    const handleTouchStart = (event) => {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect;
      document.body.style.WebkitUserSelect = "none";
      touchTimer.current = setTimeout(() => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleEnter(event);
      }, enterTouchDelay);
    };
    const handleTouchEnd = (event) => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      stopTouchInteraction();
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveTouchDelay);
    };
    React207.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown3(nativeEvent) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          handleClose(nativeEvent);
        }
      }
      document.addEventListener("keydown", handleKeyDown3);
      return () => {
        document.removeEventListener("keydown", handleKeyDown3);
      };
    }, [handleClose, open]);
    const handleRef = useForkRef_default(children.ref, focusVisibleRef, setChildNode, ref);
    if (!title && title !== 0) {
      open = false;
    }
    const popperRef = React207.useRef();
    const handleMouseMove = (event) => {
      const childrenProps2 = children.props;
      if (childrenProps2.onMouseMove) {
        childrenProps2.onMouseMove(event);
      }
      cursorPosition = {
        x: event.clientX,
        y: event.clientY
      };
      if (popperRef.current) {
        popperRef.current.update();
      }
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === "string";
    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps["aria-describedby"] = open ? id : null;
    } else {
      nameOrDescProps["aria-label"] = titleIsString ? title : null;
      nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
    }
    const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
      className: clsx_m_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});
    if (true) {
      childrenProps["data-mui-internal-clone-element"] = true;
      React207.useEffect(() => {
        if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
          console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
        }
      }, [childNode]);
    }
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur2, childrenProps.onBlur);
      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur2;
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
      }
    }
    const popperOptions = React207.useMemo(() => {
      var _PopperProps$popperOp;
      let tooltipModifiers = [{
        name: "arrow",
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];
      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }
      return _extends({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);
    const ownerState = _extends({}, props, {
      isRtl,
      arrow: arrow4,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });
    const classes = useUtilityClasses130(ownerState);
    const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components3.Popper) != null ? _ref : TooltipPopper;
    const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components3.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow_default;
    const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components3.Tooltip) != null ? _ref4 : TooltipTooltip;
    const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components3.Arrow) != null ? _ref5 : TooltipArrow;
    const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
      className: clsx_m_default(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
    }), ownerState);
    const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
      className: clsx_m_default(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
    }), ownerState);
    const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
      className: clsx_m_default(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
    }), ownerState);
    return jsx_runtime219.jsxs(React207.Fragment, {
      children: [React207.cloneElement(children, childrenProps), jsx_runtime218.jsx(PopperComponent, _extends({
        as: PopperComponentProp != null ? PopperComponentProp : Popper_default2,
        placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: cursorPosition.y,
            left: cursorPosition.x,
            right: cursorPosition.x,
            bottom: cursorPosition.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef,
        open: childNode ? open : false,
        id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => jsx_runtime218.jsx(TransitionComponent, _extends({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, transitionProps, {
          children: jsx_runtime219.jsxs(TooltipComponent, _extends({}, tooltipProps, {
            children: [title, arrow4 ? jsx_runtime218.jsx(ArrowComponent, _extends({}, tooltipArrowProps, {
              ref: setArrowRef
            })) : null]
          }))
        }))
      }))]
    });
  });
  Tooltip2.propTypes = {
    arrow: prop_types160.default.bool,
    children: elementAcceptingRef_default.isRequired,
    classes: prop_types160.default.object,
    className: prop_types160.default.string,
    components: prop_types160.default.shape({
      Arrow: prop_types160.default.elementType,
      Popper: prop_types160.default.elementType,
      Tooltip: prop_types160.default.elementType,
      Transition: prop_types160.default.elementType
    }),
    componentsProps: prop_types160.default.shape({
      arrow: prop_types160.default.object,
      popper: prop_types160.default.object,
      tooltip: prop_types160.default.object,
      transition: prop_types160.default.object
    }),
    describeChild: prop_types160.default.bool,
    disableFocusListener: prop_types160.default.bool,
    disableHoverListener: prop_types160.default.bool,
    disableInteractive: prop_types160.default.bool,
    disableTouchListener: prop_types160.default.bool,
    enterDelay: prop_types160.default.number,
    enterNextDelay: prop_types160.default.number,
    enterTouchDelay: prop_types160.default.number,
    followCursor: prop_types160.default.bool,
    id: prop_types160.default.string,
    leaveDelay: prop_types160.default.number,
    leaveTouchDelay: prop_types160.default.number,
    onClose: prop_types160.default.func,
    onOpen: prop_types160.default.func,
    open: prop_types160.default.bool,
    placement: prop_types160.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    PopperComponent: prop_types160.default.elementType,
    PopperProps: prop_types160.default.object,
    slotProps: prop_types160.default.shape({
      arrow: prop_types160.default.object,
      popper: prop_types160.default.object,
      tooltip: prop_types160.default.object,
      transition: prop_types160.default.object
    }),
    slots: prop_types160.default.shape({
      arrow: prop_types160.default.elementType,
      popper: prop_types160.default.elementType,
      tooltip: prop_types160.default.elementType,
      transition: prop_types160.default.elementType
    }),
    sx: prop_types160.default.oneOfType([prop_types160.default.arrayOf(prop_types160.default.oneOfType([prop_types160.default.func, prop_types160.default.object, prop_types160.default.bool])), prop_types160.default.func, prop_types160.default.object]),
    title: prop_types160.default.node,
    TransitionComponent: prop_types160.default.elementType,
    TransitionProps: prop_types160.default.object
  };
  const Tooltip_default = Tooltip2;

  // node_modules/@mui/material/Switch/switchClasses.js
  function getSwitchUtilityClass2(slot) {
    return generateUtilityClass2("MuiSwitch", slot);
  }
  const switchClasses6 = generateUtilityClasses2("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  const switchClasses_default2 = switchClasses6;

  // node_modules/@mui/material/Switch/Switch.js
  const React186 = __toModule(require_react());
  const prop_types141 = __toModule(require_prop_types2());
  const jsx_runtime193 = __toModule(require_jsx_runtime());
  const jsx_runtime194 = __toModule(require_jsx_runtime());
  const _excluded131 = ["className", "color", "edge", "size", "sx"];
  const useUtilityClasses113 = (ownerState) => {
    const {
      classes,
      edge,
      size,
      color: color2,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
      switchBase: ["switchBase", `color${capitalize_default(color2)}`, checked && "checked", disabled && "disabled"],
      thumb: ["thumb"],
      track: ["track"],
      input: ["input"]
    };
    const composedClasses = composeClasses2(slots, getSwitchUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  const SwitchRoot = styled_default("span", {
    name: "MuiSwitch",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, ownerState.edge && styles30[`edge${capitalize_default(ownerState.edge)}`], styles30[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: "hidden",
    padding: 12,
    boxSizing: "border-box",
    position: "relative",
    flexShrink: 0,
    zIndex: 0,
    verticalAlign: "middle",
    "@media print": {
      colorAdjust: "exact"
    }
  }, ownerState.edge === "start" && {
    marginLeft: -8
  }, ownerState.edge === "end" && {
    marginRight: -8
  }, ownerState.size === "small" && {
    width: 40,
    height: 24,
    padding: 7,
    [`& .${switchClasses_default2.thumb}`]: {
      width: 16,
      height: 16
    },
    [`& .${switchClasses_default2.switchBase}`]: {
      padding: 4,
      [`&.${switchClasses_default2.checked}`]: {
        transform: "translateX(16px)"
      }
    }
  }));
  const SwitchSwitchBase = styled_default(SwitchBase_default, {
    name: "MuiSwitch",
    slot: "SwitchBase",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.switchBase, {
        [`& .${switchClasses_default2.input}`]: styles30.input
      }, ownerState.color !== "default" && styles30[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1,
    color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
    transition: theme.transitions.create(["left", "transform"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses_default2.checked}`]: {
      transform: "translateX(20px)"
    },
    [`&.${switchClasses_default2.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
    },
    [`&.${switchClasses_default2.checked} + .${switchClasses_default2.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses_default2.disabled} + .${switchClasses_default2.track}`]: {
      opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
    },
    [`& .${switchClasses_default2.input}`]: {
      left: "-100%",
      width: "300%"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${switchClasses_default2.checked}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main,
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${switchClasses_default2.disabled}`]: {
        color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
      }
    },
    [`&.${switchClasses_default2.checked} + .${switchClasses_default2.track}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }
  }));
  const SwitchTrack = styled_default("span", {
    name: "MuiSwitch",
    slot: "Track",
    overridesResolver: (props, styles30) => styles30.track
  })(({
    theme
  }) => ({
    height: "100%",
    width: "100%",
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(["opacity", "background-color"], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
    opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
  }));
  const SwitchThumb = styled_default("span", {
    name: "MuiSwitch",
    slot: "Thumb",
    overridesResolver: (props, styles30) => styles30.thumb
  })(({
    theme
  }) => ({
    boxShadow: (theme.vars || theme).shadows[1],
    backgroundColor: "currentColor",
    width: 20,
    height: 20,
    borderRadius: "50%"
  }));
  const Switch4 = React186.forwardRef(function Switch9(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSwitch"
    });
    const {
      className: className3,
      color: color2 = "primary",
      edge = false,
      size = "medium",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded131);
    const ownerState = _extends({}, props, {
      color: color2,
      edge,
      size
    });
    const classes = useUtilityClasses113(ownerState);
    const icon = jsx_runtime193.jsx(SwitchThumb, {
      className: classes.thumb,
      ownerState
    });
    return jsx_runtime194.jsxs(SwitchRoot, {
      className: clsx_m_default(classes.root, className3),
      sx,
      ownerState,
      children: [jsx_runtime193.jsx(SwitchSwitchBase, _extends({
        type: "checkbox",
        icon,
        checkedIcon: icon,
        ref,
        ownerState
      }, other, {
        classes: _extends({}, classes, {
          root: classes.switchBase
        })
      })), jsx_runtime193.jsx(SwitchTrack, {
        className: classes.track,
        ownerState
      })]
    });
  });
  Switch4.propTypes = {
    checked: prop_types141.default.bool,
    checkedIcon: prop_types141.default.node,
    classes: prop_types141.default.object,
    className: prop_types141.default.string,
    color: prop_types141.default.oneOfType([prop_types141.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), prop_types141.default.string]),
    defaultChecked: prop_types141.default.bool,
    disabled: prop_types141.default.bool,
    disableRipple: prop_types141.default.bool,
    edge: prop_types141.default.oneOf(["end", "start", false]),
    icon: prop_types141.default.node,
    id: prop_types141.default.string,
    inputProps: prop_types141.default.object,
    inputRef: refType_default,
    onChange: prop_types141.default.func,
    required: prop_types141.default.bool,
    size: prop_types141.default.oneOfType([prop_types141.default.oneOf(["medium", "small"]), prop_types141.default.string]),
    sx: prop_types141.default.oneOfType([prop_types141.default.arrayOf(prop_types141.default.oneOfType([prop_types141.default.func, prop_types141.default.object, prop_types141.default.bool])), prop_types141.default.func, prop_types141.default.object]),
    value: prop_types141.default.any
  };
  const Switch_default2 = Switch4;

  // node_modules/@mui/material/Table/TableContext.js
  const React190 = __toModule(require_react());
  const TableContext2 = React190.createContext();
  if (true) {
    TableContext2.displayName = "TableContext";
  }
  const TableContext_default = TableContext2;

  // node_modules/@mui/material/Table/Tablelvl2Context.js
  const React191 = __toModule(require_react());
  const Tablelvl2Context = React191.createContext();
  if (true) {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  const Tablelvl2Context_default = Tablelvl2Context;

  // node_modules/@mui/material/TableCell/tableCellClasses.js
  function getTableCellUtilityClass(slot) {
    return generateUtilityClass2("MuiTableCell", slot);
  }
  const tableCellClasses3 = generateUtilityClasses2("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  const tableCellClasses_default = tableCellClasses3;

  // node_modules/@mui/material/TableCell/TableCell.js
  const React193 = __toModule(require_react());
  const prop_types146 = __toModule(require_prop_types2());
  const jsx_runtime199 = __toModule(require_jsx_runtime());
  const _excluded136 = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
  const useUtilityClasses118 = (ownerState) => {
    const {
      classes,
      variant,
      align,
      padding: padding2,
      size,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize_default(align)}`, padding2 !== "normal" && `padding${capitalize_default(padding2)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses2(slots, getTableCellUtilityClass, classes);
  };
  const TableCellRoot = styled_default("td", {
    name: "MuiTableCell",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, styles30[ownerState.variant], styles30[`size${capitalize_default(ownerState.size)}`], ownerState.padding !== "normal" && styles30[`padding${capitalize_default(ownerState.padding)}`], ownerState.align !== "inherit" && styles30[`align${capitalize_default(ownerState.align)}`], ownerState.stickyHeader && styles30.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    display: "table-cell",
    verticalAlign: "inherit",
    borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === "light" ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
    textAlign: "left",
    padding: 16
  }, ownerState.variant === "head" && {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === "body" && {
    color: (theme.vars || theme).palette.text.primary
  }, ownerState.variant === "footer" && {
    color: (theme.vars || theme).palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === "small" && {
    padding: "6px 16px",
    [`&.${tableCellClasses_default.paddingCheckbox}`]: {
      width: 24,
      padding: "0 12px 0 16px",
      "& > *": {
        padding: 0
      }
    }
  }, ownerState.padding === "checkbox" && {
    width: 48,
    padding: "0 0 0 4px"
  }, ownerState.padding === "none" && {
    padding: 0
  }, ownerState.align === "left" && {
    textAlign: "left"
  }, ownerState.align === "center" && {
    textAlign: "center"
  }, ownerState.align === "right" && {
    textAlign: "right",
    flexDirection: "row-reverse"
  }, ownerState.align === "justify" && {
    textAlign: "justify"
  }, ownerState.stickyHeader && {
    position: "sticky",
    top: 0,
    zIndex: 2,
    backgroundColor: (theme.vars || theme).palette.background.default
  }));
  const TableCell = React193.forwardRef(function TableCell5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTableCell"
    });
    const {
      align = "inherit",
      className: className3,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded136);
    const table2 = React193.useContext(TableContext_default);
    const tablelvl24 = React193.useContext(Tablelvl2Context_default);
    const isHeadCell = tablelvl24 && tablelvl24.variant === "head";
    let component;
    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? "th" : "td";
    }
    let scope = scopeProp;
    if (component === "td") {
      scope = void 0;
    } else if (!scope && isHeadCell) {
      scope = "col";
    }
    const variant = variantProp || tablelvl24 && tablelvl24.variant;
    const ownerState = _extends({}, props, {
      align,
      component,
      padding: paddingProp || (table2 && table2.padding ? table2.padding : "normal"),
      size: sizeProp || (table2 && table2.size ? table2.size : "medium"),
      sortDirection,
      stickyHeader: variant === "head" && table2 && table2.stickyHeader,
      variant
    });
    const classes = useUtilityClasses118(ownerState);
    let ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return jsx_runtime199.jsx(TableCellRoot, _extends({
      as: component,
      ref,
      className: clsx_m_default(classes.root, className3),
      "aria-sort": ariaSort,
      scope,
      ownerState
    }, other));
  });
  TableCell.propTypes = {
    align: prop_types146.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    children: prop_types146.default.node,
    classes: prop_types146.default.object,
    className: prop_types146.default.string,
    component: prop_types146.default.elementType,
    padding: prop_types146.default.oneOf(["checkbox", "none", "normal"]),
    scope: prop_types146.default.string,
    size: prop_types146.default.oneOfType([prop_types146.default.oneOf(["medium", "small"]), prop_types146.default.string]),
    sortDirection: prop_types146.default.oneOf(["asc", "desc", false]),
    sx: prop_types146.default.oneOfType([prop_types146.default.arrayOf(prop_types146.default.oneOfType([prop_types146.default.func, prop_types146.default.object, prop_types146.default.bool])), prop_types146.default.func, prop_types146.default.object]),
    variant: prop_types146.default.oneOfType([prop_types146.default.oneOf(["body", "footer", "head"]), prop_types146.default.string])
  };
  const TableCell_default = TableCell;

  // node_modules/@mui/material/Toolbar/toolbarClasses.js
  function getToolbarUtilityClass(slot) {
    return generateUtilityClass2("MuiToolbar", slot);
  }
  const toolbarClasses3 = generateUtilityClasses2("MuiToolbar", ["root", "gutters", "regular", "dense"]);

  // node_modules/@mui/material/Toolbar/Toolbar.js
  const React206 = __toModule(require_react());
  const prop_types159 = __toModule(require_prop_types2());
  const jsx_runtime217 = __toModule(require_jsx_runtime());
  const _excluded149 = ["className", "component", "disableGutters", "variant"];
  const useUtilityClasses129 = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return composeClasses2(slots, getToolbarUtilityClass, classes);
  };
  const ToolbarRoot = styled_default("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles30) => {
      const {
        ownerState
      } = props;
      return [styles30.root, !ownerState.disableGutters && styles30.gutters, styles30[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  const Toolbar2 = React206.forwardRef(function Toolbar5(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className: className3,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded149);
    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses129(ownerState);
    return jsx_runtime217.jsx(ToolbarRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className3),
      ref,
      ownerState
    }, other));
  });
  Toolbar2.propTypes = {
    children: prop_types159.default.node,
    classes: prop_types159.default.object,
    className: prop_types159.default.string,
    component: prop_types159.default.elementType,
    disableGutters: prop_types159.default.bool,
    sx: prop_types159.default.oneOfType([prop_types159.default.arrayOf(prop_types159.default.oneOfType([prop_types159.default.func, prop_types159.default.object, prop_types159.default.bool])), prop_types159.default.func, prop_types159.default.object]),
    variant: prop_types159.default.oneOfType([prop_types159.default.oneOf(["dense", "regular"]), prop_types159.default.string])
  };
  const Toolbar_default = Toolbar2;

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
  const React223 = __toModule(require_react());
  const jsx_runtime236 = __toModule(require_jsx_runtime());
  const KeyboardArrowLeft_default = createSvgIcon(jsx_runtime236.jsx("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
  const React224 = __toModule(require_react());
  const jsx_runtime237 = __toModule(require_jsx_runtime());
  const KeyboardArrowRight_default = createSvgIcon(jsx_runtime237.jsx("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  const React198 = __toModule(require_react());
  const prop_types151 = __toModule(require_prop_types2());
  const jsx_runtime205 = __toModule(require_jsx_runtime());
  const jsx_runtime206 = __toModule(require_jsx_runtime());
  var _LastPageIcon;
  var _FirstPageIcon;
  var _KeyboardArrowRight;
  var _KeyboardArrowLeft;
  var _KeyboardArrowLeft2;
  var _KeyboardArrowRight2;
  var _FirstPageIcon2;
  var _LastPageIcon2;
  const _excluded141 = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
  const TablePaginationActions5 = React198.forwardRef(function TablePaginationActions6(props, ref) {
    const {
      backIconButtonProps,
      count,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded141);
    const theme = useTheme3();
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    return jsx_runtime206.jsxs("div", _extends({
      ref
    }, other, {
      children: [showFirstButton && jsx_runtime205.jsx(IconButton_default, {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page),
        children: theme.direction === "rtl" ? _LastPageIcon || (_LastPageIcon = jsx_runtime205.jsx(LastPage_default, {})) : _FirstPageIcon || (_FirstPageIcon = jsx_runtime205.jsx(FirstPage_default, {}))
      }), jsx_runtime205.jsx(IconButton_default, _extends({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      }, backIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowRight || (_KeyboardArrowRight = jsx_runtime205.jsx(KeyboardArrowRight_default, {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft = jsx_runtime205.jsx(KeyboardArrowLeft_default, {}))
      })), jsx_runtime205.jsx(IconButton_default, _extends({
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        color: "inherit",
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      }, nextIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = jsx_runtime205.jsx(KeyboardArrowLeft_default, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = jsx_runtime205.jsx(KeyboardArrowRight_default, {}))
      })), showLastButton && jsx_runtime205.jsx(IconButton_default, {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page),
        children: theme.direction === "rtl" ? _FirstPageIcon2 || (_FirstPageIcon2 = jsx_runtime205.jsx(FirstPage_default, {})) : _LastPageIcon2 || (_LastPageIcon2 = jsx_runtime205.jsx(LastPage_default, {}))
      })]
    }));
  });
  TablePaginationActions5.propTypes = {
    backIconButtonProps: prop_types151.default.object,
    count: prop_types151.default.number.isRequired,
    getItemAriaLabel: prop_types151.default.func.isRequired,
    nextIconButtonProps: prop_types151.default.object,
    onPageChange: prop_types151.default.func.isRequired,
    page: prop_types151.default.number.isRequired,
    rowsPerPage: prop_types151.default.number.isRequired,
    showFirstButton: prop_types151.default.bool.isRequired,
    showLastButton: prop_types151.default.bool.isRequired
  };
  const TablePaginationActions_default2 = TablePaginationActions5;

  // node_modules/@mui/material/TablePagination/tablePaginationClasses.js
  function getTablePaginationUtilityClass2(slot) {
    return generateUtilityClass2("MuiTablePagination", slot);
  }
  const tablePaginationClasses6 = generateUtilityClasses2("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  const tablePaginationClasses_default2 = tablePaginationClasses6;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  const React197 = __toModule(require_react());
  const prop_types150 = __toModule(require_prop_types2());
  const jsx_runtime203 = __toModule(require_jsx_runtime());
  const react10 = __toModule(require_react());
  const jsx_runtime204 = __toModule(require_jsx_runtime());
  var _InputBase;
  const _excluded140 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
  const TablePaginationRoot = styled_default(TableCell_default, {
    name: "MuiTablePagination",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })(({
    theme
  }) => ({
    overflow: "auto",
    color: (theme.vars || theme).palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    "&:last-child": {
      padding: 0
    }
  }));
  const TablePaginationToolbar = styled_default(Toolbar_default, {
    name: "MuiTablePagination",
    slot: "Toolbar",
    overridesResolver: (props, styles30) => _extends({
      [`& .${tablePaginationClasses_default2.actions}`]: styles30.actions
    }, styles30.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up("sm")]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses_default2.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  const TablePaginationSpacer = styled_default("div", {
    name: "MuiTablePagination",
    slot: "Spacer",
    overridesResolver: (props, styles30) => styles30.spacer
  })({
    flex: "1 1 100%"
  });
  const TablePaginationSelectLabel = styled_default("p", {
    name: "MuiTablePagination",
    slot: "SelectLabel",
    overridesResolver: (props, styles30) => styles30.selectLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  const TablePaginationSelect = styled_default(Select_default, {
    name: "MuiTablePagination",
    slot: "Select",
    overridesResolver: (props, styles30) => _extends({
      [`& .${tablePaginationClasses_default2.selectIcon}`]: styles30.selectIcon,
      [`& .${tablePaginationClasses_default2.select}`]: styles30.select
    }, styles30.input, styles30.selectRoot)
  })({
    color: "inherit",
    fontSize: "inherit",
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses_default2.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: "right",
      textAlignLast: "right"
    }
  });
  const TablePaginationMenuItem = styled_default(MenuItem_default, {
    name: "MuiTablePagination",
    slot: "MenuItem",
    overridesResolver: (props, styles30) => styles30.menuItem
  })({});
  const TablePaginationDisplayedRows = styled_default("p", {
    name: "MuiTablePagination",
    slot: "DisplayedRows",
    overridesResolver: (props, styles30) => styles30.displayedRows
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  function defaultLabelDisplayedRows2({
    from,
    to,
    count
  }) {
    return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel4(type) {
    return `Go to ${type} page`;
  }
  const useUtilityClasses122 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return composeClasses2(slots, getTablePaginationUtilityClass2, classes);
  };
  const TablePagination4 = React197.forwardRef(function TablePagination8(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTablePagination"
    });
    const {
      ActionsComponent = TablePaginationActions_default2,
      backIconButtonProps,
      className: className3,
      colSpan: colSpanProp,
      component = TableCell_default,
      count,
      getItemAriaLabel = defaultGetAriaLabel4,
      labelDisplayedRows = defaultLabelDisplayedRows2,
      labelRowsPerPage = "Rows per page:",
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded140);
    const ownerState = props;
    const classes = useUtilityClasses122(ownerState);
    const MenuItemComponent = SelectProps.native ? "option" : TablePaginationMenuItem;
    let colSpan;
    if (component === TableCell_default || component === "td") {
      colSpan = colSpanProp || 1e3;
    }
    const selectId = useId_default(SelectProps.id);
    const labelId = useId_default(SelectProps.labelId);
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    return jsx_runtime203.jsx(TablePaginationRoot, _extends({
      colSpan,
      ref,
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className3)
    }, other, {
      children: jsx_runtime204.jsxs(TablePaginationToolbar, {
        className: classes.toolbar,
        children: [jsx_runtime203.jsx(TablePaginationSpacer, {
          className: classes.spacer
        }), rowsPerPageOptions.length > 1 && jsx_runtime203.jsx(TablePaginationSelectLabel, {
          className: classes.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && jsx_runtime203.jsx(TablePaginationSelect, _extends({
          variant: "standard"
        }, !SelectProps.variant && {
          input: _InputBase || (_InputBase = jsx_runtime203.jsx(InputBase_default, {}))
        }, {
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId
        }, SelectProps, {
          classes: _extends({}, SelectProps.classes, {
            root: clsx_m_default(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
            select: clsx_m_default(classes.select, (SelectProps.classes || {}).select),
            icon: clsx_m_default(classes.selectIcon, (SelectProps.classes || {}).icon)
          }),
          children: rowsPerPageOptions.map((rowsPerPageOption) => react10.createElement(MenuItemComponent, _extends({}, !isHostComponent2(MenuItemComponent) && {
            ownerState
          }, {
            className: classes.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), jsx_runtime203.jsx(TablePaginationDisplayedRows, {
          className: classes.displayedRows,
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        }), jsx_runtime203.jsx(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps,
          count,
          nextIconButtonProps,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton,
          showLastButton,
          getItemAriaLabel
        })]
      })
    }));
  });
  TablePagination4.propTypes = {
    ActionsComponent: prop_types150.default.elementType,
    backIconButtonProps: prop_types150.default.object,
    classes: prop_types150.default.object,
    className: prop_types150.default.string,
    colSpan: prop_types150.default.number,
    component: prop_types150.default.elementType,
    count: integerPropType_default.isRequired,
    getItemAriaLabel: prop_types150.default.func,
    labelDisplayedRows: prop_types150.default.func,
    labelRowsPerPage: prop_types150.default.node,
    nextIconButtonProps: prop_types150.default.object,
    onPageChange: prop_types150.default.func.isRequired,
    onRowsPerPageChange: prop_types150.default.func,
    page: chainPropTypes(integerPropType_default.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    rowsPerPage: integerPropType_default.isRequired,
    rowsPerPageOptions: prop_types150.default.arrayOf(prop_types150.default.oneOfType([prop_types150.default.number, prop_types150.default.shape({
      label: prop_types150.default.string.isRequired,
      value: prop_types150.default.number.isRequired
    })]).isRequired),
    SelectProps: prop_types150.default.object,
    showFirstButton: prop_types150.default.bool,
    showLastButton: prop_types150.default.bool,
    sx: prop_types150.default.oneOfType([prop_types150.default.arrayOf(prop_types150.default.oneOfType([prop_types150.default.func, prop_types150.default.object, prop_types150.default.bool])), prop_types150.default.func, prop_types150.default.object])
  };
  const TablePagination_default2 = TablePagination4;

  // node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass2("MuiTextField", slot);
  }
  const textFieldClasses3 = generateUtilityClasses2("MuiTextField", ["root"]);

  // node_modules/@mui/material/TextField/TextField.js
  const React203 = __toModule(require_react());
  const prop_types156 = __toModule(require_prop_types2());
  const jsx_runtime213 = __toModule(require_jsx_runtime());
  const jsx_runtime214 = __toModule(require_jsx_runtime());
  const _excluded146 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  const variantComponent = {
    standard: Input_default2,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  const useUtilityClasses126 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses2(slots, getTextFieldUtilityClass, classes);
  };
  const TextFieldRoot = styled_default(FormControl_default2, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles30) => styles30.root
  })({});
  const TextField = React203.forwardRef(function TextField6(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className: className3,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      placeholder,
      required = false,
      rows: rows3,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded146);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses126(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = jsx_runtime213.jsx(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows: rows3,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      onClick,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return jsx_runtime214.jsxs(TextFieldRoot, _extends({
      className: clsx_m_default(classes.root, className3),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && jsx_runtime213.jsx(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? jsx_runtime213.jsx(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && jsx_runtime213.jsx(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  TextField.propTypes = {
    autoComplete: prop_types156.default.string,
    autoFocus: prop_types156.default.bool,
    children: prop_types156.default.node,
    classes: prop_types156.default.object,
    className: prop_types156.default.string,
    color: prop_types156.default.oneOfType([prop_types156.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), prop_types156.default.string]),
    defaultValue: prop_types156.default.any,
    disabled: prop_types156.default.bool,
    error: prop_types156.default.bool,
    FormHelperTextProps: prop_types156.default.object,
    fullWidth: prop_types156.default.bool,
    helperText: prop_types156.default.node,
    id: prop_types156.default.string,
    InputLabelProps: prop_types156.default.object,
    inputProps: prop_types156.default.object,
    InputProps: prop_types156.default.object,
    inputRef: refType_default,
    label: prop_types156.default.node,
    margin: prop_types156.default.oneOf(["dense", "none", "normal"]),
    maxRows: prop_types156.default.oneOfType([prop_types156.default.number, prop_types156.default.string]),
    minRows: prop_types156.default.oneOfType([prop_types156.default.number, prop_types156.default.string]),
    multiline: prop_types156.default.bool,
    name: prop_types156.default.string,
    onBlur: prop_types156.default.func,
    onChange: prop_types156.default.func,
    onClick: prop_types156.default.func,
    onFocus: prop_types156.default.func,
    placeholder: prop_types156.default.string,
    required: prop_types156.default.bool,
    rows: prop_types156.default.oneOfType([prop_types156.default.number, prop_types156.default.string]),
    select: prop_types156.default.bool,
    SelectProps: prop_types156.default.object,
    size: prop_types156.default.oneOfType([prop_types156.default.oneOf(["medium", "small"]), prop_types156.default.string]),
    sx: prop_types156.default.oneOfType([prop_types156.default.arrayOf(prop_types156.default.oneOfType([prop_types156.default.func, prop_types156.default.object, prop_types156.default.bool])), prop_types156.default.func, prop_types156.default.object]),
    type: prop_types156.default.string,
    value: prop_types156.default.any,
    variant: prop_types156.default.oneOf(["filled", "outlined", "standard"])
  };
  const TextField_default = TextField;

  // node_modules/@mui/x-data-grid/components/GridApiContext.js
  const React269 = __toModule(require_react());
  const GridApiContext = React269.createContext(void 0);
  if (true) {
    GridApiContext.displayName = "GridApiContext";
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
  const React385 = __toModule(require_react());
  function useGridApiContext2() {
    const apiRef = React385.useContext(GridApiContext);
    if (apiRef === void 0) {
      throw new Error(["MUI: Could not find the data grid context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
    }
    return apiRef;
  }

  // node_modules/@mui/x-data-grid/context/GridRootPropsContext.js
  const React346 = __toModule(require_react());
  const GridRootPropsContext2 = React346.createContext(void 0);
  if (true) {
    GridRootPropsContext2.displayName = "GridRootPropsContext";
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
  const React393 = __toModule(require_react());
  const useGridRootProps2 = () => {
    const contextValue = React393.useContext(GridRootPropsContext2);
    if (!contextValue) {
      throw new Error("MUI: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");
    }
    return contextValue;
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js
  const React392 = __toModule(require_react());
  const GridPrivateApiContext = React392.createContext(void 0);
  if (true) {
    GridPrivateApiContext.displayName = "GridPrivateApiContext";
  }
  function useGridPrivateApiContext2() {
    const privateApiRef = React392.useContext(GridPrivateApiContext);
    if (privateApiRef === void 0) {
      throw new Error(["MUI: Could not find the data grid private context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
    }
    return privateApiRef;
  }

  // node_modules/@mui/x-data-grid/utils/warning.js
  const buildWarning = (message, gravity = "warning") => {
    let alreadyWarned = false;
    const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
    return () => {
      if (!alreadyWarned) {
        alreadyWarned = true;
        if (gravity === "error") {
          console.error(cleanMessage);
        } else {
          console.warn(cleanMessage);
        }
      }
    };
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js
  function isOutputSelector(selector) {
    return selector.acceptsApiRef;
  }
  const stateNotInitializedWarning = buildWarning(["MUI: `useGridSelector` has been called before the initialization of the state.", "This hook can only be used inside the context of the grid."]);
  const useGridSelector2 = (apiRef, selector) => {
    if (true) {
      if (!apiRef.current.state) {
        stateNotInitializedWarning();
      }
    }
    if (isOutputSelector(selector)) {
      return selector(apiRef);
    }
    return selector(apiRef.current.state);
  };

  // node_modules/@mui/x-data-grid/constants/gridClasses.js
  function getDataGridUtilityClass(slot) {
    return generateUtilityClass2("MuiDataGrid", slot);
  }
  const gridClasses7 = generateUtilityClasses2("MuiDataGrid", ["actionsCell", "aggregationColumnHeader", "aggregationColumnHeader--alignLeft", "aggregationColumnHeader--alignCenter", "aggregationColumnHeader--alignRight", "aggregationColumnHeaderLabel", "autoHeight", "booleanCell", "cell--editable", "cell--editing", "cell--textCenter", "cell--textLeft", "cell--textRight", "cell--withRenderer", "cell--rangeTop", "cell--rangeBottom", "cell--rangeLeft", "cell--rangeRight", "cell", "cellContent", "cellCheckbox", "cellSkeleton", "checkboxInput", "columnHeader--alignCenter", "columnHeader--alignLeft", "columnHeader--alignRight", "columnHeader--dragging", "columnHeader--moving", "columnHeader--numeric", "columnHeader--sortable", "columnHeader--sorted", "columnHeader--filtered", "columnHeader", "columnHeaderCheckbox", "columnHeaderDraggableContainer", "columnHeaderDropZone", "columnHeaderTitle", "columnHeaderTitleContainer", "columnHeaderTitleContainerContent", "columnGroupHeader", "columnHeader--filledGroup", "columnHeader--emptyGroup", "columnHeader--showColumnBorder", "columnHeaders", "columnHeadersInner", "columnHeadersInner--scrollable", "columnSeparator--resizable", "columnSeparator--resizing", "columnSeparator--sideLeft", "columnSeparator--sideRight", "columnSeparator", "columnsPanel", "columnsPanelRow", "detailPanel", "detailPanels", "detailPanelToggleCell", "detailPanelToggleCell--expanded", "footerCell", "panel", "panelHeader", "panelWrapper", "panelContent", "panelFooter", "paper", "editBooleanCell", "editInputCell", "filterForm", "filterFormDeleteIcon", "filterFormLogicOperatorInput", "filterFormColumnInput", "filterFormOperatorInput", "filterFormValueInput", "filterIcon", "footerContainer", "iconButtonContainer", "iconSeparator", "main", "menu", "menuIcon", "menuIconButton", "menuOpen", "menuList", "overlay", "overlayWrapper", "overlayWrapperInner", "root", "root--densityStandard", "root--densityComfortable", "root--densityCompact", "root--disableUserSelection", "row", "row--editable", "row--editing", "row--lastVisible", "row--dragging", "row--dynamicHeight", "row--detailPanelExpanded", "rowReorderCellPlaceholder", "rowCount", "rowReorderCellContainer", "rowReorderCell", "rowReorderCell--draggable", "scrollArea--left", "scrollArea--right", "scrollArea", "selectedRowCount", "sortIcon", "toolbarContainer", "toolbarFilterList", "virtualScroller", "virtualScrollerContent", "virtualScrollerContent--overflowed", "virtualScrollerRenderZone", "pinnedColumns", "pinnedColumns--left", "pinnedColumns--right", "pinnedColumnHeaders", "pinnedColumnHeaders--left", "pinnedColumnHeaders--right", "withBorderColor", "cell--withRightBorder", "columnHeader--withRightBorder", "treeDataGroupingCell", "treeDataGroupingCellToggle", "groupingCriteriaCell", "groupingCriteriaCellToggle", "pinnedRows", "pinnedRows--top", "pinnedRows--bottom", "pinnedRowsRenderZone"]);

  // node_modules/@mui/x-data-grid/components/containers/GridMainContainer.js
  const React307 = __toModule(require_react());
  const jsx_runtime317 = __toModule(require_jsx_runtime());
  const useUtilityClasses158 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["main"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridMainContainerRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "Main",
    overridesResolver: (props, styles30) => styles30.main
  })(() => ({
    position: "relative",
    flexGrow: 1,
    display: "flex",
    flexDirection: "column",
    overflow: "hidden"
  }));
  const GridMainContainer2 = React307.forwardRef((props, ref) => {
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses158(rootProps);
    return jsx_runtime317.jsx(GridMainContainerRoot, {
      ref,
      className: classes.root,
      ownerState: rootProps,
      children: props.children
    });
  });

  // node_modules/reselect/es/defaultMemoize.js
  var NOT_FOUND = "NOT_FOUND";
  function createSingletonCache(equals) {
    var entry;
    return {
      get: function get(key) {
        if (entry && equals(entry.key, key)) {
          return entry.value;
        }
        return NOT_FOUND;
      },
      put: function put(key, value) {
        entry = {
          key,
          value
        };
      },
      getEntries: function getEntries() {
        return entry ? [entry] : [];
      },
      clear: function clear() {
        entry = void 0;
      }
    };
  }
  function createLruCache(maxSize, equals) {
    var entries = [];
    function get(key) {
      var cacheIndex = entries.findIndex(function(entry2) {
        return equals(key, entry2.key);
      });
      if (cacheIndex > -1) {
        var entry = entries[cacheIndex];
        if (cacheIndex > 0) {
          entries.splice(cacheIndex, 1);
          entries.unshift(entry);
        }
        return entry.value;
      }
      return NOT_FOUND;
    }
    function put(key, value) {
      if (get(key) === NOT_FOUND) {
        entries.unshift({
          key,
          value
        });
        if (entries.length > maxSize) {
          entries.pop();
        }
      }
    }
    function getEntries() {
      return entries;
    }
    function clear() {
      entries = [];
    }
    return {
      get,
      put,
      getEntries,
      clear
    };
  }
  var defaultEqualityCheck = function defaultEqualityCheck2(a2, b2) {
    return a2 === b2;
  };
  function createCacheKeyComparator(equalityCheck) {
    return function areArgumentsShallowlyEqual(prev, next) {
      if (prev === null || next === null || prev.length !== next.length) {
        return false;
      }
      var length = prev.length;
      for (var i2 = 0; i2 < length; i2++) {
        if (!equalityCheck(prev[i2], next[i2])) {
          return false;
        }
      }
      return true;
    };
  }
  function defaultMemoize(func, equalityCheckOrOptions) {
    var providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : {
      equalityCheck: equalityCheckOrOptions
    };
    var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
    var comparator = createCacheKeyComparator(equalityCheck);
    var cache6 = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
    function memoized() {
      var value = cache6.get(arguments);
      if (value === NOT_FOUND) {
        value = func.apply(null, arguments);
        if (resultEqualityCheck) {
          var entries = cache6.getEntries();
          var matchingEntry = entries.find(function(entry) {
            return resultEqualityCheck(entry.value, value);
          });
          if (matchingEntry) {
            value = matchingEntry.value;
          }
        }
        cache6.put(arguments, value);
      }
      return value;
    }
    memoized.clearCache = function() {
      return cache6.clear();
    };
    return memoized;
  }

  // node_modules/reselect/es/index.js
  function getDependencies(funcs) {
    var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
    if (!dependencies.every(function(dep) {
      return typeof dep === "function";
    })) {
      var dependencyTypes = dependencies.map(function(dep) {
        return typeof dep === "function" ? "function " + (dep.name || "unnamed") + "()" : typeof dep;
      }).join(", ");
      throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
    }
    return dependencies;
  }
  function createSelectorCreator(memoize7) {
    for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      memoizeOptionsFromArgs[_key - 1] = arguments[_key];
    }
    var createSelector12 = function createSelector13() {
      for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        funcs[_key2] = arguments[_key2];
      }
      var _recomputations = 0;
      var _lastResult;
      var directlyPassedOptions = {
        memoizeOptions: void 0
      };
      var resultFunc = funcs.pop();
      if (typeof resultFunc === "object") {
        directlyPassedOptions = resultFunc;
        resultFunc = funcs.pop();
      }
      if (typeof resultFunc !== "function") {
        throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
      }
      var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2;
      var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
      var dependencies = getDependencies(funcs);
      var memoizedResultFunc = memoize7.apply(void 0, [function recomputationWrapper() {
        _recomputations++;
        return resultFunc.apply(null, arguments);
      }].concat(finalMemoizeOptions));
      var selector = memoize7(function dependenciesChecker() {
        var params = [];
        var length = dependencies.length;
        for (var i2 = 0; i2 < length; i2++) {
          params.push(dependencies[i2].apply(null, arguments));
        }
        _lastResult = memoizedResultFunc.apply(null, params);
        return _lastResult;
      });
      Object.assign(selector, {
        resultFunc,
        memoizedResultFunc,
        dependencies,
        lastResult: function lastResult() {
          return _lastResult;
        },
        recomputations: function recomputations() {
          return _recomputations;
        },
        resetRecomputations: function resetRecomputations() {
          return _recomputations = 0;
        }
      });
      return selector;
    };
    return createSelector12;
  }
  var createSelector11 = createSelectorCreator(defaultMemoize);

  // node_modules/@mui/x-data-grid/utils/createSelector.js
  const cacheContainer = {
    cache: new WeakMap()
  };
  const missingInstanceIdWarning = buildWarning(["MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.", "To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`."]);
  const createSelector2 = (...args) => {
    const selector = (...selectorArgs) => {
      var _cache$get, _cache$get3;
      const [stateOrApiRef, instanceId] = selectorArgs;
      const isApiRef = !!stateOrApiRef.current;
      const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : {
        id: "default"
      };
      const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;
      if (true) {
        if (cacheKey.id === "default") {
          missingInstanceIdWarning();
        }
      }
      const {
        cache: cache6
      } = cacheContainer;
      if (cache6.get(cacheKey) && (_cache$get = cache6.get(cacheKey)) != null && _cache$get.get(args)) {
        var _cache$get2;
        return (_cache$get2 = cache6.get(cacheKey)) == null ? void 0 : _cache$get2.get(args)(state, cacheKey);
      }
      const newSelector = createSelector11(...args);
      if (!cache6.get(cacheKey)) {
        cache6.set(cacheKey, new Map());
      }
      (_cache$get3 = cache6.get(cacheKey)) == null ? void 0 : _cache$get3.set(args, newSelector);
      return newSelector(state, cacheKey);
    };
    selector.acceptsApiRef = true;
    return selector;
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js
  const gridColumnsStateSelector = (state) => state.columns;
  const gridColumnFieldsSelector = createSelector2(gridColumnsStateSelector, (columnsState) => columnsState.orderedFields);
  const gridColumnLookupSelector = createSelector2(gridColumnsStateSelector, (columnsState) => columnsState.lookup);
  const gridColumnDefinitionsSelector = createSelector2(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map((field) => lookup[field]));
  const gridColumnVisibilityModelSelector = createSelector2(gridColumnsStateSelector, (columnsState) => columnsState.columnVisibilityModel);
  const gridVisibleColumnDefinitionsSelector = createSelector2(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns6, columnVisibilityModel) => columns6.filter((column) => columnVisibilityModel[column.field] !== false));
  const gridVisibleColumnFieldsSelector = createSelector2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => visibleColumns.map((column) => column.field));
  const gridColumnPositionsSelector = createSelector2(gridVisibleColumnDefinitionsSelector, (visibleColumns) => {
    const positions3 = [];
    let currentPosition = 0;
    for (let i2 = 0; i2 < visibleColumns.length; i2 += 1) {
      positions3.push(currentPosition);
      currentPosition += visibleColumns[i2].computedWidth;
    }
    return positions3;
  });
  const gridColumnsTotalWidthSelector = createSelector2(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions3) => {
    const colCount = visibleColumns.length;
    if (colCount === 0) {
      return 0;
    }
    return positions3[colCount - 1] + visibleColumns[colCount - 1].computedWidth;
  });
  const gridFilterableColumnDefinitionsSelector = createSelector2(gridColumnDefinitionsSelector, (columns6) => columns6.filter((col) => col.filterable));
  const gridFilterableColumnLookupSelector = createSelector2(gridColumnDefinitionsSelector, (columns6) => columns6.reduce((acc, col) => {
    if (col.filterable) {
      acc[col.field] = col;
    }
    return acc;
  }, {}));

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js
  const gridRowsStateSelector = (state) => state.rows;
  const gridRowCountSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.totalRowCount);
  const gridRowsLoadingSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.loading);
  const gridTopLevelRowCountSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.totalTopLevelRowCount);
  const gridRowsLookupSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.dataRowIdToModelLookup);
  const gridRowsDataRowIdToIdLookupSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.dataRowIdToIdLookup);
  const gridRowTreeSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.tree);
  const gridRowGroupingNameSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.groupingName);
  const gridRowTreeDepthsSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.treeDepths);
  const gridRowMaximumTreeDepthSelector = createSelector2(gridRowsStateSelector, (rows3) => {
    const entries = Object.entries(rows3.treeDepths);
    if (entries.length === 0) {
      return 1;
    }
    return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a2, b2) => b2 - a2)[0] + 1;
  });
  const gridDataRowIdsSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3.dataRowIds);
  const gridAdditionalRowGroupsSelector = createSelector2(gridRowsStateSelector, (rows3) => rows3 == null ? void 0 : rows3.additionalRowGroups);
  const gridPinnedRowsSelector = createSelector2(gridAdditionalRowGroupsSelector, (additionalRowGroups) => {
    var _rawPinnedRows$bottom, _rawPinnedRows$top;
    const rawPinnedRows = additionalRowGroups == null ? void 0 : additionalRowGroups.pinnedRows;
    return {
      bottom: rawPinnedRows == null ? void 0 : (_rawPinnedRows$bottom = rawPinnedRows.bottom) == null ? void 0 : _rawPinnedRows$bottom.map((rowEntry) => {
        var _rowEntry$model;
        return {
          id: rowEntry.id,
          model: (_rowEntry$model = rowEntry.model) != null ? _rowEntry$model : {}
        };
      }),
      top: rawPinnedRows == null ? void 0 : (_rawPinnedRows$top = rawPinnedRows.top) == null ? void 0 : _rawPinnedRows$top.map((rowEntry) => {
        var _rowEntry$model2;
        return {
          id: rowEntry.id,
          model: (_rowEntry$model2 = rowEntry.model) != null ? _rowEntry$model2 : {}
        };
      })
    };
  });
  const gridPinnedRowsCountSelector = createSelector2(gridPinnedRowsSelector, (pinnedRows) => {
    var _pinnedRows$top, _pinnedRows$bottom;
    return ((pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.length) || 0) + ((pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.length) || 0);
  });

  // node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js
  const gridSortingStateSelector = (state) => state.sorting;
  const gridSortedRowIdsSelector = createSelector2(gridSortingStateSelector, (sortingState) => sortingState.sortedRows);
  const gridSortedRowEntriesSelector = createSelector2(gridSortedRowIdsSelector, gridRowsLookupSelector, (sortedIds, idRowsLookup) => sortedIds.map((id) => {
    var _idRowsLookup$id;
    return {
      id,
      model: (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}
    };
  }));
  const gridSortModelSelector = createSelector2(gridSortingStateSelector, (sorting) => sorting.sortModel);
  const gridSortColumnLookupSelector = createSelector2(gridSortModelSelector, (sortModel) => {
    const result = sortModel.reduce((res, sortItem, index) => {
      res[sortItem.field] = {
        sortDirection: sortItem.sort,
        sortIndex: sortModel.length > 1 ? index + 1 : void 0
      };
      return res;
    }, {});
    return result;
  });

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js
  const gridFilterStateSelector = (state) => state.filter;
  const gridFilterModelSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filterModel);
  const gridQuickFilterValuesSelector = createSelector2(gridFilterModelSelector, (filterModel) => filterModel.quickFilterValues);
  const gridVisibleRowsLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.visibleRowsLookup);
  const gridFilteredRowsLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filteredRowsLookup);
  const gridFilteredDescendantCountLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filteredDescendantCountLookup);
  const gridExpandedSortedRowEntriesSelector = createSelector2(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter((row) => visibleRowsLookup[row.id] !== false));
  const gridExpandedSortedRowIdsSelector = createSelector2(gridExpandedSortedRowEntriesSelector, (visibleSortedRowEntries) => visibleSortedRowEntries.map((row) => row.id));
  const gridFilteredSortedRowEntriesSelector = createSelector2(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter((row) => filteredRowsLookup[row.id] !== false));
  const gridFilteredSortedRowIdsSelector = createSelector2(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries) => filteredSortedRowEntries.map((row) => row.id));
  const gridFilteredSortedTopLevelRowEntriesSelector = createSelector2(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {
    if (rowTreeDepth < 2) {
      return visibleSortedRows;
    }
    return visibleSortedRows.filter((row) => {
      var _rowTree$row$id;
      return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;
    });
  });
  const gridExpandedRowCountSelector = createSelector2(gridExpandedSortedRowEntriesSelector, (visibleSortedRows) => visibleSortedRows.length);
  const gridFilteredTopLevelRowCountSelector = createSelector2(gridFilteredSortedTopLevelRowEntriesSelector, (visibleSortedTopLevelRows) => visibleSortedTopLevelRows.length);
  const gridFilterActiveItemsSelector = createSelector2(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {
    var _filterModel$items;
    return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter((item) => {
      var _column$filterOperato, _item$value;
      if (!item.field) {
        return false;
      }
      const column = columnLookup[item.field];
      if (!(column != null && column.filterOperators) || (column == null ? void 0 : (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {
        return false;
      }
      const filterOperator = column.filterOperators.find((operator) => operator.value === item.operator);
      if (!filterOperator) {
        return false;
      }
      return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== "";
    });
  });
  const gridFilterActiveItemsLookupSelector = createSelector2(gridFilterActiveItemsSelector, (activeFilters) => {
    const result = activeFilters.reduce((res, filterItem) => {
      if (!res[filterItem.field]) {
        res[filterItem.field] = [filterItem];
      } else {
        res[filterItem.field].push(filterItem);
      }
      return res;
    }, {});
    return result;
  });

  // node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js
  const gridFocusStateSelector4 = (state) => state.focus;
  const gridFocusCellSelector = createSelector2(gridFocusStateSelector4, (focusState) => focusState.cell);
  const gridFocusColumnHeaderSelector = createSelector2(gridFocusStateSelector4, (focusState) => focusState.columnHeader);
  const unstable_gridFocusColumnGroupHeaderSelector = createSelector2(gridFocusStateSelector4, (focusState) => focusState.columnGroupHeader);
  const gridTabIndexStateSelector = (state) => state.tabIndex;
  const gridTabIndexCellSelector = createSelector2(gridTabIndexStateSelector, (state) => state.cell);
  const gridTabIndexColumnHeaderSelector = createSelector2(gridTabIndexStateSelector, (state) => state.columnHeader);
  const unstable_gridTabIndexColumnGroupHeaderSelector = createSelector2(gridTabIndexStateSelector, (state) => state.columnGroupHeader);

  // node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js
  const gridDensitySelector = (state) => state.density;
  const gridDensityValueSelector = createSelector2(gridDensitySelector, (density3) => density3.value);
  const gridDensityFactorSelector = createSelector2(gridDensitySelector, (density3) => density3.factor);

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js
  const gridColumnGroupingSelector = (state) => state.columnGrouping;
  const gridColumnGroupsUnwrappedModelSelector = createSelector2(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$unwra;
    return (_columnGrouping$unwra = columnGrouping == null ? void 0 : columnGrouping.unwrappedGroupingModel) != null ? _columnGrouping$unwra : {};
  });
  const gridColumnGroupsLookupSelector = createSelector2(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$looku;
    return (_columnGrouping$looku = columnGrouping == null ? void 0 : columnGrouping.lookup) != null ? _columnGrouping$looku : {};
  });
  const gridColumnGroupsHeaderStructureSelector = createSelector2(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$heade;
    return (_columnGrouping$heade = columnGrouping == null ? void 0 : columnGrouping.headerStructure) != null ? _columnGrouping$heade : [];
  });
  const gridColumnGroupsHeaderMaxDepthSelector = createSelector2(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$maxDe;
    return (_columnGrouping$maxDe = columnGrouping == null ? void 0 : columnGrouping.maxDepth) != null ? _columnGrouping$maxDe : 0;
  });

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.js
  const gridColumnMenuSelector = (state) => state.columnMenu;

  // node_modules/@mui/x-data-grid/components/base/GridBody.js
  const React281 = __toModule(require_react());
  const prop_types193 = __toModule(require_prop_types7());
  const jsx_runtime284 = __toModule(require_jsx_runtime());
  const jsx_runtime285 = __toModule(require_jsx_runtime());
  function GridBody(props) {
    const {
      VirtualScrollerComponent,
      ColumnHeadersProps,
      children
    } = props;
    const apiRef = useGridPrivateApiContext2();
    const rootProps = useGridRootProps2();
    const rootRef = React281.useRef(null);
    const visibleColumns = useGridSelector2(apiRef, gridVisibleColumnDefinitionsSelector);
    const filterColumnLookup = useGridSelector2(apiRef, gridFilterActiveItemsLookupSelector);
    const sortColumnLookup = useGridSelector2(apiRef, gridSortColumnLookupSelector);
    const columnPositions = useGridSelector2(apiRef, gridColumnPositionsSelector);
    const columnHeaderTabIndexState = useGridSelector2(apiRef, gridTabIndexColumnHeaderSelector);
    const cellTabIndexState = useGridSelector2(apiRef, gridTabIndexCellSelector);
    const columnGroupHeaderTabIndexState = useGridSelector2(apiRef, unstable_gridTabIndexColumnGroupHeaderSelector);
    const columnHeaderFocus = useGridSelector2(apiRef, gridFocusColumnHeaderSelector);
    const columnGroupHeaderFocus = useGridSelector2(apiRef, unstable_gridFocusColumnGroupHeaderSelector);
    const densityFactor = useGridSelector2(apiRef, gridDensityFactorSelector);
    const headerGroupingMaxDepth = useGridSelector2(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
    const columnMenuState = useGridSelector2(apiRef, gridColumnMenuSelector);
    const columnVisibility = useGridSelector2(apiRef, gridColumnVisibilityModelSelector);
    const columnGroupsHeaderStructure = useGridSelector2(apiRef, gridColumnGroupsHeaderStructureSelector);
    const hasOtherElementInTabSequence = !(columnGroupHeaderTabIndexState === null && columnHeaderTabIndexState === null && cellTabIndexState === null);
    const [isVirtualizationDisabled, setIsVirtualizationDisabled] = React281.useState(rootProps.disableVirtualization);
    useEnhancedEffect_default(() => {
      apiRef.current.computeSizeAndPublishResizeEvent();
      const elementToObserve = rootRef.current;
      if (typeof ResizeObserver === "undefined") {
        return () => {
        };
      }
      let animationFrame;
      const observer = new ResizeObserver(() => {
        animationFrame = window.requestAnimationFrame(() => {
          apiRef.current.computeSizeAndPublishResizeEvent();
        });
      });
      if (elementToObserve) {
        observer.observe(elementToObserve);
      }
      return () => {
        if (animationFrame) {
          window.cancelAnimationFrame(animationFrame);
        }
        if (elementToObserve) {
          observer.unobserve(elementToObserve);
        }
      };
    }, [apiRef]);
    const disableVirtualization = React281.useCallback(() => {
      setIsVirtualizationDisabled(true);
    }, []);
    const enableVirtualization = React281.useCallback(() => {
      setIsVirtualizationDisabled(false);
    }, []);
    React281.useEffect(() => {
      setIsVirtualizationDisabled(rootProps.disableVirtualization);
    }, [rootProps.disableVirtualization]);
    apiRef.current.unstable_disableVirtualization = disableVirtualization;
    apiRef.current.unstable_enableVirtualization = enableVirtualization;
    const columnHeadersRef = React281.useRef(null);
    const columnsContainerRef = React281.useRef(null);
    const virtualScrollerRef = React281.useRef(null);
    apiRef.current.register("private", {
      columnHeadersContainerElementRef: columnsContainerRef,
      columnHeadersElementRef: columnHeadersRef,
      virtualScrollerRef
    });
    const hasDimensions = !!apiRef.current.getRootDimensions();
    return jsx_runtime285.jsxs(GridMainContainer2, {
      ref: rootRef,
      children: [jsx_runtime284.jsx(rootProps.slots.columnHeaders, _extends({
        ref: columnsContainerRef,
        innerRef: columnHeadersRef,
        visibleColumns,
        filterColumnLookup,
        sortColumnLookup,
        columnPositions,
        columnHeaderTabIndexState,
        columnGroupHeaderTabIndexState,
        columnHeaderFocus,
        columnGroupHeaderFocus,
        densityFactor,
        headerGroupingMaxDepth,
        columnMenuState,
        columnVisibility,
        columnGroupsHeaderStructure,
        hasOtherElementInTabSequence
      }, ColumnHeadersProps)), hasDimensions && jsx_runtime284.jsx(VirtualScrollerComponent, {
        ref: virtualScrollerRef,
        disableVirtualization: isVirtualizationDisabled
      }), children]
    });
  }
  GridBody.propTypes = {
    children: prop_types193.default.node,
    ColumnHeadersProps: prop_types193.default.object,
    VirtualScrollerComponent: prop_types193.default.elementType.isRequired
  };

  // node_modules/@mui/x-data-grid/components/base/GridFooterPlaceholder.js
  const React282 = __toModule(require_react());
  const jsx_runtime286 = __toModule(require_jsx_runtime());
  function GridFooterPlaceholder() {
    var _rootProps$slotProps;
    const rootProps = useGridRootProps2();
    if (rootProps.hideFooter) {
      return null;
    }
    return jsx_runtime286.jsx(rootProps.slots.footer, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.footer));
  }

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js
  const GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;
  const buildRootGroup = () => ({
    type: "group",
    id: GRID_ROOT_GROUP_ID,
    depth: -1,
    groupingField: null,
    groupingKey: null,
    isAutoGenerated: true,
    children: [],
    childrenFromPath: {},
    childrenExpanded: true,
    parent: null
  });
  function checkGridRowIdIsValid(id, row, detailErrorMessage = "A row was provided without id in the rows prop:") {
    if (id == null) {
      throw new Error(["MUI: The data grid component requires all rows to have a unique `id` property.", "Alternatively, you can use the `getRowId` prop to specify a custom id for each row.", detailErrorMessage, JSON.stringify(row)].join("\n"));
    }
  }
  const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {
    const id = getRowId ? getRowId(rowModel) : rowModel.id;
    checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
    return id;
  };
  const createRowsInternalCache = ({
    rows: rows3,
    getRowId,
    loading,
    rowCount
  }) => {
    const updates = {
      type: "full",
      rows: []
    };
    const dataRowIdToModelLookup = {};
    const dataRowIdToIdLookup = {};
    for (let i2 = 0; i2 < rows3.length; i2 += 1) {
      const model = rows3[i2];
      const id = getRowIdFromRowModel(model, getRowId);
      dataRowIdToModelLookup[id] = model;
      dataRowIdToIdLookup[id] = id;
      updates.rows.push(id);
    }
    return {
      rowsBeforePartialUpdates: rows3,
      loadingPropBeforePartialUpdates: loading,
      rowCountPropBeforePartialUpdates: rowCount,
      updates,
      dataRowIdToIdLookup,
      dataRowIdToModelLookup
    };
  };
  const getTopLevelRowCount = ({
    tree,
    rowCountProp = 0
  }) => {
    const rootGroupNode = tree[GRID_ROOT_GROUP_ID];
    return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));
  };
  const getRowsStateFromCache = ({
    apiRef,
    rowCountProp = 0,
    loadingProp,
    previousTree,
    previousTreeDepths
  }) => {
    const cache6 = apiRef.current.caches.rows;
    const {
      tree: unProcessedTree,
      treeDepths: unProcessedTreeDepths,
      dataRowIds: unProcessedDataRowIds,
      groupingName
    } = apiRef.current.applyStrategyProcessor("rowTreeCreation", {
      previousTree,
      previousTreeDepths,
      updates: cache6.updates,
      dataRowIdToIdLookup: cache6.dataRowIdToIdLookup,
      dataRowIdToModelLookup: cache6.dataRowIdToModelLookup
    });
    const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors("hydrateRows", {
      tree: unProcessedTree,
      treeDepths: unProcessedTreeDepths,
      dataRowIdToIdLookup: cache6.dataRowIdToIdLookup,
      dataRowIds: unProcessedDataRowIds,
      dataRowIdToModelLookup: cache6.dataRowIdToModelLookup
    });
    apiRef.current.caches.rows.updates = {
      type: "partial",
      actions: {
        insert: [],
        modify: [],
        remove: []
      },
      idToActionLookup: {}
    };
    return _extends({}, groupingParamsWithHydrateRows, {
      totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),
      totalTopLevelRowCount: getTopLevelRowCount({
        tree: groupingParamsWithHydrateRows.tree,
        rowCountProp
      }),
      groupingName,
      loading: loadingProp
    });
  };
  const isAutoGeneratedRow = (rowNode) => rowNode.type === "skeletonRow" || rowNode.type === "footer" || rowNode.type === "group" && rowNode.isAutoGenerated || rowNode.type === "pinnedRow" && rowNode.isAutoGenerated;
  const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {
    const node = tree[parentId];
    if (node.type !== "group") {
      return [];
    }
    const validDescendants = [];
    for (let i2 = 0; i2 < node.children.length; i2 += 1) {
      const child = node.children[i2];
      if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {
        validDescendants.push(child);
      }
      validDescendants.push(...getTreeNodeDescendants(tree, child, skipAutoGeneratedRows));
    }
    if (!skipAutoGeneratedRows && node.footerId != null) {
      validDescendants.push(node.footerId);
    }
    return validDescendants;
  };
  const updateCacheWithNewRows = ({
    previousCache,
    getRowId,
    updates
  }) => {
    var _previousCache$update, _previousCache$update2, _previousCache$update3;
    if (previousCache.updates.type === "full") {
      throw new Error("MUI: Unable to prepare a partial update if a full update is not applied yet");
    }
    const uniqueUpdates = new Map();
    updates.forEach((update) => {
      const id = getRowIdFromRowModel(update, getRowId, "A row was provided without id when calling updateRows():");
      if (uniqueUpdates.has(id)) {
        uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));
      } else {
        uniqueUpdates.set(id, update);
      }
    });
    const partialUpdates = {
      type: "partial",
      actions: {
        insert: [...(_previousCache$update = previousCache.updates.actions.insert) != null ? _previousCache$update : []],
        modify: [...(_previousCache$update2 = previousCache.updates.actions.modify) != null ? _previousCache$update2 : []],
        remove: [...(_previousCache$update3 = previousCache.updates.actions.remove) != null ? _previousCache$update3 : []]
      },
      idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)
    };
    const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);
    const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);
    const alreadyAppliedActionsToRemove = {
      insert: {},
      modify: {},
      remove: {}
    };
    uniqueUpdates.forEach((partialRow, id) => {
      const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];
      if (partialRow._action === "delete") {
        if (actionAlreadyAppliedToRow === "remove" || !dataRowIdToModelLookup[id]) {
          return;
        }
        if (actionAlreadyAppliedToRow != null) {
          alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;
        }
        partialUpdates.actions.remove.push(id);
        delete dataRowIdToModelLookup[id];
        delete dataRowIdToIdLookup[id];
        return;
      }
      const oldRow = dataRowIdToModelLookup[id];
      if (oldRow) {
        if (actionAlreadyAppliedToRow === "remove") {
          alreadyAppliedActionsToRemove.remove[id] = true;
          partialUpdates.actions.modify.push(id);
        } else if (actionAlreadyAppliedToRow == null) {
          partialUpdates.actions.modify.push(id);
        }
        dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);
        return;
      }
      if (actionAlreadyAppliedToRow === "remove") {
        alreadyAppliedActionsToRemove.remove[id] = true;
        partialUpdates.actions.insert.push(id);
      } else if (actionAlreadyAppliedToRow == null) {
        partialUpdates.actions.insert.push(id);
      }
      dataRowIdToModelLookup[id] = partialRow;
      dataRowIdToIdLookup[id] = id;
    });
    const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);
    for (let i2 = 0; i2 < actionTypeWithActionsToRemove.length; i2 += 1) {
      const actionType = actionTypeWithActionsToRemove[i2];
      const idsToRemove = alreadyAppliedActionsToRemove[actionType];
      if (Object.keys(idsToRemove).length > 0) {
        partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter((id) => !idsToRemove[id]);
      }
    }
    return {
      dataRowIdToModelLookup,
      dataRowIdToIdLookup,
      updates: partialUpdates,
      rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,
      loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,
      rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates
    };
  };
  function calculatePinnedRowsHeight(apiRef) {
    var _pinnedRows$top, _pinnedRows$bottom;
    const pinnedRows = gridPinnedRowsSelector(apiRef);
    const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {
      acc += apiRef.current.unstable_getRowHeight(value.id);
      return acc;
    }, 0)) || 0;
    const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {
      acc += apiRef.current.unstable_getRowHeight(value.id);
      return acc;
    }, 0)) || 0;
    return {
      top: topPinnedRowsHeight,
      bottom: bottomPinnedRowsHeight
    };
  }
  function getMinimalContentHeight(apiRef, rowHeight) {
    const densityFactor = gridDensityFactorSelector(apiRef);
    return 2 * Math.floor(rowHeight * densityFactor);
  }

  // node_modules/@mui/x-data-grid/components/base/GridOverlays.js
  const React283 = __toModule(require_react());
  const jsx_runtime287 = __toModule(require_jsx_runtime());
  const GridOverlayWrapperRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "OverlayWrapper",
    overridesResolver: (props, styles30) => styles30.overlayWrapper
  })({
    position: "sticky",
    top: 0,
    left: 0,
    width: 0,
    height: 0,
    zIndex: 4
  });
  const GridOverlayWrapperInner = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "OverlayWrapperInner",
    overridesResolver: (props, styles30) => styles30.overlayWrapperInner
  })({});
  const useUtilityClasses138 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["overlayWrapper"],
      inner: ["overlayWrapperInner"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridOverlayWrapper(props) {
    var _viewportInnerSize$he, _viewportInnerSize$wi;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const [viewportInnerSize, setViewportInnerSize] = React283.useState(() => {
      var _apiRef$current$getRo, _apiRef$current$getRo2;
      return (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize) != null ? _apiRef$current$getRo : null;
    });
    const handleViewportSizeChange = React283.useCallback(() => {
      var _apiRef$current$getRo3, _apiRef$current$getRo4;
      setViewportInnerSize((_apiRef$current$getRo3 = (_apiRef$current$getRo4 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo4.viewportInnerSize) != null ? _apiRef$current$getRo3 : null);
    }, [apiRef]);
    useEnhancedEffect_default(() => {
      return apiRef.current.subscribeEvent("viewportInnerSizeChange", handleViewportSizeChange);
    }, [apiRef, handleViewportSizeChange]);
    let height2 = (_viewportInnerSize$he = viewportInnerSize == null ? void 0 : viewportInnerSize.height) != null ? _viewportInnerSize$he : 0;
    if (rootProps.autoHeight && height2 === 0) {
      height2 = getMinimalContentHeight(apiRef, rootProps.rowHeight);
    }
    const classes = useUtilityClasses138(_extends({}, props, {
      classes: rootProps.classes
    }));
    if (!viewportInnerSize) {
      return null;
    }
    return jsx_runtime287.jsx(GridOverlayWrapperRoot, {
      className: clsx_m_default(classes.root),
      children: jsx_runtime287.jsx(GridOverlayWrapperInner, _extends({
        className: clsx_m_default(classes.inner),
        style: {
          height: height2,
          width: (_viewportInnerSize$wi = viewportInnerSize == null ? void 0 : viewportInnerSize.width) != null ? _viewportInnerSize$wi : 0
        }
      }, props))
    });
  }
  function GridOverlays2() {
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const totalRowCount = useGridSelector2(apiRef, gridRowCountSelector);
    const visibleRowCount = useGridSelector2(apiRef, gridExpandedRowCountSelector);
    const loading = useGridSelector2(apiRef, gridRowsLoadingSelector);
    const showNoRowsOverlay = !loading && totalRowCount === 0;
    const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
    let overlay = null;
    if (showNoRowsOverlay) {
      var _rootProps$slotProps;
      overlay = jsx_runtime287.jsx(rootProps.slots.noRowsOverlay, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.noRowsOverlay));
    }
    if (showNoResultsOverlay) {
      var _rootProps$slotProps2;
      overlay = jsx_runtime287.jsx(rootProps.slots.noResultsOverlay, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.noResultsOverlay));
    }
    if (loading) {
      var _rootProps$slotProps3;
      overlay = jsx_runtime287.jsx(rootProps.slots.loadingOverlay, _extends({}, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.loadingOverlay));
    }
    if (overlay === null) {
      return null;
    }
    return jsx_runtime287.jsx(GridOverlayWrapper, {
      children: overlay
    });
  }

  // node_modules/@mui/x-data-grid/models/gridEditRowModel.js
  var GridEditModes = function(GridEditModes2) {
    GridEditModes2["Cell"] = "cell";
    GridEditModes2["Row"] = "row";
    return GridEditModes2;
  }(GridEditModes || {});
  var GridCellModes = function(GridCellModes2) {
    GridCellModes2["Edit"] = "edit";
    GridCellModes2["View"] = "view";
    return GridCellModes2;
  }(GridCellModes || {});
  var GridRowModes = function(GridRowModes2) {
    GridRowModes2["Edit"] = "edit";
    GridRowModes2["View"] = "view";
    return GridRowModes2;
  }(GridRowModes || {});

  // node_modules/@mui/x-data-grid/models/gridFilterItem.js
  var GridLogicOperator = function(GridLogicOperator2) {
    GridLogicOperator2["And"] = "and";
    GridLogicOperator2["Or"] = "or";
    return GridLogicOperator2;
  }(GridLogicOperator || {});

  // node_modules/@mui/x-data-grid/models/params/gridEditCellParams.js
  var GridCellEditStartReasons = function(GridCellEditStartReasons2) {
    GridCellEditStartReasons2["enterKeyDown"] = "enterKeyDown";
    GridCellEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
    GridCellEditStartReasons2["printableKeyDown"] = "printableKeyDown";
    GridCellEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
    return GridCellEditStartReasons2;
  }(GridCellEditStartReasons || {});
  var GridCellEditStopReasons = function(GridCellEditStopReasons2) {
    GridCellEditStopReasons2["cellFocusOut"] = "cellFocusOut";
    GridCellEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
    GridCellEditStopReasons2["enterKeyDown"] = "enterKeyDown";
    GridCellEditStopReasons2["tabKeyDown"] = "tabKeyDown";
    GridCellEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
    return GridCellEditStopReasons2;
  }(GridCellEditStopReasons || {});

  // node_modules/@mui/x-data-grid/models/params/gridRowParams.js
  var GridRowEditStartReasons = function(GridRowEditStartReasons2) {
    GridRowEditStartReasons2["enterKeyDown"] = "enterKeyDown";
    GridRowEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
    GridRowEditStartReasons2["printableKeyDown"] = "printableKeyDown";
    GridRowEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
    return GridRowEditStartReasons2;
  }(GridRowEditStartReasons || {});
  var GridRowEditStopReasons = function(GridRowEditStopReasons2) {
    GridRowEditStopReasons2["rowFocusOut"] = "rowFocusOut";
    GridRowEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
    GridRowEditStopReasons2["enterKeyDown"] = "enterKeyDown";
    GridRowEditStopReasons2["tabKeyDown"] = "tabKeyDown";
    GridRowEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
    return GridRowEditStopReasons2;
  }(GridRowEditStopReasons || {});

  // node_modules/@mui/x-data-grid/models/gridColumnGrouping.js
  function isLeaf(node) {
    return node.field !== void 0;
  }

  // node_modules/@mui/x-data-grid/components/cell/GridCell.js
  const React287 = __toModule(require_react());
  const prop_types197 = __toModule(require_prop_types7());
  const jsx_runtime293 = __toModule(require_jsx_runtime());
  const _excluded184 = ["align", "children", "colIndex", "colDef", "cellMode", "field", "formattedValue", "hasFocus", "height", "isEditable", "isSelected", "rowId", "tabIndex", "value", "width", "className", "showRightBorder", "extendRowFullWidth", "row", "colSpan", "disableDragEvents", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onMouseOver", "onKeyDown", "onKeyUp", "onDragEnter", "onDragOver"];
  let cachedSupportsPreventScroll;
  function doesSupportPreventScroll() {
    if (cachedSupportsPreventScroll === void 0) {
      document.createElement("div").focus({
        get preventScroll() {
          cachedSupportsPreventScroll = true;
          return false;
        }
      });
    }
    return cachedSupportsPreventScroll;
  }
  const useUtilityClasses140 = (ownerState) => {
    const {
      align,
      showRightBorder,
      isEditable,
      isSelected,
      classes
    } = ownerState;
    const slots = {
      root: ["cell", `cell--text${capitalize48(align)}`, isEditable && "cell--editable", isSelected && "selected", showRightBorder && "cell--withRightBorder", "withBorderColor"],
      content: ["cellContent"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridCell = React287.forwardRef((props, ref) => {
    var _rootProps$experiment;
    const {
      align,
      children,
      colIndex,
      cellMode,
      field,
      formattedValue,
      hasFocus,
      height: height2,
      isEditable,
      isSelected,
      rowId,
      tabIndex,
      value,
      width: width2,
      className: className3,
      showRightBorder,
      colSpan,
      disableDragEvents,
      onClick,
      onDoubleClick,
      onMouseDown,
      onMouseUp,
      onMouseOver,
      onKeyDown,
      onKeyUp,
      onDragEnter,
      onDragOver
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded184);
    const valueToRender = formattedValue == null ? value : formattedValue;
    const cellRef = React287.useRef(null);
    const handleRef = useForkRef(ref, cellRef);
    const focusElementRef = React287.useRef(null);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = {
      align,
      showRightBorder,
      isEditable,
      classes: rootProps.classes,
      isSelected
    };
    const classes = useUtilityClasses140(ownerState);
    const publishMouseUp = React287.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseUp) {
        onMouseUp(event);
      }
    }, [apiRef, field, onMouseUp, rowId]);
    const publishMouseDown = React287.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseDown) {
        onMouseDown(event);
      }
    }, [apiRef, field, onMouseDown, rowId]);
    const publish = React287.useCallback((eventName, propHandler) => (event) => {
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, field, rowId]);
    const style16 = {
      minWidth: width2,
      maxWidth: width2,
      minHeight: height2,
      maxHeight: height2 === "auto" ? "none" : height2
    };
    React287.useEffect(() => {
      if (!hasFocus || cellMode === GridCellModes.Edit) {
        return;
      }
      const doc = ownerDocument(apiRef.current.rootElementRef.current);
      if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
        const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;
        if (doesSupportPreventScroll()) {
          elementToFocus.focus({
            preventScroll: true
          });
        } else {
          const scrollPosition = apiRef.current.getScrollPosition();
          elementToFocus.focus();
          apiRef.current.scroll(scrollPosition);
        }
      }
    }, [hasFocus, cellMode, apiRef]);
    let handleFocus = other.onFocus;
    if (false) {
      handleFocus = (event) => {
        const focusedCell = gridFocusCellSelector(apiRef);
        if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {
          if (typeof other.onFocus === "function") {
            other.onFocus(event);
          }
          return;
        }
        if (!warnedOnce3) {
          console.warn([`MUI: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell == null ? void 0 : focusedCell.id}, field=${focusedCell == null ? void 0 : focusedCell.field}.`, "Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.", "Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state."].join("\n"));
          warnedOnce3 = true;
        }
      };
    }
    const column = apiRef.current.getColumn(field);
    const managesOwnFocus = column.type === "actions";
    const renderChildren = () => {
      if (children === void 0) {
        const valueString = valueToRender == null ? void 0 : valueToRender.toString();
        return jsx_runtime293.jsx("div", {
          className: classes.content,
          title: valueString,
          children: valueString
        });
      }
      if (React287.isValidElement(children) && managesOwnFocus) {
        return React287.cloneElement(children, {
          focusElementRef
        });
      }
      return children;
    };
    const draggableEventHandlers = disableDragEvents ? null : {
      onDragEnter: publish("cellDragEnter", onDragEnter),
      onDragOver: publish("cellDragOver", onDragOver)
    };
    return jsx_runtime293.jsx("div", _extends({
      ref: handleRef,
      className: clsx_m_default(className3, classes.root),
      role: "cell",
      "data-field": field,
      "data-colindex": colIndex,
      "aria-colindex": colIndex + 1,
      "aria-colspan": colSpan,
      style: style16,
      tabIndex: (cellMode === "view" || !isEditable) && !managesOwnFocus ? tabIndex : -1,
      onClick: publish("cellClick", onClick),
      onDoubleClick: publish("cellDoubleClick", onDoubleClick),
      onMouseOver: publish("cellMouseOver", onMouseOver),
      onMouseDown: publishMouseDown("cellMouseDown"),
      onMouseUp: publishMouseUp("cellMouseUp"),
      onKeyDown: publish("cellKeyDown", onKeyDown),
      onKeyUp: publish("cellKeyUp", onKeyUp)
    }, draggableEventHandlers, other, {
      onFocus: handleFocus,
      children: renderChildren()
    }));
  });
  const MemoizedCell = React287.memo(GridCell);
  GridCell.propTypes = {
    align: prop_types197.default.oneOf(["center", "left", "right"]),
    cellMode: prop_types197.default.oneOf(["edit", "view"]),
    children: prop_types197.default.node,
    className: prop_types197.default.string,
    colIndex: prop_types197.default.number,
    colSpan: prop_types197.default.number,
    disableDragEvents: prop_types197.default.bool,
    field: prop_types197.default.string,
    formattedValue: prop_types197.default.any,
    hasFocus: prop_types197.default.bool,
    height: prop_types197.default.oneOfType([prop_types197.default.oneOf(["auto"]), prop_types197.default.number]),
    isEditable: prop_types197.default.bool,
    isSelected: prop_types197.default.bool,
    onClick: prop_types197.default.func,
    onDoubleClick: prop_types197.default.func,
    onDragEnter: prop_types197.default.func,
    onDragOver: prop_types197.default.func,
    onKeyDown: prop_types197.default.func,
    onMouseDown: prop_types197.default.func,
    onMouseUp: prop_types197.default.func,
    rowId: prop_types197.default.oneOfType([prop_types197.default.number, prop_types197.default.string]),
    showRightBorder: prop_types197.default.bool,
    tabIndex: prop_types197.default.oneOf([-1, 0]),
    value: prop_types197.default.any,
    width: prop_types197.default.number
  };

  // node_modules/@mui/x-data-grid/components/cell/GridBooleanCell.js
  const React286 = __toModule(require_react());
  const prop_types196 = __toModule(require_prop_types7());
  const jsx_runtime292 = __toModule(require_jsx_runtime());
  const _excluded183 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "hasFocus", "tabIndex"];
  const useUtilityClasses139 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["booleanCell"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridBooleanCellRaw(props) {
    const {
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded183);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses139(ownerState);
    const Icon4 = React286.useMemo(() => value ? rootProps.slots.booleanCellTrueIcon : rootProps.slots.booleanCellFalseIcon, [rootProps.slots.booleanCellFalseIcon, rootProps.slots.booleanCellTrueIcon, value]);
    return jsx_runtime292.jsx(Icon4, _extends({
      fontSize: "small",
      className: classes.root,
      titleAccess: apiRef.current.getLocaleText(value ? "booleanCellTrueLabel" : "booleanCellFalseLabel"),
      "data-value": Boolean(value)
    }, other));
  }
  GridBooleanCellRaw.propTypes = {
    api: prop_types196.default.object.isRequired,
    cellMode: prop_types196.default.oneOf(["edit", "view"]).isRequired,
    colDef: prop_types196.default.object.isRequired,
    field: prop_types196.default.string.isRequired,
    focusElementRef: prop_types196.default.oneOfType([prop_types196.default.func, prop_types196.default.shape({
      current: prop_types196.default.shape({
        focus: prop_types196.default.func.isRequired
      })
    })]),
    formattedValue: prop_types196.default.any,
    hasFocus: prop_types196.default.bool.isRequired,
    id: prop_types196.default.oneOfType([prop_types196.default.number, prop_types196.default.string]).isRequired,
    isEditable: prop_types196.default.bool,
    row: prop_types196.default.any.isRequired,
    rowNode: prop_types196.default.object.isRequired,
    tabIndex: prop_types196.default.oneOf([-1, 0]).isRequired,
    value: prop_types196.default.any
  };
  const GridBooleanCell2 = React286.memo(GridBooleanCellRaw);
  const renderBooleanCell = (params) => {
    if (isAutoGeneratedRow(params.rowNode)) {
      return "";
    }
    return jsx_runtime292.jsx(GridBooleanCell2, _extends({}, params));
  };

  // node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.js
  const React288 = __toModule(require_react());
  const prop_types198 = __toModule(require_prop_types7());
  const jsx_runtime294 = __toModule(require_jsx_runtime());
  const _excluded185 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange"];
  const useUtilityClasses141 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editBooleanCell"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridEditBooleanCell2(props) {
    var _rootProps$slotProps;
    const {
      id: idProp,
      value,
      field,
      className: className3,
      hasFocus,
      onValueChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded185);
    const apiRef = useGridApiContext2();
    const inputRef = React288.useRef(null);
    const id = useId();
    const [valueState, setValueState] = React288.useState(value);
    const rootProps = useGridRootProps2();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses141(ownerState);
    const handleChange = React288.useCallback(async (event) => {
      const newValue = event.target.checked;
      if (onValueChange) {
        await onValueChange(event, newValue);
      }
      setValueState(newValue);
      await apiRef.current.setEditCellValue({
        id: idProp,
        field,
        value: newValue
      }, event);
    }, [apiRef, field, idProp, onValueChange]);
    React288.useEffect(() => {
      setValueState(value);
    }, [value]);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return jsx_runtime294.jsx("label", _extends({
      htmlFor: id,
      className: clsx_m_default(classes.root, className3)
    }, other, {
      children: jsx_runtime294.jsx(rootProps.slots.baseCheckbox, _extends({
        id,
        inputRef,
        checked: Boolean(valueState),
        onChange: handleChange,
        size: "small"
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox))
    }));
  }
  GridEditBooleanCell2.propTypes = {
    api: prop_types198.default.object.isRequired,
    cellMode: prop_types198.default.oneOf(["edit", "view"]).isRequired,
    changeReason: prop_types198.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    colDef: prop_types198.default.object.isRequired,
    field: prop_types198.default.string.isRequired,
    formattedValue: prop_types198.default.any,
    hasFocus: prop_types198.default.bool.isRequired,
    id: prop_types198.default.oneOfType([prop_types198.default.number, prop_types198.default.string]).isRequired,
    isEditable: prop_types198.default.bool,
    isProcessingProps: prop_types198.default.bool,
    isValidating: prop_types198.default.bool,
    onValueChange: prop_types198.default.func,
    row: prop_types198.default.any.isRequired,
    rowNode: prop_types198.default.object.isRequired,
    tabIndex: prop_types198.default.oneOf([-1, 0]).isRequired,
    value: prop_types198.default.any
  };
  const renderEditBooleanCell = (params) => jsx_runtime294.jsx(GridEditBooleanCell2, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridEditDateCell.js
  const React289 = __toModule(require_react());
  const prop_types199 = __toModule(require_prop_types7());
  const jsx_runtime295 = __toModule(require_jsx_runtime());
  const _excluded186 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "inputProps", "isValidating", "isProcessingProps", "onValueChange"];
  const StyledInputBase = styled_default(InputBase_default)({
    fontSize: "inherit"
  });
  const useUtilityClasses142 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editInputCell"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridEditDateCell2(props) {
    const {
      id,
      value: valueProp,
      field,
      colDef: colDef6,
      hasFocus,
      inputProps,
      onValueChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded186);
    const isDateTime = colDef6.type === "dateTime";
    const apiRef = useGridApiContext2();
    const inputRef = React289.useRef();
    const valueTransformed = React289.useMemo(() => {
      let parsedDate;
      if (valueProp == null) {
        parsedDate = null;
      } else if (valueProp instanceof Date) {
        parsedDate = valueProp;
      } else {
        parsedDate = new Date((valueProp != null ? valueProp : "").toString());
      }
      let formattedDate;
      if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {
        formattedDate = "";
      } else {
        const localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1e3);
        formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);
      }
      return {
        parsed: parsedDate,
        formatted: formattedDate
      };
    }, [valueProp, isDateTime]);
    const [valueState, setValueState] = React289.useState(valueTransformed);
    const rootProps = useGridRootProps2();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses142(ownerState);
    const hasUpdatedEditValueOnMount = React289.useRef(false);
    const parseValueToDate = React289.useCallback((value) => {
      if (value === "") {
        return null;
      }
      const [date, time] = value.split("T");
      const [year, month, day] = date.split("-");
      const parsedDate = new Date();
      parsedDate.setFullYear(Number(year), Number(month) - 1, Number(day));
      parsedDate.setHours(0, 0, 0, 0);
      if (time) {
        const [hours, minutes] = time.split(":");
        parsedDate.setHours(Number(hours), Number(minutes), 0, 0);
      }
      return parsedDate;
    }, []);
    const handleChange = React289.useCallback(async (event) => {
      const newFormattedDate = event.target.value;
      const newParsedDate = parseValueToDate(newFormattedDate);
      if (onValueChange) {
        await onValueChange(event, newParsedDate);
      }
      setValueState({
        parsed: newParsedDate,
        formatted: newFormattedDate
      });
      apiRef.current.setEditCellValue({
        id,
        field,
        value: newParsedDate
      }, event);
    }, [apiRef, field, id, onValueChange, parseValueToDate]);
    React289.useEffect(() => {
      setValueState((state) => {
        var _valueTransformed$par, _state$parsed;
        if (valueTransformed.parsed !== state.parsed && ((_valueTransformed$par = valueTransformed.parsed) == null ? void 0 : _valueTransformed$par.getTime()) !== ((_state$parsed = state.parsed) == null ? void 0 : _state$parsed.getTime())) {
          return valueTransformed;
        }
        return state;
      });
    }, [valueTransformed]);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    const meta = apiRef.current.unstable_getEditCellMeta(id, field);
    const handleInputRef = (el) => {
      inputRef.current = el;
      if (meta.unstable_updateValueOnRender && !hasUpdatedEditValueOnMount.current) {
        const inputValue = inputRef.current.value;
        const parsedDate = parseValueToDate(inputValue);
        setValueState({
          parsed: parsedDate,
          formatted: inputValue
        });
        apiRef.current.setEditCellValue({
          id,
          field,
          value: parsedDate
        });
        hasUpdatedEditValueOnMount.current = true;
      }
    };
    return jsx_runtime295.jsx(StyledInputBase, _extends({
      inputRef: handleInputRef,
      fullWidth: true,
      className: classes.root,
      type: isDateTime ? "datetime-local" : "date",
      inputProps: _extends({
        max: isDateTime ? "9999-12-31T23:59" : "9999-12-31"
      }, inputProps),
      value: valueState.formatted,
      onChange: handleChange
    }, other));
  }
  GridEditDateCell2.propTypes = {
    api: prop_types199.default.object.isRequired,
    cellMode: prop_types199.default.oneOf(["edit", "view"]).isRequired,
    changeReason: prop_types199.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    colDef: prop_types199.default.object.isRequired,
    field: prop_types199.default.string.isRequired,
    formattedValue: prop_types199.default.any,
    hasFocus: prop_types199.default.bool.isRequired,
    id: prop_types199.default.oneOfType([prop_types199.default.number, prop_types199.default.string]).isRequired,
    isEditable: prop_types199.default.bool,
    isProcessingProps: prop_types199.default.bool,
    isValidating: prop_types199.default.bool,
    onValueChange: prop_types199.default.func,
    row: prop_types199.default.any.isRequired,
    rowNode: prop_types199.default.object.isRequired,
    tabIndex: prop_types199.default.oneOf([-1, 0]).isRequired,
    value: prop_types199.default.any
  };
  const renderEditDateCell = (params) => jsx_runtime295.jsx(GridEditDateCell2, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.js
  const React290 = __toModule(require_react());
  const prop_types200 = __toModule(require_prop_types7());
  const jsx_runtime296 = __toModule(require_jsx_runtime());
  const _excluded187 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "isValidating", "debounceMs", "isProcessingProps", "onValueChange"];
  const useUtilityClasses143 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editInputCell"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridEditInputCellRoot = styled_default(InputBase_default, {
    name: "MuiDataGrid",
    slot: "EditInputCell",
    overridesResolver: (props, styles30) => styles30.editInputCell
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    padding: "1px 0",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  }));
  const GridEditInputCell2 = React290.forwardRef((props, ref) => {
    const rootProps = useGridRootProps2();
    const {
      id,
      value,
      field,
      colDef: colDef6,
      hasFocus,
      debounceMs = 200,
      isProcessingProps,
      onValueChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded187);
    const apiRef = useGridApiContext2();
    const inputRef = React290.useRef();
    const [valueState, setValueState] = React290.useState(value);
    const classes = useUtilityClasses143(rootProps);
    const handleChange = React290.useCallback(async (event) => {
      const newValue = event.target.value;
      if (onValueChange) {
        await onValueChange(event, newValue);
      }
      const column = apiRef.current.getColumn(field);
      let parsedValue = newValue;
      if (column.valueParser) {
        parsedValue = column.valueParser(newValue, apiRef.current.getCellParams(id, field));
      }
      setValueState(parsedValue);
      apiRef.current.setEditCellValue({
        id,
        field,
        value: parsedValue,
        debounceMs,
        unstable_skipValueParser: true
      }, event);
    }, [apiRef, debounceMs, field, id, onValueChange]);
    const meta = apiRef.current.unstable_getEditCellMeta ? apiRef.current.unstable_getEditCellMeta(id, field) : {};
    React290.useEffect(() => {
      if (meta.changeReason !== "debouncedSetEditCellValue") {
        setValueState(value);
      }
    }, [meta.changeReason, value]);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return jsx_runtime296.jsx(GridEditInputCellRoot, _extends({
      ref,
      inputRef,
      className: classes.root,
      ownerState: rootProps,
      fullWidth: true,
      type: colDef6.type === "number" ? colDef6.type : "text",
      value: valueState != null ? valueState : "",
      onChange: handleChange,
      endAdornment: isProcessingProps ? jsx_runtime296.jsx(rootProps.slots.loadIcon, {}) : void 0
    }, other));
  });
  GridEditInputCell2.propTypes = {
    api: prop_types200.default.object,
    cellMode: prop_types200.default.oneOf(["edit", "view"]),
    changeReason: prop_types200.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    colDef: prop_types200.default.object,
    debounceMs: prop_types200.default.number,
    field: prop_types200.default.string,
    formattedValue: prop_types200.default.any,
    hasFocus: prop_types200.default.bool,
    id: prop_types200.default.oneOfType([prop_types200.default.number, prop_types200.default.string]),
    isEditable: prop_types200.default.bool,
    isProcessingProps: prop_types200.default.bool,
    isValidating: prop_types200.default.bool,
    onValueChange: prop_types200.default.func,
    row: prop_types200.default.any,
    rowNode: prop_types200.default.object,
    tabIndex: prop_types200.default.oneOf([-1, 0]),
    value: prop_types200.default.any
  };
  const renderEditInputCell = (params) => jsx_runtime296.jsx(GridEditInputCell2, _extends({}, params));

  // node_modules/@mui/x-data-grid/utils/keyboardUtils.js
  const isEscapeKey = (key) => key === "Escape";
  const isEnterKey = (key) => key === "Enter";
  const isTabKey = (key) => key === "Tab";
  const isSpaceKey = (key) => key === " ";
  const isArrowKeys = (key) => key.indexOf("Arrow") === 0;
  const isHomeOrEndKeys = (key) => key === "Home" || key === "End";
  const isPageKeys = (key) => key.indexOf("Page") === 0;
  function isPrintableKey(event) {
    return event.key.length === 1 && event.ctrlKey === false && event.metaKey === false;
  }
  const isNavigationKey = (key) => isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);
  const isKeyboardEvent2 = (event) => !!event.key;
  const isHideMenuKey = (key) => isTabKey(key) || isEscapeKey(key);

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/filterPanelUtils.js
  function isSingleSelectColDef(colDef6) {
    return (colDef6 == null ? void 0 : colDef6.type) === "singleSelect";
  }
  function getValueFromValueOptions(value, valueOptions, getOptionValue) {
    if (valueOptions === void 0) {
      return void 0;
    }
    const result = valueOptions.find((option) => {
      const optionValue = getOptionValue(option);
      return String(optionValue) === String(value);
    });
    return getOptionValue(result);
  }

  // node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
  const React291 = __toModule(require_react());
  const prop_types201 = __toModule(require_prop_types7());
  const react14 = __toModule(require_react());
  const jsx_runtime297 = __toModule(require_jsx_runtime());
  const _excluded188 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange", "initialOpen", "getOptionLabel", "getOptionValue"];
  const _excluded223 = ["MenuProps"];
  function isKeyboardEvent(event) {
    return !!event.key;
  }
  function GridEditSingleSelectCell2(props) {
    var _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2;
    const rootProps = useGridRootProps2();
    const {
      id,
      value: valueProp,
      field,
      row,
      colDef: colDef6,
      hasFocus,
      error,
      onValueChange,
      initialOpen = rootProps.editMode === GridEditModes.Cell,
      getOptionLabel: getOptionLabelProp,
      getOptionValue: getOptionValueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded188);
    const apiRef = useGridApiContext2();
    const ref = React291.useRef();
    const inputRef = React291.useRef();
    const [open, setOpen] = React291.useState(initialOpen);
    const baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;
    const _ref = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelect) || {}, {
      MenuProps
    } = _ref, otherBaseSelectProps = _objectWithoutPropertiesLoose(_ref, _excluded223);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        var _inputRef$current;
        (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
      }
    }, [hasFocus]);
    if (!isSingleSelectColDef(colDef6)) {
      return null;
    }
    let valueOptions;
    if (typeof (colDef6 == null ? void 0 : colDef6.valueOptions) === "function") {
      valueOptions = colDef6 == null ? void 0 : colDef6.valueOptions({
        id,
        row,
        field
      });
    } else {
      valueOptions = colDef6 == null ? void 0 : colDef6.valueOptions;
    }
    if (!valueOptions) {
      return null;
    }
    const getOptionValue = getOptionValueProp || colDef6.getOptionValue;
    const getOptionLabel = getOptionLabelProp || colDef6.getOptionLabel;
    const handleChange = async (event) => {
      if (!isSingleSelectColDef(colDef6) || !valueOptions) {
        return;
      }
      setOpen(false);
      const target = event.target;
      const formattedTargetValue = getValueFromValueOptions(target.value, valueOptions, getOptionValue);
      if (onValueChange) {
        await onValueChange(event, formattedTargetValue);
      }
      await apiRef.current.setEditCellValue({
        id,
        field,
        value: formattedTargetValue
      }, event);
    };
    const handleClose = (event, reason) => {
      if (rootProps.editMode === GridEditModes.Row) {
        setOpen(false);
        return;
      }
      if (reason === "backdropClick" || isEscapeKey(event.key)) {
        apiRef.current.stopCellEditMode({
          id,
          field,
          ignoreModifications: true
        });
      }
    };
    const handleOpen = (event) => {
      if (isKeyboardEvent(event) && event.key === "Enter") {
        return;
      }
      setOpen(true);
    };
    if (!valueOptions || !colDef6) {
      return null;
    }
    return jsx_runtime297.jsx(rootProps.slots.baseSelect, _extends({
      ref,
      inputRef,
      value: valueProp,
      onChange: handleChange,
      open,
      onOpen: handleOpen,
      MenuProps: _extends({
        onClose: handleClose
      }, MenuProps),
      error,
      native: isSelectNative,
      fullWidth: true
    }, other, otherBaseSelectProps, {
      children: valueOptions.map((valueOption) => {
        var _rootProps$slotProps3;
        const value = getOptionValue(valueOption);
        return react14.createElement(rootProps.slots.baseSelectOption, _extends({}, ((_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelectOption) || {}, {
          native: isSelectNative,
          key: value,
          value
        }), getOptionLabel(valueOption));
      })
    }));
  }
  GridEditSingleSelectCell2.propTypes = {
    api: prop_types201.default.object.isRequired,
    cellMode: prop_types201.default.oneOf(["edit", "view"]).isRequired,
    changeReason: prop_types201.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    colDef: prop_types201.default.object.isRequired,
    field: prop_types201.default.string.isRequired,
    formattedValue: prop_types201.default.any,
    getOptionLabel: prop_types201.default.func,
    getOptionValue: prop_types201.default.func,
    hasFocus: prop_types201.default.bool.isRequired,
    id: prop_types201.default.oneOfType([prop_types201.default.number, prop_types201.default.string]).isRequired,
    initialOpen: prop_types201.default.bool,
    isEditable: prop_types201.default.bool,
    isProcessingProps: prop_types201.default.bool,
    isValidating: prop_types201.default.bool,
    onValueChange: prop_types201.default.func,
    row: prop_types201.default.any.isRequired,
    rowNode: prop_types201.default.object.isRequired,
    tabIndex: prop_types201.default.oneOf([-1, 0]).isRequired,
    value: prop_types201.default.any
  };
  const renderEditSingleSelectCell = (params) => jsx_runtime297.jsx(GridEditSingleSelectCell2, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/menu/GridMenu.js
  const React311 = __toModule(require_react());
  const prop_types214 = __toModule(require_prop_types7());
  const jsx_runtime321 = __toModule(require_jsx_runtime());
  const _excluded202 = ["open", "target", "onClickAway", "children", "position", "className", "onExited"];
  const useUtilityClasses162 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["menu"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridMenuRoot = styled_default(Popper_default2, {
    name: "MuiDataGrid",
    slot: "Menu",
    overridesResolver: (_6, styles30) => styles30.menu
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.modal,
    [`& .${gridClasses7.menuList}`]: {
      outline: 0
    }
  }));
  const transformOrigin = {
    "bottom-start": "top left",
    "bottom-end": "top right"
  };
  function GridMenu2(props) {
    var _rootProps$slotProps;
    const {
      open,
      target,
      onClickAway,
      children,
      position: position2,
      className: className3,
      onExited
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded202);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses162(rootProps);
    React311.useEffect(() => {
      const eventName = open ? "menuOpen" : "menuClose";
      apiRef.current.publishEvent(eventName, {
        target
      });
    }, [apiRef, open, target]);
    const handleExited = (popperOnExited) => (node) => {
      if (popperOnExited) {
        popperOnExited();
      }
      if (onExited) {
        onExited(node);
      }
    };
    return jsx_runtime321.jsx(GridMenuRoot, _extends({
      as: rootProps.slots.basePopper,
      className: clsx_m_default(className3, classes.root),
      ownerState: rootProps,
      open,
      anchorEl: target,
      transition: true,
      placement: position2
    }, other, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.basePopper, {
      children: ({
        TransitionProps,
        placement
      }) => jsx_runtime321.jsx(ClickAwayListener_default, {
        onClickAway,
        mouseEvent: "onMouseDown",
        children: jsx_runtime321.jsx(Grow_default, _extends({}, TransitionProps, {
          style: {
            transformOrigin: transformOrigin[placement]
          },
          onExited: handleExited(TransitionProps == null ? void 0 : TransitionProps.onExited),
          children: jsx_runtime321.jsx(Paper_default, {
            children
          })
        }))
      })
    }));
  }
  GridMenu2.propTypes = {
    children: prop_types214.default.node,
    onClickAway: prop_types214.default.func.isRequired,
    onExited: prop_types214.default.func,
    open: prop_types214.default.bool.isRequired,
    position: prop_types214.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    target: HTMLElementType
  };

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
  const React284 = __toModule(require_react());
  const prop_types194 = __toModule(require_prop_types7());
  const jsx_runtime288 = __toModule(require_jsx_runtime());
  const jsx_runtime289 = __toModule(require_jsx_runtime());
  const _excluded181 = ["api", "colDef", "id", "hasFocus", "isEditable", "field", "value", "formattedValue", "row", "rowNode", "cellMode", "tabIndex", "position", "focusElementRef"];
  const hasActions = (colDef6) => typeof colDef6.getActions === "function";
  function GridActionsCell2(props) {
    var _rootProps$slotProps;
    const {
      colDef: colDef6,
      id,
      hasFocus,
      tabIndex,
      position: position2 = "bottom-end",
      focusElementRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded181);
    const [focusedButtonIndex, setFocusedButtonIndex] = React284.useState(-1);
    const [open, setOpen] = React284.useState(false);
    const apiRef = useGridApiContext2();
    const rootRef = React284.useRef(null);
    const buttonRef = React284.useRef(null);
    const ignoreCallToFocus = React284.useRef(false);
    const touchRippleRefs = React284.useRef({});
    const theme = useTheme3();
    const menuId = useId();
    const buttonId = useId();
    const rootProps = useGridRootProps2();
    if (!hasActions(colDef6)) {
      throw new Error("MUI: Missing the `getActions` property in the `GridColDef`.");
    }
    const options = colDef6.getActions(apiRef.current.getRowParams(id));
    const iconButtons = options.filter((option) => !option.props.showInMenu);
    const menuButtons = options.filter((option) => option.props.showInMenu);
    const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);
    React284.useLayoutEffect(() => {
      if (!hasFocus) {
        Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {
          ref == null ? void 0 : ref.stop({}, () => {
            delete touchRippleRefs.current[index];
          });
        });
      }
    }, [hasFocus]);
    React284.useEffect(() => {
      if (focusedButtonIndex < 0 || !rootRef.current) {
        return;
      }
      if (focusedButtonIndex >= rootRef.current.children.length) {
        return;
      }
      const child = rootRef.current.children[focusedButtonIndex];
      child.focus({
        preventScroll: true
      });
    }, [focusedButtonIndex]);
    React284.useEffect(() => {
      if (!hasFocus) {
        setFocusedButtonIndex(-1);
        ignoreCallToFocus.current = false;
      }
    }, [hasFocus]);
    React284.useImperativeHandle(focusElementRef, () => ({
      focus() {
        if (!ignoreCallToFocus.current) {
          setFocusedButtonIndex(0);
        }
      }
    }), []);
    React284.useEffect(() => {
      if (focusedButtonIndex >= numberOfButtons) {
        setFocusedButtonIndex(numberOfButtons - 1);
      }
    }, [focusedButtonIndex, numberOfButtons]);
    const showMenu = () => {
      setOpen(true);
      setFocusedButtonIndex(numberOfButtons - 1);
      ignoreCallToFocus.current = true;
    };
    const hideMenu = () => {
      setOpen(false);
    };
    const handleTouchRippleRef = (index) => (instance) => {
      touchRippleRefs.current[index] = instance;
    };
    const handleButtonClick = (index, onClick) => (event) => {
      setFocusedButtonIndex(index);
      ignoreCallToFocus.current = true;
      if (onClick) {
        onClick(event);
      }
    };
    const handleRootKeyDown = (event) => {
      if (numberOfButtons <= 1) {
        return;
      }
      let newIndex = focusedButtonIndex;
      if (event.key === "ArrowRight") {
        if (theme.direction === "rtl") {
          newIndex -= 1;
        } else {
          newIndex += 1;
        }
      } else if (event.key === "ArrowLeft") {
        if (theme.direction === "rtl") {
          newIndex += 1;
        } else {
          newIndex -= 1;
        }
      }
      if (newIndex < 0 || newIndex >= numberOfButtons) {
        return;
      }
      if (newIndex !== focusedButtonIndex) {
        event.preventDefault();
        event.stopPropagation();
        setFocusedButtonIndex(newIndex);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
      }
      if (["Tab", "Enter", "Escape"].includes(event.key)) {
        hideMenu();
      }
    };
    return jsx_runtime289.jsxs("div", _extends({
      role: "menu",
      ref: rootRef,
      tabIndex: -1,
      className: gridClasses7.actionsCell,
      onKeyDown: handleRootKeyDown
    }, other, {
      children: [iconButtons.map((button, index) => React284.cloneElement(button, {
        key: index,
        touchRippleRef: handleTouchRippleRef(index),
        onClick: handleButtonClick(index, button.props.onClick),
        tabIndex: focusedButtonIndex === index ? tabIndex : -1
      })), menuButtons.length > 0 && buttonId && jsx_runtime288.jsx(rootProps.slots.baseIconButton, _extends({
        ref: buttonRef,
        id: buttonId,
        "aria-label": apiRef.current.getLocaleText("actionsCellMore"),
        "aria-controls": menuId,
        "aria-expanded": open ? "true" : void 0,
        "aria-haspopup": "true",
        role: "menuitem",
        size: "small",
        onClick: showMenu,
        touchRippleRef: handleTouchRippleRef(buttonId),
        tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
        children: jsx_runtime288.jsx(rootProps.slots.moreActionsIcon, {
          fontSize: "small"
        })
      })), menuButtons.length > 0 && jsx_runtime288.jsx(GridMenu2, {
        onClickAway: hideMenu,
        onClick: hideMenu,
        open,
        target: buttonRef.current,
        position: position2,
        children: jsx_runtime288.jsx(MenuList_default, {
          id: menuId,
          className: gridClasses7.menuList,
          onKeyDown: handleListKeyDown,
          "aria-labelledby": buttonId,
          variant: "menu",
          autoFocusItem: true,
          children: menuButtons.map((button, index) => React284.cloneElement(button, {
            key: index
          }))
        })
      })]
    }));
  }
  GridActionsCell2.propTypes = {
    api: prop_types194.default.object,
    cellMode: prop_types194.default.oneOf(["edit", "view"]).isRequired,
    colDef: prop_types194.default.object.isRequired,
    field: prop_types194.default.string.isRequired,
    focusElementRef: prop_types194.default.oneOfType([prop_types194.default.func, prop_types194.default.shape({
      current: prop_types194.default.shape({
        focus: prop_types194.default.func.isRequired
      })
    })]),
    formattedValue: prop_types194.default.any,
    hasFocus: prop_types194.default.bool.isRequired,
    id: prop_types194.default.oneOfType([prop_types194.default.number, prop_types194.default.string]).isRequired,
    isEditable: prop_types194.default.bool,
    position: prop_types194.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    row: prop_types194.default.any.isRequired,
    rowNode: prop_types194.default.object.isRequired,
    tabIndex: prop_types194.default.oneOf([-1, 0]).isRequired,
    value: prop_types194.default.any
  };
  const renderActionsCell = (params) => jsx_runtime288.jsx(GridActionsCell2, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridSkeletonCell.js
  const React292 = __toModule(require_react());
  const prop_types202 = __toModule(require_prop_types7());
  const jsx_runtime298 = __toModule(require_jsx_runtime());
  const _excluded189 = ["field", "align", "width", "contentWidth"];
  const useUtilityClasses144 = (ownerState) => {
    const {
      align,
      classes
    } = ownerState;
    const slots = {
      root: ["cell", "cellSkeleton", `cell--text${capitalize48(align)}`, "withBorderColor"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridSkeletonCell(props) {
    const {
      align,
      width: width2,
      contentWidth
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded189);
    const rootProps = useGridRootProps2();
    const ownerState = {
      classes: rootProps.classes,
      align
    };
    const classes = useUtilityClasses144(ownerState);
    return jsx_runtime298.jsx("div", _extends({
      className: classes.root,
      style: {
        width: width2
      }
    }, other, {
      children: jsx_runtime298.jsx(Skeleton_default, {
        width: `${contentWidth}%`
      })
    }));
  }
  GridSkeletonCell.propTypes = {
    align: prop_types202.default.string.isRequired,
    contentWidth: prop_types202.default.number.isRequired,
    field: prop_types202.default.string.isRequired,
    width: prop_types202.default.number.isRequired
  };

  // node_modules/@mui/x-data-grid/components/containers/GridRootStyles.js
  function getBorderColor(theme) {
    if (theme.vars) {
      return theme.vars.palette.TableCell.border;
    }
    if (theme.palette.mode === "light") {
      return lighten(alpha(theme.palette.divider, 1), 0.88);
    }
    return darken(alpha(theme.palette.divider, 1), 0.68);
  }
  const GridRootStyles2 = styled_default("div", {
    name: "MuiDataGrid",
    slot: "Root",
    overridesResolver: (props, styles30) => [
      {
        [`&.${gridClasses7.autoHeight}`]: styles30.autoHeight
      },
      {
        [`&.${gridClasses7.aggregationColumnHeader}`]: styles30.aggregationColumnHeader
      },
      {
        [`&.${gridClasses7["aggregationColumnHeader--alignLeft"]}`]: styles30["aggregationColumnHeader--alignLeft"]
      },
      {
        [`&.${gridClasses7["aggregationColumnHeader--alignCenter"]}`]: styles30["aggregationColumnHeader--alignCenter"]
      },
      {
        [`&.${gridClasses7["aggregationColumnHeader--alignRight"]}`]: styles30["aggregationColumnHeader--alignRight"]
      },
      {
        [`&.${gridClasses7.aggregationColumnHeaderLabel}`]: styles30.aggregationColumnHeaderLabel
      },
      {
        [`&.${gridClasses7["root--disableUserSelection"]} .${gridClasses7.cell}`]: styles30["root--disableUserSelection"]
      },
      {
        [`& .${gridClasses7.editBooleanCell}`]: styles30.editBooleanCell
      },
      {
        [`& .${gridClasses7["cell--editing"]}`]: styles30["cell--editing"]
      },
      {
        [`& .${gridClasses7["cell--textCenter"]}`]: styles30["cell--textCenter"]
      },
      {
        [`& .${gridClasses7["cell--textLeft"]}`]: styles30["cell--textLeft"]
      },
      {
        [`& .${gridClasses7["cell--textRight"]}`]: styles30["cell--textRight"]
      },
      {
        [`& .${gridClasses7["cell--withRenderer"]}`]: styles30["cell--withRenderer"]
      },
      {
        [`& .${gridClasses7.cell}`]: styles30.cell
      },
      {
        [`& .${gridClasses7["cell--rangeTop"]}`]: styles30["cell--rangeTop"]
      },
      {
        [`& .${gridClasses7["cell--rangeBottom"]}`]: styles30["cell--rangeBottom"]
      },
      {
        [`& .${gridClasses7["cell--rangeLeft"]}`]: styles30["cell--rangeLeft"]
      },
      {
        [`& .${gridClasses7["cell--rangeRight"]}`]: styles30["cell--rangeRight"]
      },
      {
        [`& .${gridClasses7.cellContent}`]: styles30.cellContent
      },
      {
        [`& .${gridClasses7.cellCheckbox}`]: styles30.cellCheckbox
      },
      {
        [`& .${gridClasses7.cellSkeleton}`]: styles30.cellSkeleton
      },
      {
        [`& .${gridClasses7.checkboxInput}`]: styles30.checkboxInput
      },
      {
        [`& .${gridClasses7["columnHeader--alignCenter"]}`]: styles30["columnHeader--alignCenter"]
      },
      {
        [`& .${gridClasses7["columnHeader--alignLeft"]}`]: styles30["columnHeader--alignLeft"]
      },
      {
        [`& .${gridClasses7["columnHeader--alignRight"]}`]: styles30["columnHeader--alignRight"]
      },
      {
        [`& .${gridClasses7["columnHeader--dragging"]}`]: styles30["columnHeader--dragging"]
      },
      {
        [`& .${gridClasses7["columnHeader--moving"]}`]: styles30["columnHeader--moving"]
      },
      {
        [`& .${gridClasses7["columnHeader--numeric"]}`]: styles30["columnHeader--numeric"]
      },
      {
        [`& .${gridClasses7["columnHeader--sortable"]}`]: styles30["columnHeader--sortable"]
      },
      {
        [`& .${gridClasses7["columnHeader--sorted"]}`]: styles30["columnHeader--sorted"]
      },
      {
        [`& .${gridClasses7.columnHeader}`]: styles30.columnHeader
      },
      {
        [`& .${gridClasses7.columnHeaderCheckbox}`]: styles30.columnHeaderCheckbox
      },
      {
        [`& .${gridClasses7.columnHeaderDraggableContainer}`]: styles30.columnHeaderDraggableContainer
      },
      {
        [`& .${gridClasses7.columnHeaderTitleContainer}`]: styles30.columnHeaderTitleContainer
      },
      {
        [`& .${gridClasses7["columnSeparator--resizable"]}`]: styles30["columnSeparator--resizable"]
      },
      {
        [`& .${gridClasses7["columnSeparator--resizing"]}`]: styles30["columnSeparator--resizing"]
      },
      {
        [`& .${gridClasses7.columnSeparator}`]: styles30.columnSeparator
      },
      {
        [`& .${gridClasses7.filterIcon}`]: styles30.filterIcon
      },
      {
        [`& .${gridClasses7.iconSeparator}`]: styles30.iconSeparator
      },
      {
        [`& .${gridClasses7.menuIcon}`]: styles30.menuIcon
      },
      {
        [`& .${gridClasses7.menuIconButton}`]: styles30.menuIconButton
      },
      {
        [`& .${gridClasses7.menuOpen}`]: styles30.menuOpen
      },
      {
        [`& .${gridClasses7.menuList}`]: styles30.menuList
      },
      {
        [`& .${gridClasses7["row--editable"]}`]: styles30["row--editable"]
      },
      {
        [`& .${gridClasses7["row--editing"]}`]: styles30["row--editing"]
      },
      {
        [`& .${gridClasses7["row--dragging"]}`]: styles30["row--dragging"]
      },
      {
        [`& .${gridClasses7.row}`]: styles30.row
      },
      {
        [`& .${gridClasses7.rowReorderCellPlaceholder}`]: styles30.rowReorderCellPlaceholder
      },
      {
        [`& .${gridClasses7.rowReorderCell}`]: styles30.rowReorderCell
      },
      {
        [`& .${gridClasses7["rowReorderCell--draggable"]}`]: styles30["rowReorderCell--draggable"]
      },
      {
        [`& .${gridClasses7.sortIcon}`]: styles30.sortIcon
      },
      {
        [`& .${gridClasses7.withBorderColor}`]: styles30.withBorderColor
      },
      {
        [`& .${gridClasses7.treeDataGroupingCell}`]: styles30.treeDataGroupingCell
      },
      {
        [`& .${gridClasses7.treeDataGroupingCellToggle}`]: styles30.treeDataGroupingCellToggle
      },
      {
        [`& .${gridClasses7.detailPanelToggleCell}`]: styles30.detailPanelToggleCell
      },
      {
        [`& .${gridClasses7["detailPanelToggleCell--expanded"]}`]: styles30["detailPanelToggleCell--expanded"]
      },
      styles30.root
    ]
  })(({
    theme
  }) => {
    const borderColor2 = getBorderColor(theme);
    const radius = theme.shape.borderRadius;
    const gridStyle = _extends({
      "--unstable_DataGrid-radius": typeof radius === "number" ? `${radius}px` : radius,
      "--unstable_DataGrid-headWeight": theme.typography.fontWeightMedium,
      "--unstable_DataGrid-overlayBackground": theme.vars ? `rgba(${theme.vars.palette.background.defaultChannel} / ${theme.vars.palette.action.disabledOpacity})` : alpha(theme.palette.background.default, theme.palette.action.disabledOpacity),
      flex: 1,
      boxSizing: "border-box",
      position: "relative",
      borderWidth: "1px",
      borderStyle: "solid",
      borderColor: borderColor2,
      borderRadius: "var(--unstable_DataGrid-radius)",
      color: (theme.vars || theme).palette.text.primary
    }, theme.typography.body2, {
      outline: "none",
      height: "100%",
      display: "flex",
      flexDirection: "column",
      overflowAnchor: "none",
      [`&.${gridClasses7.autoHeight}`]: {
        height: "auto",
        [`& .${gridClasses7["row--lastVisible"]} .${gridClasses7.cell}`]: {
          borderBottomColor: "transparent"
        }
      },
      [`& .${gridClasses7["virtualScrollerContent--overflowed"]} .${gridClasses7["row--lastVisible"]} .${gridClasses7.cell}`]: {
        borderBottomColor: "transparent"
      },
      [`& .${gridClasses7.columnHeader}, & .${gridClasses7.cell}`]: {
        WebkitTapHighlightColor: "transparent",
        lineHeight: null,
        padding: "0 10px",
        boxSizing: "border-box"
      },
      [`& .${gridClasses7.columnHeader}:focus-within, & .${gridClasses7.cell}:focus-within`]: {
        outline: `solid ${theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / 0.5)` : alpha(theme.palette.primary.main, 0.5)} 1px`,
        outlineWidth: 1,
        outlineOffset: -1
      },
      [`& .${gridClasses7.columnHeader}:focus, & .${gridClasses7.cell}:focus`]: {
        outline: `solid ${theme.palette.primary.main} 1px`
      },
      [`& .${gridClasses7.columnHeaderCheckbox}, & .${gridClasses7.cellCheckbox}`]: {
        padding: 0,
        justifyContent: "center",
        alignItems: "center"
      },
      [`& .${gridClasses7.columnHeader}`]: {
        position: "relative",
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses7["columnHeader--sorted"]} .${gridClasses7.iconButtonContainer}, & .${gridClasses7["columnHeader--filtered"]} .${gridClasses7.iconButtonContainer}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses7.columnHeader}:not(.${gridClasses7["columnHeader--sorted"]}) .${gridClasses7.sortIcon}`]: {
        opacity: 0,
        transition: theme.transitions.create(["opacity"], {
          duration: theme.transitions.duration.shorter
        })
      },
      [`& .${gridClasses7.columnHeader}:not(.${gridClasses7["columnHeader--sorted"]}):hover .${gridClasses7.sortIcon}`]: {
        opacity: 0.5
      },
      [`& .${gridClasses7.columnHeaderTitleContainer}`]: {
        display: "flex",
        alignItems: "center",
        minWidth: 0,
        flex: 1,
        whiteSpace: "nowrap",
        overflow: "hidden",
        position: "relative"
      },
      [`& .${gridClasses7.columnHeaderTitleContainerContent}`]: {
        overflow: "hidden",
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses7["columnHeader--filledGroup"]} .${gridClasses7.columnHeaderTitleContainer}`]: {
        borderBottomWidth: "1px",
        borderBottomStyle: "solid",
        boxSizing: "border-box"
      },
      [`& .${gridClasses7["columnHeader--filledGroup"]}.${gridClasses7["columnHeader--showColumnBorder"]} .${gridClasses7.columnHeaderTitleContainer}`]: {
        borderBottom: `none`
      },
      [`& .${gridClasses7["columnHeader--filledGroup"]}.${gridClasses7["columnHeader--showColumnBorder"]}`]: {
        borderBottomWidth: "1px",
        borderBottomStyle: "solid",
        boxSizing: "border-box"
      },
      [`& .${gridClasses7.sortIcon}, & .${gridClasses7.filterIcon}`]: {
        fontSize: "inherit"
      },
      [`& .${gridClasses7["columnHeader--sortable"]}`]: {
        cursor: "pointer"
      },
      [`& .${gridClasses7["columnHeader--alignCenter"]} .${gridClasses7.columnHeaderTitleContainer}`]: {
        justifyContent: "center"
      },
      [`& .${gridClasses7["columnHeader--alignRight"]} .${gridClasses7.columnHeaderDraggableContainer}, & .${gridClasses7["columnHeader--alignRight"]} .${gridClasses7.columnHeaderTitleContainer}`]: {
        flexDirection: "row-reverse"
      },
      [`& .${gridClasses7["columnHeader--alignCenter"]} .${gridClasses7.menuIcon}, & .${gridClasses7["columnHeader--alignRight"]} .${gridClasses7.menuIcon}`]: {
        marginRight: "auto",
        marginLeft: -6
      },
      [`& .${gridClasses7["columnHeader--alignRight"]} .${gridClasses7.menuIcon}, & .${gridClasses7["columnHeader--alignRight"]} .${gridClasses7.menuIcon}`]: {
        marginRight: "auto",
        marginLeft: -10
      },
      [`& .${gridClasses7["columnHeader--moving"]}`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`& .${gridClasses7.columnSeparator}`]: {
        visibility: "hidden",
        position: "absolute",
        zIndex: 100,
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        color: borderColor2
      },
      [`& .${gridClasses7.columnHeaders}:hover .${gridClasses7.columnSeparator}, .${gridClasses7["columnSeparator--resizing"]}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses7["columnSeparator--sideLeft"]}`]: {
        left: -12
      },
      [`& .${gridClasses7["columnSeparator--sideRight"]}`]: {
        right: -12
      },
      [`& .${gridClasses7["columnSeparator--resizable"]}`]: {
        cursor: "col-resize",
        touchAction: "none",
        "&:hover": {
          color: (theme.vars || theme).palette.text.primary,
          "@media (hover: none)": {
            color: borderColor2
          }
        },
        [`&.${gridClasses7["columnSeparator--resizing"]}`]: {
          color: (theme.vars || theme).palette.text.primary
        },
        "& svg": {
          pointerEvents: "none"
        }
      },
      [`& .${gridClasses7.iconSeparator}`]: {
        color: "inherit"
      },
      [`& .${gridClasses7.menuIcon}`]: {
        width: 0,
        visibility: "hidden",
        fontSize: 20,
        marginRight: -10,
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses7.columnHeader}:hover`]: {
        [`& .${gridClasses7.iconButtonContainer}`]: {
          visibility: "visible",
          width: "auto"
        },
        [`& .${gridClasses7.menuIcon}`]: {
          width: "auto",
          visibility: "visible"
        }
      },
      [`.${gridClasses7.menuOpen}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses7.row}`]: {
        display: "flex",
        width: "fit-content",
        breakInside: "avoid",
        "&:hover, &.Mui-hovered": {
          backgroundColor: (theme.vars || theme).palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&.Mui-selected": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          "&:hover, &.Mui-hovered": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity + theme.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
          }
        }
      },
      [`& .${gridClasses7.cell}`]: {
        display: "flex",
        alignItems: "center",
        borderBottom: "1px solid",
        "&.Mui-selected": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          "&:hover, &.Mui-hovered": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity + theme.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
          }
        }
      },
      [`&.${gridClasses7["root--disableUserSelection"]} .${gridClasses7.cell}`]: {
        userSelect: "none"
      },
      [`& .${gridClasses7.row}:not(.${gridClasses7["row--dynamicHeight"]}) > .${gridClasses7.cell}`]: {
        overflow: "hidden",
        whiteSpace: "nowrap"
      },
      [`& .${gridClasses7.cellContent}`]: {
        overflow: "hidden",
        textOverflow: "ellipsis"
      },
      [`& .${gridClasses7.cell}.${gridClasses7["cell--editing"]}`]: {
        padding: 1,
        display: "flex",
        boxShadow: theme.shadows[2],
        backgroundColor: (theme.vars || theme).palette.background.paper,
        "&:focus-within": {
          outline: `solid ${(theme.vars || theme).palette.primary.main} 1px`,
          outlineOffset: "-1px"
        }
      },
      [`& .${gridClasses7["row--editing"]}`]: {
        boxShadow: theme.shadows[2]
      },
      [`& .${gridClasses7["row--editing"]} .${gridClasses7.cell}`]: {
        boxShadow: theme.shadows[0],
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      [`& .${gridClasses7.editBooleanCell}`]: {
        display: "flex",
        height: "100%",
        width: "100%",
        alignItems: "center",
        justifyContent: "center"
      },
      [`& .${gridClasses7.booleanCell}[data-value="true"]`]: {
        color: (theme.vars || theme).palette.text.secondary
      },
      [`& .${gridClasses7.booleanCell}[data-value="false"]`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`& .${gridClasses7.actionsCell}`]: {
        display: "inline-flex",
        alignItems: "center",
        gridGap: theme.spacing(1)
      },
      [`& .${gridClasses7.rowReorderCell}`]: {
        display: "inline-flex",
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& .${gridClasses7["rowReorderCell--draggable"]}`]: {
        cursor: "move",
        opacity: 1
      },
      [`& .${gridClasses7.rowReorderCellContainer}`]: {
        padding: 0,
        alignItems: "stretch"
      },
      [`.${gridClasses7.withBorderColor}`]: {
        borderColor: borderColor2
      },
      [`& .${gridClasses7["cell--withRightBorder"]}`]: {
        borderRightWidth: "1px",
        borderRightStyle: "solid"
      },
      [`& .${gridClasses7["columnHeader--withRightBorder"]}`]: {
        borderRightWidth: "1px",
        borderRightStyle: "solid"
      },
      [`& .${gridClasses7["cell--textLeft"]}`]: {
        justifyContent: "flex-start"
      },
      [`& .${gridClasses7["cell--textRight"]}`]: {
        justifyContent: "flex-end"
      },
      [`& .${gridClasses7["cell--textCenter"]}`]: {
        justifyContent: "center"
      },
      [`& .${gridClasses7.columnHeaderDraggableContainer}`]: {
        display: "flex",
        width: "100%",
        height: "100%"
      },
      [`& .${gridClasses7.rowReorderCellPlaceholder}`]: {
        display: "none"
      },
      [`& .${gridClasses7["columnHeader--dragging"]}, & .${gridClasses7["row--dragging"]}`]: {
        background: (theme.vars || theme).palette.background.paper,
        padding: "0 12px",
        borderRadius: "var(--unstable_DataGrid-radius)",
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& .${gridClasses7["row--dragging"]}`]: {
        background: (theme.vars || theme).palette.background.paper,
        padding: "0 12px",
        borderRadius: "var(--unstable_DataGrid-radius)",
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        [`& .${gridClasses7.rowReorderCellPlaceholder}`]: {
          display: "flex"
        }
      },
      [`& .${gridClasses7.treeDataGroupingCell}`]: {
        display: "flex",
        alignItems: "center",
        width: "100%"
      },
      [`& .${gridClasses7.treeDataGroupingCellToggle}`]: {
        flex: "0 0 28px",
        alignSelf: "stretch",
        marginRight: theme.spacing(2)
      },
      [`& .${gridClasses7.groupingCriteriaCell}`]: {
        display: "flex",
        alignItems: "center",
        width: "100%"
      },
      [`& .${gridClasses7.groupingCriteriaCellToggle}`]: {
        flex: "0 0 28px",
        alignSelf: "stretch",
        marginRight: theme.spacing(2)
      }
    });
    return gridStyle;
  });

  // node_modules/@mui/x-data-grid/components/containers/GridRoot.js
  const React309 = __toModule(require_react());
  const prop_types212 = __toModule(require_prop_types7());
  const jsx_runtime319 = __toModule(require_jsx_runtime());
  const _excluded200 = ["children", "className"];
  const useUtilityClasses160 = (ownerState) => {
    const {
      autoHeight,
      density: density3,
      classes
    } = ownerState;
    const slots = {
      root: ["root", autoHeight && "autoHeight", `root--density${capitalize48(density3)}`, "withBorderColor"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridRoot2 = React309.forwardRef(function GridRoot3(props, ref) {
    const rootProps = useGridRootProps2();
    const {
      children,
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded200);
    const apiRef = useGridPrivateApiContext2();
    const visibleColumns = useGridSelector2(apiRef, gridVisibleColumnDefinitionsSelector);
    const totalRowCount = useGridSelector2(apiRef, gridRowCountSelector);
    const densityValue = useGridSelector2(apiRef, gridDensityValueSelector);
    const headerGroupingMaxDepth = useGridSelector2(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
    const rootContainerRef = React309.useRef(null);
    const handleRef = useForkRef(rootContainerRef, ref);
    const pinnedRowsCount = useGridSelector2(apiRef, gridPinnedRowsCountSelector);
    const ownerState = _extends({}, rootProps, {
      density: densityValue
    });
    const classes = useUtilityClasses160(ownerState);
    apiRef.current.register("public", {
      rootElementRef: rootContainerRef
    });
    const [mountedState, setMountedState] = React309.useState(false);
    useEnhancedEffect_default(() => {
      setMountedState(true);
    }, []);
    if (!mountedState) {
      return null;
    }
    return jsx_runtime319.jsx(GridRootStyles2, _extends({
      ref: handleRef,
      className: clsx_m_default(className3, classes.root),
      ownerState,
      role: "grid",
      "aria-colcount": visibleColumns.length,
      "aria-rowcount": headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,
      "aria-multiselectable": !rootProps.disableMultipleRowSelection,
      "aria-label": rootProps["aria-label"],
      "aria-labelledby": rootProps["aria-labelledby"]
    }, other, {
      children
    }));
  });
  GridRoot2.propTypes = {
    sx: prop_types212.default.oneOfType([prop_types212.default.arrayOf(prop_types212.default.oneOfType([prop_types212.default.func, prop_types212.default.object, prop_types212.default.bool])), prop_types212.default.func, prop_types212.default.object])
  };

  // node_modules/@mui/x-data-grid/components/containers/GridFooterContainer.js
  const React306 = __toModule(require_react());
  const prop_types210 = __toModule(require_prop_types7());
  const jsx_runtime316 = __toModule(require_jsx_runtime());
  const _excluded198 = ["className"];
  const useUtilityClasses157 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["footerContainer", "withBorderColor"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridFooterContainerRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FooterContainer",
    overridesResolver: (props, styles30) => styles30.footerContainer
  })({
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    minHeight: 52,
    borderTop: "1px solid"
  });
  const GridFooterContainer2 = React306.forwardRef(function GridFooterContainer3(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded198);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses157(rootProps);
    return jsx_runtime316.jsx(GridFooterContainerRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState: rootProps
    }, other));
  });
  GridFooterContainer2.propTypes = {
    sx: prop_types210.default.oneOfType([prop_types210.default.arrayOf(prop_types210.default.oneOfType([prop_types210.default.func, prop_types210.default.object, prop_types210.default.bool])), prop_types210.default.func, prop_types210.default.object])
  };

  // node_modules/@mui/x-data-grid/components/containers/GridOverlay.js
  const React308 = __toModule(require_react());
  const prop_types211 = __toModule(require_prop_types7());
  const jsx_runtime318 = __toModule(require_jsx_runtime());
  const _excluded199 = ["className"];
  const useUtilityClasses159 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["overlay"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridOverlayRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "Overlay",
    overridesResolver: (_6, styles30) => styles30.overlay
  })({
    width: "100%",
    height: "100%",
    display: "flex",
    alignSelf: "center",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "var(--unstable_DataGrid-overlayBackground)"
  });
  const GridOverlay2 = React308.forwardRef(function GridOverlay5(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded199);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses159(rootProps);
    return jsx_runtime318.jsx(GridOverlayRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState: rootProps
    }, other));
  });
  GridOverlay2.propTypes = {
    sx: prop_types211.default.oneOfType([prop_types211.default.arrayOf(prop_types211.default.oneOfType([prop_types211.default.func, prop_types211.default.object, prop_types211.default.bool])), prop_types211.default.func, prop_types211.default.object])
  };

  // node_modules/@mui/x-data-grid/components/containers/GridToolbarContainer.js
  const React310 = __toModule(require_react());
  const prop_types213 = __toModule(require_prop_types7());
  const jsx_runtime320 = __toModule(require_jsx_runtime());
  const _excluded201 = ["className", "children"];
  const useUtilityClasses161 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["toolbarContainer"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridToolbarContainerRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ToolbarContainer",
    overridesResolver: (_6, styles30) => styles30.toolbarContainer
  })(({
    theme
  }) => ({
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    gap: theme.spacing(1),
    padding: theme.spacing(0.5, 0.5, 0)
  }));
  const GridToolbarContainer = React310.forwardRef(function GridToolbarContainer3(props, ref) {
    const {
      className: className3,
      children
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded201);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses161(rootProps);
    if (!children) {
      return null;
    }
    return jsx_runtime320.jsx(GridToolbarContainerRoot, _extends({
      ref,
      className: clsx_m_default(className3, classes.root),
      ownerState: rootProps
    }, other, {
      children
    }));
  });
  GridToolbarContainer.propTypes = {
    sx: prop_types213.default.oneOfType([prop_types213.default.arrayOf(prop_types213.default.oneOfType([prop_types213.default.func, prop_types213.default.object, prop_types213.default.bool])), prop_types213.default.func, prop_types213.default.object])
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridIconButtonContainer.js
  const React303 = __toModule(require_react());
  const jsx_runtime313 = __toModule(require_jsx_runtime());
  const _excluded195 = ["className"];
  const useUtilityClasses154 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["iconButtonContainer"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridIconButtonContainerRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "IconButtonContainer",
    overridesResolver: (props, styles30) => styles30.iconButtonContainer
  })(() => ({
    display: "flex",
    visibility: "hidden",
    width: 0
  }));
  const GridIconButtonContainer2 = React303.forwardRef(function GridIconButtonContainer4(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded195);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses154(rootProps);
    return jsx_runtime313.jsx(GridIconButtonContainerRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState: rootProps
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
  const React299 = __toModule(require_react());
  const prop_types206 = __toModule(require_prop_types7());
  const jsx_runtime307 = __toModule(require_jsx_runtime());
  const jsx_runtime308 = __toModule(require_jsx_runtime());
  const useUtilityClasses151 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      icon: ["sortIcon"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function getIcon(icons2, direction, className3, sortingOrder) {
    let Icon4;
    const iconProps = {};
    if (direction === "asc") {
      Icon4 = icons2.columnSortedAscendingIcon;
    } else if (direction === "desc") {
      Icon4 = icons2.columnSortedDescendingIcon;
    } else {
      Icon4 = icons2.columnUnsortedIcon;
      iconProps.sortingOrder = sortingOrder;
    }
    return Icon4 ? jsx_runtime307.jsx(Icon4, _extends({
      fontSize: "small",
      className: className3
    }, iconProps)) : null;
  }
  function GridColumnHeaderSortIconRaw(props) {
    var _rootProps$slotProps;
    const {
      direction,
      index,
      sortingOrder
    } = props;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses151(ownerState);
    const iconElement = getIcon(rootProps.slots, direction, classes.icon, sortingOrder);
    if (!iconElement) {
      return null;
    }
    const iconButton = jsx_runtime307.jsx(rootProps.slots.baseIconButton, _extends({
      tabIndex: -1,
      "aria-label": apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
      title: apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
      size: "small"
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
      children: iconElement
    }));
    return jsx_runtime308.jsxs(GridIconButtonContainer2, {
      children: [index != null && jsx_runtime307.jsx(Badge_default2, {
        badgeContent: index,
        color: "default",
        children: iconButton
      }), index == null && iconButton]
    });
  }
  const GridColumnHeaderSortIcon2 = React299.memo(GridColumnHeaderSortIconRaw);
  GridColumnHeaderSortIconRaw.propTypes = {
    direction: prop_types206.default.oneOf(["asc", "desc"]),
    index: prop_types206.default.number,
    sortingOrder: prop_types206.default.arrayOf(prop_types206.default.oneOf(["asc", "desc"])).isRequired
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/ColumnHeaderMenuIcon.js
  const React293 = __toModule(require_react());
  const jsx_runtime299 = __toModule(require_jsx_runtime());
  const useUtilityClasses145 = (ownerState) => {
    const {
      classes,
      open
    } = ownerState;
    const slots = {
      root: ["menuIcon", open && "menuOpen"],
      button: ["menuIconButton"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const ColumnHeaderMenuIcon = React293.memo((props) => {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const {
      colDef: colDef6,
      open,
      columnMenuId,
      columnMenuButtonId,
      iconButtonRef
    } = props;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses145(ownerState);
    const handleMenuIconClick = React293.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      apiRef.current.toggleColumnMenu(colDef6.field);
    }, [apiRef, colDef6.field]);
    return jsx_runtime299.jsx("div", {
      className: classes.root,
      children: jsx_runtime299.jsx(rootProps.slots.baseTooltip, _extends({
        title: apiRef.current.getLocaleText("columnMenuLabel"),
        enterDelay: 1e3
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {
        children: jsx_runtime299.jsx(rootProps.slots.baseIconButton, _extends({
          ref: iconButtonRef,
          tabIndex: -1,
          className: classes.button,
          "aria-label": apiRef.current.getLocaleText("columnMenuLabel"),
          size: "small",
          onClick: handleMenuIconClick,
          "aria-expanded": open ? "true" : void 0,
          "aria-haspopup": "true",
          "aria-controls": columnMenuId,
          id: columnMenuButtonId
        }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseIconButton, {
          children: jsx_runtime299.jsx(rootProps.slots.columnMenuIcon, {
            fontSize: "small"
          })
        }))
      }))
    });
  });

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnHeaderMenu.js
  const React312 = __toModule(require_react());
  const prop_types215 = __toModule(require_prop_types7());
  const jsx_runtime322 = __toModule(require_jsx_runtime());
  function GridColumnHeaderMenu2({
    columnMenuId,
    columnMenuButtonId,
    ContentComponent,
    contentComponentProps,
    field,
    open,
    target,
    onExited
  }) {
    const apiRef = useGridApiContext2();
    const colDef6 = apiRef.current.getColumn(field);
    const hideMenu = React312.useCallback((event) => {
      event.stopPropagation();
      if (!(target != null && target.contains(event.target))) {
        apiRef.current.hideColumnMenu();
      }
    }, [apiRef, target]);
    if (!target) {
      return null;
    }
    return jsx_runtime322.jsx(GridMenu2, {
      placement: `bottom-${colDef6.align === "right" ? "start" : "end"}`,
      open,
      target,
      onClickAway: hideMenu,
      onExited,
      children: jsx_runtime322.jsx(ContentComponent, _extends({
        colDef: colDef6,
        hideMenu,
        open,
        id: columnMenuId,
        labelledby: columnMenuButtonId
      }, contentComponentProps))
    });
  }
  GridColumnHeaderMenu2.propTypes = {
    columnMenuButtonId: prop_types215.default.string,
    columnMenuId: prop_types215.default.string,
    ContentComponent: prop_types215.default.elementType.isRequired,
    contentComponentProps: prop_types215.default.any,
    field: prop_types215.default.string.isRequired,
    onExited: prop_types215.default.func,
    open: prop_types215.default.bool.isRequired,
    target: HTMLElementType
  };

  // node_modules/@mui/x-data-grid/utils/domUtils.js
  function isOverflown(element) {
    return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
  }
  function findParentElementFromClassName(elem, className3) {
    return elem.closest(`.${className3}`);
  }
  function escapeOperandAttributeSelector(operand) {
    return operand.replace(/["\\]/g, "\\$&");
  }
  function getGridColumnHeaderElement(root2, field) {
    return root2.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`);
  }
  function getGridRowElementSelector(id) {
    return `.${gridClasses7.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`;
  }
  function getGridRowElement(root2, id) {
    return root2.querySelector(getGridRowElementSelector(id));
  }
  function getGridCellElement(root2, {
    id,
    field
  }) {
    const rowSelector = getGridRowElementSelector(id);
    const cellSelector = `.${gridClasses7.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`;
    const selector = `${rowSelector} ${cellSelector}`;
    return root2.querySelector(selector);
  }

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js
  const React300 = __toModule(require_react());
  const prop_types207 = __toModule(require_prop_types7());
  const jsx_runtime309 = __toModule(require_jsx_runtime());
  const _excluded192 = ["className"];
  const useUtilityClasses152 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeaderTitle"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridColumnHeaderTitleRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaderTitle",
    overridesResolver: (props, styles30) => styles30.columnHeaderTitle
  })({
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap",
    fontWeight: "var(--unstable_DataGrid-headWeight)"
  });
  const ColumnHeaderInnerTitle = React300.forwardRef(function ColumnHeaderInnerTitle2(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded192);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses152(rootProps);
    return jsx_runtime309.jsx(GridColumnHeaderTitleRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState: rootProps
    }, other));
  });
  function GridColumnHeaderTitle(props) {
    var _rootProps$slotProps;
    const {
      label,
      description
    } = props;
    const rootProps = useGridRootProps2();
    const titleRef = React300.useRef(null);
    const [tooltip, setTooltip] = React300.useState("");
    const handleMouseOver = React300.useCallback(() => {
      if (!description && titleRef != null && titleRef.current) {
        const isOver = isOverflown(titleRef.current);
        if (isOver) {
          setTooltip(label);
        } else {
          setTooltip("");
        }
      }
    }, [description, label]);
    return jsx_runtime309.jsx(rootProps.slots.baseTooltip, _extends({
      title: description || tooltip
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {
      children: jsx_runtime309.jsx(ColumnHeaderInnerTitle, {
        onMouseOver: handleMouseOver,
        ref: titleRef,
        children: label
      })
    }));
  }
  GridColumnHeaderTitle.propTypes = {
    columnWidth: prop_types207.default.number.isRequired,
    description: prop_types207.default.node,
    label: prop_types207.default.string.isRequired
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSeparator.js
  const React298 = __toModule(require_react());
  const prop_types205 = __toModule(require_prop_types7());
  const jsx_runtime306 = __toModule(require_jsx_runtime());
  const _excluded191 = ["resizable", "resizing", "height", "side"];
  var GridColumnHeaderSeparatorSides = function(GridColumnHeaderSeparatorSides2) {
    GridColumnHeaderSeparatorSides2["Left"] = "left";
    GridColumnHeaderSeparatorSides2["Right"] = "right";
    return GridColumnHeaderSeparatorSides2;
  }(GridColumnHeaderSeparatorSides || {});
  const useUtilityClasses150 = (ownerState) => {
    const {
      resizable,
      resizing,
      classes,
      side
    } = ownerState;
    const slots = {
      root: ["columnSeparator", resizable && "columnSeparator--resizable", resizing && "columnSeparator--resizing", side && `columnSeparator--side${capitalize48(side)}`],
      icon: ["iconSeparator"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderSeparatorRaw(props) {
    const {
      height: height2,
      side = GridColumnHeaderSeparatorSides.Right
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded191);
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, props, {
      side,
      classes: rootProps.classes
    });
    const classes = useUtilityClasses150(ownerState);
    const stopClick = React298.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
    }, []);
    return jsx_runtime306.jsx("div", _extends({
      className: classes.root,
      style: {
        minHeight: height2,
        opacity: rootProps.showColumnVerticalBorder ? 0 : 1
      }
    }, other, {
      onClick: stopClick,
      children: jsx_runtime306.jsx(rootProps.slots.columnResizeIcon, {
        className: classes.icon
      })
    }));
  }
  const GridColumnHeaderSeparator = React298.memo(GridColumnHeaderSeparatorRaw);
  GridColumnHeaderSeparatorRaw.propTypes = {
    height: prop_types205.default.number.isRequired,
    resizable: prop_types205.default.bool.isRequired,
    resizing: prop_types205.default.bool.isRequired,
    side: prop_types205.default.oneOf(["left", "right"])
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridGenericColumnHeaderItem.js
  const React302 = __toModule(require_react());
  const jsx_runtime311 = __toModule(require_jsx_runtime());
  const jsx_runtime312 = __toModule(require_jsx_runtime());
  const _excluded194 = ["classes", "columnMenuOpen", "colIndex", "height", "isResizing", "sortDirection", "hasFocus", "tabIndex", "separatorSide", "isDraggable", "headerComponent", "description", "elementId", "width", "columnMenuIconButton", "columnMenu", "columnTitleIconButtons", "headerClassName", "label", "resizable", "draggableContainerProps", "columnHeaderSeparatorProps"];
  const GridGenericColumnHeaderItem2 = React302.forwardRef(function GridGenericColumnHeaderItem4(props, ref) {
    const {
      classes,
      columnMenuOpen,
      colIndex,
      height: height2,
      isResizing,
      sortDirection,
      hasFocus,
      tabIndex,
      separatorSide,
      isDraggable,
      headerComponent,
      description,
      width: width2,
      columnMenuIconButton = null,
      columnMenu = null,
      columnTitleIconButtons = null,
      headerClassName,
      label,
      resizable,
      draggableContainerProps,
      columnHeaderSeparatorProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded194);
    const apiRef = useGridPrivateApiContext2();
    const rootProps = useGridRootProps2();
    const headerCellRef = React302.useRef(null);
    const [showColumnMenuIcon, setShowColumnMenuIcon] = React302.useState(columnMenuOpen);
    const handleRef = useForkRef(headerCellRef, ref);
    let ariaSort = "none";
    if (sortDirection != null) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    React302.useEffect(() => {
      if (!showColumnMenuIcon) {
        setShowColumnMenuIcon(columnMenuOpen);
      }
    }, [showColumnMenuIcon, columnMenuOpen]);
    React302.useLayoutEffect(() => {
      const columnMenuState = apiRef.current.state.columnMenu;
      if (hasFocus && !columnMenuState.open) {
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null ? void 0 : elementToFocus.focus();
        apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
      }
    }, [apiRef, hasFocus]);
    return jsx_runtime312.jsxs("div", _extends({
      ref: handleRef,
      className: clsx_m_default(classes.root, headerClassName),
      style: {
        height: height2,
        width: width2,
        minWidth: width2,
        maxWidth: width2
      },
      role: "columnheader",
      tabIndex,
      "aria-colindex": colIndex + 1,
      "aria-sort": ariaSort,
      "aria-label": headerComponent == null ? label : void 0
    }, other, {
      children: [jsx_runtime312.jsxs("div", _extends({
        className: classes.draggableContainer,
        draggable: isDraggable
      }, draggableContainerProps, {
        children: [jsx_runtime312.jsxs("div", {
          className: classes.titleContainer,
          children: [jsx_runtime311.jsx("div", {
            className: classes.titleContainerContent,
            children: headerComponent !== void 0 ? headerComponent : jsx_runtime311.jsx(GridColumnHeaderTitle, {
              label,
              description,
              columnWidth: width2
            })
          }), columnTitleIconButtons]
        }), columnMenuIconButton]
      })), jsx_runtime311.jsx(GridColumnHeaderSeparator, _extends({
        resizable: !rootProps.disableColumnResize && !!resizable,
        resizing: isResizing,
        height: height2,
        side: separatorSide
      }, columnHeaderSeparatorProps)), columnMenu]
    }));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
  const React297 = __toModule(require_react());
  const prop_types204 = __toModule(require_prop_types7());
  const jsx_runtime304 = __toModule(require_jsx_runtime());
  const jsx_runtime305 = __toModule(require_jsx_runtime());
  const useUtilityClasses149 = (ownerState) => {
    const {
      colDef: colDef6,
      classes,
      isDragging,
      sortDirection,
      showRightBorder,
      filterItemsCounter
    } = ownerState;
    const isColumnSorted = sortDirection != null;
    const isColumnFiltered = filterItemsCounter != null && filterItemsCounter > 0;
    const isColumnNumeric = colDef6.type === "number";
    const slots = {
      root: ["columnHeader", colDef6.headerAlign === "left" && "columnHeader--alignLeft", colDef6.headerAlign === "center" && "columnHeader--alignCenter", colDef6.headerAlign === "right" && "columnHeader--alignRight", colDef6.sortable && "columnHeader--sortable", isDragging && "columnHeader--moving", isColumnSorted && "columnHeader--sorted", isColumnFiltered && "columnHeader--filtered", isColumnNumeric && "columnHeader--numeric", "withBorderColor", showRightBorder && "columnHeader--withRightBorder"],
      draggableContainer: ["columnHeaderDraggableContainer"],
      titleContainer: ["columnHeaderTitleContainer"],
      titleContainerContent: ["columnHeaderTitleContainerContent"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderItem(props) {
    var _rootProps$slotProps, _colDef$sortingOrder, _rootProps$slotProps2, _colDef$headerName;
    const {
      colDef: colDef6,
      columnMenuOpen,
      colIndex,
      headerHeight,
      isResizing,
      sortDirection,
      sortIndex,
      filterItemsCounter,
      hasFocus,
      tabIndex,
      disableReorder,
      separatorSide
    } = props;
    const apiRef = useGridPrivateApiContext2();
    const rootProps = useGridRootProps2();
    const headerCellRef = React297.useRef(null);
    const columnMenuId = useId();
    const columnMenuButtonId = useId();
    const iconButtonRef = React297.useRef(null);
    const [showColumnMenuIcon, setShowColumnMenuIcon] = React297.useState(columnMenuOpen);
    const isDraggable = React297.useMemo(() => !rootProps.disableColumnReorder && !disableReorder && !colDef6.disableReorder, [rootProps.disableColumnReorder, disableReorder, colDef6.disableReorder]);
    let headerComponent;
    if (colDef6.renderHeader) {
      headerComponent = colDef6.renderHeader(apiRef.current.getColumnHeaderParams(colDef6.field));
    }
    const ownerState = _extends({}, props, {
      classes: rootProps.classes,
      showRightBorder: rootProps.showColumnVerticalBorder
    });
    const classes = useUtilityClasses149(ownerState);
    const publish = React297.useCallback((eventName) => (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      apiRef.current.publishEvent(eventName, apiRef.current.getColumnHeaderParams(colDef6.field), event);
    }, [apiRef, colDef6.field]);
    const mouseEventsHandlers = React297.useMemo(() => ({
      onClick: publish("columnHeaderClick"),
      onDoubleClick: publish("columnHeaderDoubleClick"),
      onMouseOver: publish("columnHeaderOver"),
      onMouseOut: publish("columnHeaderOut"),
      onMouseEnter: publish("columnHeaderEnter"),
      onMouseLeave: publish("columnHeaderLeave"),
      onKeyDown: publish("columnHeaderKeyDown"),
      onFocus: publish("columnHeaderFocus"),
      onBlur: publish("columnHeaderBlur")
    }), [publish]);
    const draggableEventHandlers = React297.useMemo(() => isDraggable ? {
      onDragStart: publish("columnHeaderDragStart"),
      onDragEnter: publish("columnHeaderDragEnter"),
      onDragOver: publish("columnHeaderDragOver"),
      onDragEnd: publish("columnHeaderDragEnd")
    } : {}, [isDraggable, publish]);
    const columnHeaderSeparatorProps = React297.useMemo(() => ({
      onMouseDown: publish("columnSeparatorMouseDown")
    }), [publish]);
    React297.useEffect(() => {
      if (!showColumnMenuIcon) {
        setShowColumnMenuIcon(columnMenuOpen);
      }
    }, [showColumnMenuIcon, columnMenuOpen]);
    const handleExited = React297.useCallback(() => {
      setShowColumnMenuIcon(false);
    }, []);
    const columnMenuIconButton = !rootProps.disableColumnMenu && !colDef6.disableColumnMenu && jsx_runtime304.jsx(ColumnHeaderMenuIcon, {
      colDef: colDef6,
      columnMenuId,
      columnMenuButtonId,
      open: showColumnMenuIcon,
      iconButtonRef
    });
    const columnMenu = jsx_runtime304.jsx(GridColumnHeaderMenu2, {
      columnMenuId,
      columnMenuButtonId,
      field: colDef6.field,
      open: columnMenuOpen,
      target: iconButtonRef.current,
      ContentComponent: rootProps.slots.columnMenu,
      contentComponentProps: (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.columnMenu,
      onExited: handleExited
    });
    const sortingOrder = (_colDef$sortingOrder = colDef6.sortingOrder) != null ? _colDef$sortingOrder : rootProps.sortingOrder;
    const columnTitleIconButtons = jsx_runtime305.jsxs(React297.Fragment, {
      children: [!rootProps.disableColumnFilter && jsx_runtime304.jsx(rootProps.slots.columnHeaderFilterIconButton, _extends({
        field: colDef6.field,
        counter: filterItemsCounter
      }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.columnHeaderFilterIconButton)), colDef6.sortable && !colDef6.hideSortIcons && jsx_runtime304.jsx(GridColumnHeaderSortIcon2, {
        direction: sortDirection,
        index: sortIndex,
        sortingOrder
      })]
    });
    React297.useLayoutEffect(() => {
      const columnMenuState = apiRef.current.state.columnMenu;
      if (hasFocus && !columnMenuState.open) {
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null ? void 0 : elementToFocus.focus();
        apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
      }
    }, [apiRef, hasFocus]);
    const headerClassName = typeof colDef6.headerClassName === "function" ? colDef6.headerClassName({
      field: colDef6.field,
      colDef: colDef6
    }) : colDef6.headerClassName;
    const label = (_colDef$headerName = colDef6.headerName) != null ? _colDef$headerName : colDef6.field;
    return jsx_runtime304.jsx(GridGenericColumnHeaderItem2, _extends({
      ref: headerCellRef,
      classes,
      columnMenuOpen,
      colIndex,
      height: headerHeight,
      isResizing,
      sortDirection,
      hasFocus,
      tabIndex,
      separatorSide,
      isDraggable,
      headerComponent,
      description: colDef6.description,
      elementId: colDef6.field,
      width: colDef6.computedWidth,
      columnMenuIconButton,
      columnTitleIconButtons,
      headerClassName,
      label,
      resizable: !rootProps.disableColumnResize && !!colDef6.resizable,
      "data-field": colDef6.field,
      columnMenu,
      draggableContainerProps: draggableEventHandlers,
      columnHeaderSeparatorProps
    }, mouseEventsHandlers));
  }
  GridColumnHeaderItem.propTypes = {
    colDef: prop_types204.default.object.isRequired,
    colIndex: prop_types204.default.number.isRequired,
    columnMenuOpen: prop_types204.default.bool.isRequired,
    disableReorder: prop_types204.default.bool,
    filterItemsCounter: prop_types204.default.number,
    hasFocus: prop_types204.default.bool,
    headerHeight: prop_types204.default.number.isRequired,
    isDragging: prop_types204.default.bool.isRequired,
    isResizing: prop_types204.default.bool.isRequired,
    separatorSide: prop_types204.default.oneOf(["left", "right"]),
    sortDirection: prop_types204.default.oneOf(["asc", "desc"]),
    sortIndex: prop_types204.default.number,
    tabIndex: prop_types204.default.oneOf([-1, 0]).isRequired
  };

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.js
  const gridPreferencePanelStateSelector = (state) => state.preferencePanel;

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js
  var GridPreferencePanelsValue = function(GridPreferencePanelsValue2) {
    GridPreferencePanelsValue2["filters"] = "filters";
    GridPreferencePanelsValue2["columns"] = "columns";
    return GridPreferencePanelsValue2;
  }(GridPreferencePanelsValue || {});

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.js
  const React296 = __toModule(require_react());
  const prop_types203 = __toModule(require_prop_types7());
  const jsx_runtime302 = __toModule(require_jsx_runtime());
  const jsx_runtime303 = __toModule(require_jsx_runtime());
  const useUtilityClasses148 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      icon: ["filterIcon"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderFilterIconButton(props) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const {
      counter: counter2,
      field,
      onClick
    } = props;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses148(ownerState);
    const toggleFilter = React296.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      const {
        open,
        openedPanelValue
      } = gridPreferencePanelStateSelector(apiRef.current.state);
      if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
        apiRef.current.hideFilterPanel();
      } else {
        apiRef.current.showFilterPanel();
      }
      if (onClick) {
        onClick(apiRef.current.getColumnHeaderParams(field), event);
      }
    }, [apiRef, field, onClick]);
    if (!counter2) {
      return null;
    }
    const iconButton = jsx_runtime302.jsx(rootProps.slots.baseIconButton, _extends({
      onClick: toggleFilter,
      color: "default",
      "aria-label": apiRef.current.getLocaleText("columnHeaderFiltersLabel"),
      size: "small",
      tabIndex: -1
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
      children: jsx_runtime302.jsx(rootProps.slots.columnFilteredIcon, {
        className: classes.icon,
        fontSize: "small"
      })
    }));
    return jsx_runtime302.jsx(rootProps.slots.baseTooltip, _extends({
      title: apiRef.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter2),
      enterDelay: 1e3
    }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseTooltip, {
      children: jsx_runtime303.jsxs(GridIconButtonContainer2, {
        children: [counter2 > 1 && jsx_runtime302.jsx(Badge_default2, {
          badgeContent: counter2,
          color: "default",
          children: iconButton
        }), counter2 === 1 && iconButton]
      })
    }));
  }
  GridColumnHeaderFilterIconButton.propTypes = {
    counter: prop_types203.default.number,
    field: prop_types203.default.string.isRequired,
    onClick: prop_types203.default.func
  };

  // node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js
  const React304 = __toModule(require_react());
  const prop_types208 = __toModule(require_prop_types7());
  const jsx_runtime314 = __toModule(require_jsx_runtime());
  const _excluded196 = ["field", "id", "value", "formattedValue", "row", "rowNode", "colDef", "isEditable", "cellMode", "hasFocus", "tabIndex", "api"];
  const useUtilityClasses155 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["checkboxInput"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridCellCheckboxForwardRef = React304.forwardRef(function GridCellCheckboxRenderer3(props, ref) {
    var _rootProps$slotProps;
    const {
      field,
      id,
      value: isChecked,
      rowNode,
      hasFocus,
      tabIndex
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded196);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses155(ownerState);
    const checkboxElement = React304.useRef(null);
    const rippleRef = React304.useRef(null);
    const handleRef = useForkRef(checkboxElement, ref);
    const element = apiRef.current.getCellElement(id, field);
    const handleChange = (event) => {
      const params = {
        value: event.target.checked,
        id
      };
      apiRef.current.publishEvent("rowSelectionCheckboxChange", params, event);
    };
    React304.useLayoutEffect(() => {
      if (tabIndex === 0 && element) {
        element.tabIndex = -1;
      }
    }, [element, tabIndex]);
    React304.useEffect(() => {
      if (hasFocus) {
        var _checkboxElement$curr;
        const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector("input");
        input == null ? void 0 : input.focus({
          preventScroll: true
        });
      } else if (rippleRef.current) {
        rippleRef.current.stop({});
      }
    }, [hasFocus]);
    const handleKeyDown3 = React304.useCallback((event) => {
      if (isSpaceKey(event.key)) {
        event.stopPropagation();
      }
    }, []);
    if (rowNode.type === "footer" || rowNode.type === "pinnedRow") {
      return null;
    }
    const isSelectable = apiRef.current.isRowSelectable(id);
    const label = apiRef.current.getLocaleText(isChecked ? "checkboxSelectionUnselectRow" : "checkboxSelectionSelectRow");
    return jsx_runtime314.jsx(rootProps.slots.baseCheckbox, _extends({
      ref: handleRef,
      tabIndex,
      checked: isChecked,
      onChange: handleChange,
      className: classes.root,
      inputProps: {
        "aria-label": label
      },
      onKeyDown: handleKeyDown3,
      disabled: !isSelectable,
      touchRippleRef: rippleRef
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));
  });
  GridCellCheckboxForwardRef.propTypes = {
    api: prop_types208.default.object.isRequired,
    cellMode: prop_types208.default.oneOf(["edit", "view"]).isRequired,
    colDef: prop_types208.default.object.isRequired,
    field: prop_types208.default.string.isRequired,
    focusElementRef: prop_types208.default.oneOfType([prop_types208.default.func, prop_types208.default.shape({
      current: prop_types208.default.shape({
        focus: prop_types208.default.func.isRequired
      })
    })]),
    formattedValue: prop_types208.default.any,
    hasFocus: prop_types208.default.bool.isRequired,
    id: prop_types208.default.oneOfType([prop_types208.default.number, prop_types208.default.string]).isRequired,
    isEditable: prop_types208.default.bool,
    row: prop_types208.default.any.isRequired,
    rowNode: prop_types208.default.object.isRequired,
    tabIndex: prop_types208.default.oneOf([-1, 0]).isRequired,
    value: prop_types208.default.any
  };
  const GridCellCheckboxRenderer2 = GridCellCheckboxForwardRef;

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js
  const gridRowSelectionStateSelector = (state) => state.rowSelection;
  const selectedGridRowsCountSelector = createSelector2(gridRowSelectionStateSelector, (selection) => selection.length);
  const selectedGridRowsSelector = createSelector2(gridRowSelectionStateSelector, gridRowsLookupSelector, (selectedRows, rowsLookup) => new Map(selectedRows.map((id) => [id, rowsLookup[id]])));
  const selectedIdsLookupSelector = createSelector2(gridRowSelectionStateSelector, (selection) => selection.reduce((lookup, rowId) => {
    lookup[rowId] = rowId;
    return lookup;
  }, {}));

  // node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js
  const CLEANUP_TIMER_LOOP_MILLIS = 1e3;
  class TimerBasedCleanupTracking2 {
    constructor(timeout = CLEANUP_TIMER_LOOP_MILLIS) {
      this.timeouts = new Map();
      this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;
      this.cleanupTimeout = timeout;
    }
    register(object, unsubscribe, unregisterToken) {
      if (!this.timeouts) {
        this.timeouts = new Map();
      }
      const timeout = setTimeout(() => {
        if (typeof unsubscribe === "function") {
          unsubscribe();
        }
        this.timeouts.delete(unregisterToken.cleanupToken);
      }, this.cleanupTimeout);
      this.timeouts.set(unregisterToken.cleanupToken, timeout);
    }
    unregister(unregisterToken) {
      const timeout = this.timeouts.get(unregisterToken.cleanupToken);
      if (timeout) {
        this.timeouts.delete(unregisterToken.cleanupToken);
        clearTimeout(timeout);
      }
    }
    reset() {
      if (this.timeouts) {
        this.timeouts.forEach((value, key) => {
          this.unregister({
            cleanupToken: key
          });
        });
        this.timeouts = void 0;
      }
    }
  }

  // node_modules/@mui/x-data-grid/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js
  class FinalizationRegistryBasedCleanupTracking2 {
    constructor() {
      this.registry = new FinalizationRegistry((unsubscribe) => {
        if (typeof unsubscribe === "function") {
          unsubscribe();
        }
      });
    }
    register(object, unsubscribe, unregisterToken) {
      this.registry.register(object, unsubscribe, unregisterToken);
    }
    unregister(unregisterToken) {
      this.registry.unregister(unregisterToken);
    }
    reset() {
    }
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
  const React386 = __toModule(require_react());
  var GridSignature = function(GridSignature2) {
    GridSignature2["DataGrid"] = "DataGrid";
    GridSignature2["DataGridPro"] = "DataGridPro";
    return GridSignature2;
  }(GridSignature || {});
  class ObjectToBeRetainedByReact {
  }
  function createUseGridApiEventHandler(registryContainer2) {
    let cleanupTokensCounter = 0;
    return function useGridApiEventHandler20(apiRef, eventName, handler, options) {
      if (registryContainer2.registry === null) {
        registryContainer2.registry = typeof FinalizationRegistry !== "undefined" ? new FinalizationRegistryBasedCleanupTracking2() : new TimerBasedCleanupTracking2();
      }
      const [objectRetainedByReact] = React386.useState(new ObjectToBeRetainedByReact());
      const subscription = React386.useRef(null);
      const handlerRef = React386.useRef();
      handlerRef.current = handler;
      const cleanupTokenRef = React386.useRef(null);
      if (!subscription.current && handlerRef.current) {
        const enhancedHandler = (params, event, details) => {
          if (!event.defaultMuiPrevented) {
            var _handlerRef$current;
            (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);
          }
        };
        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
        cleanupTokensCounter += 1;
        cleanupTokenRef.current = {
          cleanupToken: cleanupTokensCounter
        };
        registryContainer2.registry.register(objectRetainedByReact, () => {
          var _subscription$current;
          (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);
          subscription.current = null;
          cleanupTokenRef.current = null;
        }, cleanupTokenRef.current);
      } else if (!handlerRef.current && subscription.current) {
        subscription.current();
        subscription.current = null;
        if (cleanupTokenRef.current) {
          registryContainer2.registry.unregister(cleanupTokenRef.current);
          cleanupTokenRef.current = null;
        }
      }
      React386.useEffect(() => {
        if (!subscription.current && handlerRef.current) {
          const enhancedHandler = (params, event, details) => {
            if (!event.defaultMuiPrevented) {
              var _handlerRef$current2;
              (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);
            }
          };
          subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
        }
        if (cleanupTokenRef.current && registryContainer2.registry) {
          registryContainer2.registry.unregister(cleanupTokenRef.current);
          cleanupTokenRef.current = null;
        }
        return () => {
          var _subscription$current2;
          (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);
          subscription.current = null;
        };
      }, [apiRef, eventName, options]);
    };
  }
  const registryContainer = {
    registry: null
  };
  const useGridApiEventHandler2 = createUseGridApiEventHandler(registryContainer);
  const optionsSubscriberOptions = {
    isFirst: true
  };
  function useGridApiOptionHandler(apiRef, eventName, handler) {
    useGridApiEventHandler2(apiRef, eventName, handler, optionsSubscriberOptions);
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js
  const React387 = __toModule(require_react());
  function useGridApiMethod2(privateApiRef, apiMethods, visibility2) {
    const apiMethodsRef = React387.useRef(apiMethods);
    const [apiMethodsNames] = React387.useState(Object.keys(apiMethods));
    const installMethods = React387.useCallback(() => {
      if (!privateApiRef.current) {
        return;
      }
      apiMethodsNames.forEach((methodName) => {
        if (!privateApiRef.current.hasOwnProperty(methodName)) {
          privateApiRef.current.register(visibility2, {
            [methodName]: (...args) => {
              const fn = apiMethodsRef.current[methodName];
              return fn(...args);
            }
          });
        }
      });
    }, [apiMethodsNames, privateApiRef, visibility2]);
    React387.useEffect(() => {
      apiMethodsRef.current = apiMethods;
    }, [apiMethods]);
    React387.useEffect(() => {
      installMethods();
    }, [installMethods]);
    installMethods();
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js
  const React390 = __toModule(require_react());
  function useGridLogger(privateApiRef, name) {
    const logger = React390.useRef(null);
    if (logger.current) {
      return logger.current;
    }
    const newLogger = privateApiRef.current.getLogger(name);
    logger.current = newLogger;
    return newLogger;
  }

  // node_modules/@mui/x-data-grid/utils/utils.js
  function isNumber(value) {
    return typeof value === "number";
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function isObject(value) {
    return typeof value === "object" && value !== null;
  }
  function localStorageAvailable() {
    try {
      const key = "__some_random_key_you_are_not_going_to_use__";
      window.localStorage.setItem(key, key);
      window.localStorage.removeItem(key);
      return true;
    } catch (err) {
      return false;
    }
  }
  function escapeRegExp(value) {
    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  const clamp5 = (value, min2, max2) => Math.max(min2, Math.min(max2, value));
  function isDeepEqual(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    if (a2 && b2 && typeof a2 === "object" && typeof b2 === "object") {
      if (a2.constructor !== b2.constructor) {
        return false;
      }
      if (Array.isArray(a2)) {
        const length2 = a2.length;
        if (length2 !== b2.length) {
          return false;
        }
        for (let i2 = 0; i2 < length2; i2 += 1) {
          if (!isDeepEqual(a2[i2], b2[i2])) {
            return false;
          }
        }
        return true;
      }
      if (a2 instanceof Map && b2 instanceof Map) {
        if (a2.size !== b2.size) {
          return false;
        }
        const entriesA = Array.from(a2.entries());
        for (let i2 = 0; i2 < entriesA.length; i2 += 1) {
          if (!b2.has(entriesA[i2][0])) {
            return false;
          }
        }
        for (let i2 = 0; i2 < entriesA.length; i2 += 1) {
          const entryA = entriesA[i2];
          if (!isDeepEqual(entryA[1], b2.get(entryA[0]))) {
            return false;
          }
        }
        return true;
      }
      if (a2 instanceof Set && b2 instanceof Set) {
        if (a2.size !== b2.size) {
          return false;
        }
        const entries = Array.from(a2.entries());
        for (let i2 = 0; i2 < entries.length; i2 += 1) {
          if (!b2.has(entries[i2][0])) {
            return false;
          }
        }
        return true;
      }
      if (ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
        const length2 = a2.length;
        if (length2 !== b2.length) {
          return false;
        }
        for (let i2 = 0; i2 < length2; i2 += 1) {
          if (a2[i2] !== b2[i2]) {
            return false;
          }
        }
        return true;
      }
      if (a2.constructor === RegExp) {
        return a2.source === b2.source && a2.flags === b2.flags;
      }
      if (a2.valueOf !== Object.prototype.valueOf) {
        return a2.valueOf() === b2.valueOf();
      }
      if (a2.toString !== Object.prototype.toString) {
        return a2.toString() === b2.toString();
      }
      const keys = Object.keys(a2);
      const length = keys.length;
      if (length !== Object.keys(b2).length) {
        return false;
      }
      for (let i2 = 0; i2 < length; i2 += 1) {
        if (!Object.prototype.hasOwnProperty.call(b2, keys[i2])) {
          return false;
        }
      }
      for (let i2 = 0; i2 < length; i2 += 1) {
        const key = keys[i2];
        if (!isDeepEqual(a2[key], b2[key])) {
          return false;
        }
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }
  function mulberry32(a2) {
    return () => {
      let t2 = a2 += 1831565813;
      t2 = Math.imul(t2 ^ t2 >>> 15, t2 | 1);
      t2 ^= t2 + Math.imul(t2 ^ t2 >>> 7, t2 | 61);
      return ((t2 ^ t2 >>> 14) >>> 0) / 4294967296;
    };
  }
  function randomNumberBetween(seed, min2, max2) {
    const random = mulberry32(seed);
    return () => min2 + (max2 - min2) * random();
  }
  function deepClone2(obj) {
    if (typeof structuredClone === "function") {
      return structuredClone(obj);
    }
    return JSON.parse(JSON.stringify(obj));
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js
  const React391 = __toModule(require_react());
  const useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {
    const logger = useGridLogger(apiRef, "useNativeEventListener");
    const [added, setAdded] = React391.useState(false);
    const handlerRef = React391.useRef(handler);
    const wrapHandler = React391.useCallback((event) => {
      return handlerRef.current && handlerRef.current(event);
    }, []);
    React391.useEffect(() => {
      handlerRef.current = handler;
    }, [handler]);
    React391.useEffect(() => {
      let targetElement;
      if (isFunction(ref)) {
        targetElement = ref();
      } else {
        targetElement = ref && ref.current ? ref.current : null;
      }
      if (targetElement && eventName && !added) {
        logger.debug(`Binding native ${eventName} event`);
        targetElement.addEventListener(eventName, wrapHandler, options);
        const boundElem = targetElement;
        setAdded(true);
        const unsubscribe = () => {
          logger.debug(`Clearing native ${eventName} event`);
          boundElem.removeEventListener(eventName, wrapHandler, options);
        };
        apiRef.current.subscribeEvent("unmount", unsubscribe);
      }
    }, [ref, wrapHandler, eventName, added, logger, options, apiRef]);
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js
  const React384 = __toModule(require_react());
  const useFirstRender2 = (callback) => {
    const isFirstRender = React384.useRef(true);
    if (isFirstRender.current) {
      isFirstRender.current = false;
      callback();
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js
  const MAX_PAGE_SIZE = 100;
  const defaultPageSize = (autoPageSize) => autoPageSize ? 0 : 100;
  const getPageCount = (rowCount, pageSize2) => {
    if (pageSize2 > 0 && rowCount > 0) {
      return Math.ceil(rowCount / pageSize2);
    }
    return 0;
  };
  const noRowCountInServerMode = buildWarning(["MUI: the 'rowCount' prop is undefined while using paginationMode='server'", "For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation"], "error");
  const getDefaultGridPaginationModel = (autoPageSize) => ({
    page: 0,
    pageSize: autoPageSize ? 0 : 100
  });
  const getValidPage = (page, pageCount = 0) => {
    if (pageCount === 0) {
      return page;
    }
    return Math.max(Math.min(page, pageCount - 1), 0);
  };
  const throwIfPageSizeExceedsTheLimit = (pageSize2, signatureProp) => {
    if (signatureProp === GridSignature.DataGrid && pageSize2 > MAX_PAGE_SIZE) {
      throw new Error(["MUI: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
  const gridPaginationSelector3 = (state) => state.pagination;
  const gridPaginationModelSelector = createSelector2(gridPaginationSelector3, (pagination2) => pagination2.paginationModel);
  const gridPageSelector = createSelector2(gridPaginationModelSelector, (paginationModel) => paginationModel.page);
  const gridPageSizeSelector = createSelector2(gridPaginationModelSelector, (paginationModel) => paginationModel.pageSize);
  const gridPageCountSelector = createSelector2(gridPaginationModelSelector, gridFilteredTopLevelRowCountSelector, (paginationModel, visibleTopLevelRowCount) => getPageCount(visibleTopLevelRowCount, paginationModel.pageSize));
  const gridPaginationRowRangeSelector = createSelector2(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
    const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
    const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);
    const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);
    if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
      return null;
    }
    if (rowTreeDepth < 2) {
      return {
        firstRowIndex: topLevelFirstRowIndex,
        lastRowIndex: topLevelLastRowIndex
      };
    }
    const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
    const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
    const firstRowIndex = visibleSortedRowEntries.findIndex((row) => row.id === topLevelFirstRow.id);
    let lastRowIndex = firstRowIndex;
    let topLevelRowAdded = 0;
    while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {
      const row = visibleSortedRowEntries[lastRowIndex];
      const depth = rowTree[row.id].depth;
      if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
        lastRowIndex += 1;
      }
      if (depth === 0) {
        topLevelRowAdded += 1;
      }
    }
    return {
      firstRowIndex,
      lastRowIndex: lastRowIndex - 1
    };
  });
  const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector2(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {
    if (!paginationRange) {
      return [];
    }
    return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
  });
  const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector2(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {
    if (!paginationRange) {
      return [];
    }
    return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
  });

  // node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js
  const React305 = __toModule(require_react());
  const prop_types209 = __toModule(require_prop_types7());
  const jsx_runtime315 = __toModule(require_jsx_runtime());
  const _excluded197 = ["field", "colDef"];
  const useUtilityClasses156 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["checkboxInput"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridHeaderCheckbox2 = React305.forwardRef(function GridHeaderCheckbox3(props, ref) {
    var _rootProps$slotProps;
    const other = _objectWithoutPropertiesLoose(props, _excluded197);
    const [, forceUpdate] = React305.useState(false);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses156(ownerState);
    const tabIndexState = useGridSelector2(apiRef, gridTabIndexColumnHeaderSelector);
    const selection = useGridSelector2(apiRef, gridRowSelectionStateSelector);
    const visibleRowIds = useGridSelector2(apiRef, gridExpandedSortedRowIdsSelector);
    const paginatedVisibleRowIds = useGridSelector2(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);
    const filteredSelection = React305.useMemo(() => {
      if (typeof rootProps.isRowSelectable !== "function") {
        return selection;
      }
      return selection.filter((id) => {
        if (!apiRef.current.getRow(id)) {
          return false;
        }
        return rootProps.isRowSelectable(apiRef.current.getRowParams(id));
      });
    }, [apiRef, rootProps.isRowSelectable, selection]);
    const selectionCandidates = React305.useMemo(() => {
      const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds;
      return rowIds.reduce((acc, id) => {
        acc[id] = true;
        return acc;
      }, {});
    }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]);
    const currentSelectionSize = React305.useMemo(() => filteredSelection.filter((id) => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);
    const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;
    const isChecked = currentSelectionSize > 0;
    const handleChange = (event) => {
      const params = {
        value: event.target.checked
      };
      apiRef.current.publishEvent("headerSelectionCheckboxChange", params);
    };
    const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;
    React305.useLayoutEffect(() => {
      const element = apiRef.current.getColumnHeaderElement(props.field);
      if (tabIndex === 0 && element) {
        element.tabIndex = -1;
      }
    }, [tabIndex, apiRef, props.field]);
    const handleKeyDown3 = React305.useCallback((event) => {
      if (event.key === " ") {
        apiRef.current.publishEvent("headerSelectionCheckboxChange", {
          value: !isChecked
        });
      }
    }, [apiRef, isChecked]);
    const handleSelectionChange = React305.useCallback(() => {
      forceUpdate((p2) => !p2);
    }, []);
    React305.useEffect(() => {
      return apiRef.current.subscribeEvent("rowSelectionChange", handleSelectionChange);
    }, [apiRef, handleSelectionChange]);
    const label = apiRef.current.getLocaleText(isChecked ? "checkboxSelectionUnselectAllRows" : "checkboxSelectionSelectAllRows");
    return jsx_runtime315.jsx(rootProps.slots.baseCheckbox, _extends({
      ref,
      indeterminate: isIndeterminate,
      checked: isChecked,
      onChange: handleChange,
      className: classes.root,
      inputProps: {
        "aria-label": label
      },
      tabIndex,
      onKeyDown: handleKeyDown3
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));
  });
  GridHeaderCheckbox2.propTypes = {
    colDef: prop_types209.default.object.isRequired,
    field: prop_types209.default.string.isRequired
  };

  // node_modules/@mui/x-data-grid/material/icons/index.js
  const React397 = __toModule(require_react());
  const jsx_runtime378 = __toModule(require_jsx_runtime());
  const GridArrowUpwardIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
  }), "ArrowUpward");
  const GridArrowDownwardIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");
  const GridKeyboardArrowRight = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
  }), "KeyboardArrowRight");
  const GridExpandMoreIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }), "ExpandMore");
  const GridFilterListIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
  }), "FilterList");
  const GridFilterAltIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
  }), "FilterAlt");
  const GridSearchIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
  }), "Search");
  const GridMenuIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
  }), "Menu");
  const GridCheckCircleIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckCircle");
  const GridColumnIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"
  }), "ColumnIcon");
  const GridSeparatorIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M11 19V5h2v14z"
  }), "Separator");
  const GridViewHeadlineIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
  }), "ViewHeadline");
  const GridTableRowsIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
  }), "TableRows");
  const GridViewStreamIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
  }), "ViewStream");
  const GridTripleDotsVerticalIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "TripleDotsVertical");
  const GridCloseIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  const GridAddIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), "Add");
  const GridRemoveIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M19 13H5v-2h14v2z"
  }), "Remove");
  const GridLoadIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
  }), "Load");
  const GridDragIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "Drag");
  const GridSaveAltIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
  }), "SaveAlt");
  const GridCheckIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
  }), "Check");
  const GridMoreVertIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreVert");
  const GridVisibilityOffIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
  }), "VisibilityOff");
  const GridViewColumnIcon = createSvgIcon(jsx_runtime378.jsx("g", {
    children: jsx_runtime378.jsx("path", {
      d: "M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"
    })
  }), "ViewColumn");
  const GridClearIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Clear");
  const GridDeleteIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
  }), "Delete");
  const GridDeleteForeverIcon = createSvgIcon(jsx_runtime378.jsx("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"
  }), "Delete");

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuContainer.js
  const prop_types217 = __toModule(require_prop_types7());
  const React314 = __toModule(require_react());
  const jsx_runtime324 = __toModule(require_jsx_runtime());
  const _excluded204 = ["hideMenu", "colDef", "id", "labelledby", "className", "children", "open"];
  const StyledMenuList = styled_default(MenuList_default)(() => ({
    minWidth: 248
  }));
  const GridColumnMenuContainer2 = React314.forwardRef(function GridColumnMenuContainer3(props, ref) {
    const {
      hideMenu,
      id,
      labelledby,
      className: className3,
      children,
      open
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded204);
    const handleListKeyDown = React314.useCallback((event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        hideMenu(event);
      }
    }, [hideMenu]);
    return jsx_runtime324.jsx(StyledMenuList, _extends({
      id,
      ref,
      className: clsx_m_default(gridClasses7.menuList, className3),
      "aria-labelledby": labelledby,
      onKeyDown: handleListKeyDown,
      autoFocus: open
    }, other, {
      children
    }));
  });
  GridColumnMenuContainer2.propTypes = {
    colDef: prop_types217.default.object.isRequired,
    hideMenu: prop_types217.default.func.isRequired,
    id: prop_types217.default.string,
    labelledby: prop_types217.default.string,
    open: prop_types217.default.bool.isRequired
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenuSlots.js
  const React360 = __toModule(require_react());
  const _excluded247 = ["displayOrder"];
  const useGridColumnMenuSlots2 = (props) => {
    const apiRef = useGridPrivateApiContext2();
    const {
      defaultSlots: defaultSlots2,
      defaultSlotProps,
      slots = {},
      slotProps = {},
      hideMenu,
      colDef: colDef6,
      addDividers = true
    } = props;
    const processedComponents = React360.useMemo(() => _extends({}, defaultSlots2, slots), [defaultSlots2, slots]);
    const processedSlotProps = React360.useMemo(() => {
      if (!slotProps || Object.keys(slotProps).length === 0) {
        return defaultSlotProps;
      }
      const mergedProps = _extends({}, slotProps);
      Object.entries(defaultSlotProps).forEach(([key, currentSlotProps]) => {
        mergedProps[key] = _extends({}, currentSlotProps, slotProps[key] || {});
      });
      return mergedProps;
    }, [defaultSlotProps, slotProps]);
    const defaultItems = apiRef.current.unstable_applyPipeProcessors("columnMenu", [], props.colDef);
    const userItems = React360.useMemo(() => {
      const defaultComponentKeys = Object.keys(defaultSlots2);
      return Object.keys(slots).filter((key) => !defaultComponentKeys.includes(key));
    }, [slots, defaultSlots2]);
    return React360.useMemo(() => {
      const uniqueItems = Array.from(new Set([...defaultItems, ...userItems]));
      const cleansedItems = uniqueItems.filter((key) => processedComponents[key] != null);
      const sorted = cleansedItems.sort((a2, b2) => {
        const leftItemProps = processedSlotProps[a2];
        const rightItemProps = processedSlotProps[b2];
        const leftDisplayOrder = Number.isFinite(leftItemProps == null ? void 0 : leftItemProps.displayOrder) ? leftItemProps.displayOrder : 100;
        const rightDisplayOrder = Number.isFinite(rightItemProps == null ? void 0 : rightItemProps.displayOrder) ? rightItemProps.displayOrder : 100;
        return leftDisplayOrder - rightDisplayOrder;
      });
      return sorted.reduce((acc, key, index) => {
        let itemProps = {
          colDef: colDef6,
          onClick: hideMenu
        };
        const processedComponentProps = processedSlotProps[key];
        if (processedComponentProps) {
          const customProps = _objectWithoutPropertiesLoose(processedComponentProps, _excluded247);
          itemProps = _extends({}, itemProps, customProps);
        }
        return addDividers && index !== sorted.length - 1 ? [...acc, [processedComponents[key], itemProps], [Divider_default, {}]] : [...acc, [processedComponents[key], itemProps]];
      }, []);
    }, [addDividers, colDef6, defaultItems, hideMenu, processedComponents, processedSlotProps, userItems]);
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuHideItem.js
  const React317 = __toModule(require_react());
  const prop_types220 = __toModule(require_prop_types7());
  const jsx_runtime329 = __toModule(require_jsx_runtime());
  const jsx_runtime330 = __toModule(require_jsx_runtime());
  function GridColumnMenuHideItem2(props) {
    const {
      colDef: colDef6,
      onClick
    } = props;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
    const columnsWithMenu = visibleColumns.filter((col) => col.disableColumnMenu !== true);
    const disabled = columnsWithMenu.length === 1;
    const toggleColumn = React317.useCallback((event) => {
      if (disabled) {
        return;
      }
      apiRef.current.setColumnVisibility(colDef6.field, false);
      onClick(event);
    }, [apiRef, colDef6.field, onClick, disabled]);
    if (rootProps.disableColumnSelector) {
      return null;
    }
    if (colDef6.hideable === false) {
      return null;
    }
    return jsx_runtime330.jsxs(MenuItem_default, {
      onClick: toggleColumn,
      disabled,
      children: [jsx_runtime329.jsx(ListItemIcon_default, {
        children: jsx_runtime329.jsx(rootProps.slots.columnMenuHideIcon, {
          fontSize: "small"
        })
      }), jsx_runtime329.jsx(ListItemText_default, {
        children: apiRef.current.getLocaleText("columnMenuHideColumn")
      })]
    });
  }
  GridColumnMenuHideItem2.propTypes = {
    colDef: prop_types220.default.object.isRequired,
    onClick: prop_types220.default.func.isRequired
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuManageItem.js
  const React318 = __toModule(require_react());
  const prop_types221 = __toModule(require_prop_types7());
  const jsx_runtime331 = __toModule(require_jsx_runtime());
  const jsx_runtime332 = __toModule(require_jsx_runtime());
  function GridColumnMenuManageItem2(props) {
    const {
      onClick
    } = props;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const showColumns = React318.useCallback((event) => {
      onClick(event);
      apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
    }, [apiRef, onClick]);
    if (rootProps.disableColumnSelector) {
      return null;
    }
    return jsx_runtime332.jsxs(MenuItem_default, {
      onClick: showColumns,
      children: [jsx_runtime331.jsx(ListItemIcon_default, {
        children: jsx_runtime331.jsx(rootProps.slots.columnMenuManageColumnsIcon, {
          fontSize: "small"
        })
      }), jsx_runtime331.jsx(ListItemText_default, {
        children: apiRef.current.getLocaleText("columnMenuManageColumns")
      })]
    });
  }
  GridColumnMenuManageItem2.propTypes = {
    colDef: prop_types221.default.object.isRequired,
    onClick: prop_types221.default.func.isRequired
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
  const React315 = __toModule(require_react());
  const prop_types218 = __toModule(require_prop_types7());
  const jsx_runtime325 = __toModule(require_jsx_runtime());
  const jsx_runtime326 = __toModule(require_jsx_runtime());
  function GridColumnMenuColumnsItem2(props) {
    return jsx_runtime326.jsxs(React315.Fragment, {
      children: [jsx_runtime325.jsx(GridColumnMenuHideItem2, _extends({}, props)), jsx_runtime325.jsx(GridColumnMenuManageItem2, _extends({}, props))]
    });
  }
  GridColumnMenuColumnsItem2.propTypes = {
    colDef: prop_types218.default.object.isRequired,
    onClick: prop_types218.default.func.isRequired
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuFilterItem.js
  const React316 = __toModule(require_react());
  const prop_types219 = __toModule(require_prop_types7());
  const jsx_runtime327 = __toModule(require_jsx_runtime());
  const jsx_runtime328 = __toModule(require_jsx_runtime());
  function GridColumnMenuFilterItem2(props) {
    const {
      colDef: colDef6,
      onClick
    } = props;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const showFilter = React316.useCallback((event) => {
      onClick(event);
      apiRef.current.showFilterPanel(colDef6.field);
    }, [apiRef, colDef6.field, onClick]);
    if (rootProps.disableColumnFilter || !colDef6.filterable) {
      return null;
    }
    return jsx_runtime328.jsxs(MenuItem_default, {
      onClick: showFilter,
      children: [jsx_runtime327.jsx(ListItemIcon_default, {
        children: jsx_runtime327.jsx(rootProps.slots.columnMenuFilterIcon, {
          fontSize: "small"
        })
      }), jsx_runtime327.jsx(ListItemText_default, {
        children: apiRef.current.getLocaleText("columnMenuFilter")
      })]
    });
  }
  GridColumnMenuFilterItem2.propTypes = {
    colDef: prop_types219.default.object.isRequired,
    onClick: prop_types219.default.func.isRequired
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuSortItem.js
  const React319 = __toModule(require_react());
  const prop_types222 = __toModule(require_prop_types7());
  const jsx_runtime333 = __toModule(require_jsx_runtime());
  const jsx_runtime334 = __toModule(require_jsx_runtime());
  function GridColumnMenuSortItem2(props) {
    var _colDef$sortingOrder;
    const {
      colDef: colDef6,
      onClick
    } = props;
    const apiRef = useGridApiContext2();
    const sortModel = useGridSelector2(apiRef, gridSortModelSelector);
    const rootProps = useGridRootProps2();
    const sortDirection = React319.useMemo(() => {
      if (!colDef6) {
        return null;
      }
      const sortItem = sortModel.find((item) => item.field === colDef6.field);
      return sortItem == null ? void 0 : sortItem.sort;
    }, [colDef6, sortModel]);
    const sortingOrder = (_colDef$sortingOrder = colDef6.sortingOrder) != null ? _colDef$sortingOrder : rootProps.sortingOrder;
    const onSortMenuItemClick = React319.useCallback((event) => {
      onClick(event);
      const direction = event.currentTarget.getAttribute("data-value") || null;
      apiRef.current.sortColumn(colDef6, direction === sortDirection ? null : direction);
    }, [apiRef, colDef6, onClick, sortDirection]);
    if (!colDef6 || !colDef6.sortable || !sortingOrder.some((item) => !!item)) {
      return null;
    }
    return jsx_runtime334.jsxs(React319.Fragment, {
      children: [sortingOrder.includes("asc") && sortDirection !== "asc" ? jsx_runtime334.jsxs(MenuItem_default, {
        onClick: onSortMenuItemClick,
        "data-value": "asc",
        children: [jsx_runtime333.jsx(ListItemIcon_default, {
          children: jsx_runtime333.jsx(rootProps.slots.columnMenuSortAscendingIcon, {
            fontSize: "small"
          })
        }), jsx_runtime333.jsx(ListItemText_default, {
          children: apiRef.current.getLocaleText("columnMenuSortAsc")
        })]
      }) : null, sortingOrder.includes("desc") && sortDirection !== "desc" ? jsx_runtime334.jsxs(MenuItem_default, {
        onClick: onSortMenuItemClick,
        "data-value": "desc",
        children: [jsx_runtime333.jsx(ListItemIcon_default, {
          children: jsx_runtime333.jsx(rootProps.slots.columnMenuSortDescendingIcon, {
            fontSize: "small"
          })
        }), jsx_runtime333.jsx(ListItemText_default, {
          children: apiRef.current.getLocaleText("columnMenuSortDesc")
        })]
      }) : null, sortingOrder.includes(null) && sortDirection != null ? jsx_runtime334.jsxs(MenuItem_default, {
        onClick: onSortMenuItemClick,
        children: [jsx_runtime333.jsx(ListItemIcon_default, {}), jsx_runtime333.jsx(ListItemText_default, {
          children: apiRef.current.getLocaleText("columnMenuUnsort")
        })]
      }) : null]
    });
  }
  GridColumnMenuSortItem2.propTypes = {
    colDef: prop_types222.default.object.isRequired,
    onClick: prop_types222.default.func.isRequired
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
  const React313 = __toModule(require_react());
  const prop_types216 = __toModule(require_prop_types7());
  const jsx_runtime323 = __toModule(require_jsx_runtime());
  const _excluded203 = ["defaultSlots", "defaultSlotProps", "slots", "slotProps"];
  const GRID_COLUMN_MENU_SLOTS = {
    columnMenuSortItem: GridColumnMenuSortItem2,
    columnMenuFilterItem: GridColumnMenuFilterItem2,
    columnMenuColumnsItem: GridColumnMenuColumnsItem2
  };
  const GRID_COLUMN_MENU_SLOT_PROPS = {
    columnMenuSortItem: {
      displayOrder: 10
    },
    columnMenuFilterItem: {
      displayOrder: 20
    },
    columnMenuColumnsItem: {
      displayOrder: 30
    }
  };
  const GridGenericColumnMenu = React313.forwardRef(function GridGenericColumnMenu2(props, ref) {
    const {
      defaultSlots: defaultSlots2,
      defaultSlotProps,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded203);
    const orderedSlots = useGridColumnMenuSlots2(_extends({}, other, {
      defaultSlots: defaultSlots2,
      defaultSlotProps,
      slots,
      slotProps
    }));
    return jsx_runtime323.jsx(GridColumnMenuContainer2, _extends({
      ref
    }, other, {
      children: orderedSlots.map(([Component, otherProps], index) => jsx_runtime323.jsx(Component, _extends({}, otherProps), index))
    }));
  });
  const GridColumnMenu = React313.forwardRef(function GridColumnMenu5(props, ref) {
    return jsx_runtime323.jsx(GridGenericColumnMenu, _extends({}, props, {
      ref,
      defaultSlots: GRID_COLUMN_MENU_SLOTS,
      defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS
    }));
  });
  GridColumnMenu.propTypes = {
    colDef: prop_types216.default.object.isRequired,
    hideMenu: prop_types216.default.func.isRequired,
    id: prop_types216.default.string,
    labelledby: prop_types216.default.string,
    open: prop_types216.default.bool.isRequired,
    slotProps: prop_types216.default.object,
    slots: prop_types216.default.object
  };

  // node_modules/@mui/x-data-grid/components/panel/GridPanelContent.js
  const React322 = __toModule(require_react());
  const prop_types225 = __toModule(require_prop_types7());
  const jsx_runtime338 = __toModule(require_jsx_runtime());
  const _excluded207 = ["className"];
  const useUtilityClasses164 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelContent"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridPanelContentRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "PanelContent",
    overridesResolver: (props, styles30) => styles30.panelContent
  })({
    display: "flex",
    flexDirection: "column",
    overflow: "auto",
    flex: "1 1",
    maxHeight: 400
  });
  function GridPanelContent2(props) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded207);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses164(rootProps);
    return jsx_runtime338.jsx(GridPanelContentRoot, _extends({
      className: clsx_m_default(className3, classes.root),
      ownerState: rootProps
    }, other));
  }
  GridPanelContent2.propTypes = {
    sx: prop_types225.default.oneOfType([prop_types225.default.arrayOf(prop_types225.default.oneOfType([prop_types225.default.func, prop_types225.default.object, prop_types225.default.bool])), prop_types225.default.func, prop_types225.default.object])
  };

  // node_modules/@mui/x-data-grid/components/panel/GridPanelFooter.js
  const React323 = __toModule(require_react());
  const prop_types226 = __toModule(require_prop_types7());
  const jsx_runtime339 = __toModule(require_jsx_runtime());
  const _excluded208 = ["className"];
  const useUtilityClasses165 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelFooter"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridPanelFooterRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "PanelFooter",
    overridesResolver: (props, styles30) => styles30.panelFooter
  })(({
    theme
  }) => ({
    padding: theme.spacing(0.5),
    display: "flex",
    justifyContent: "space-between"
  }));
  function GridPanelFooter2(props) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded208);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses165(rootProps);
    return jsx_runtime339.jsx(GridPanelFooterRoot, _extends({
      className: clsx_m_default(className3, classes.root),
      ownerState: rootProps
    }, other));
  }
  GridPanelFooter2.propTypes = {
    sx: prop_types226.default.oneOfType([prop_types226.default.arrayOf(prop_types226.default.oneOfType([prop_types226.default.func, prop_types226.default.object, prop_types226.default.bool])), prop_types226.default.func, prop_types226.default.object])
  };

  // node_modules/@mui/x-data-grid/components/panel/GridPanelHeader.js
  const React324 = __toModule(require_react());
  const prop_types227 = __toModule(require_prop_types7());
  const jsx_runtime340 = __toModule(require_jsx_runtime());
  const _excluded209 = ["className"];
  const useUtilityClasses166 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelHeader"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridPanelHeaderRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "PanelHeader",
    overridesResolver: (props, styles30) => styles30.panelHeader
  })(({
    theme
  }) => ({
    padding: theme.spacing(1)
  }));
  function GridPanelHeader2(props) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded209);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses166(rootProps);
    return jsx_runtime340.jsx(GridPanelHeaderRoot, _extends({
      className: clsx_m_default(className3, classes.root),
      ownerState: rootProps
    }, other));
  }
  GridPanelHeader2.propTypes = {
    sx: prop_types227.default.oneOfType([prop_types227.default.arrayOf(prop_types227.default.oneOfType([prop_types227.default.func, prop_types227.default.object, prop_types227.default.bool])), prop_types227.default.func, prop_types227.default.object])
  };

  // node_modules/@mui/x-data-grid/components/panel/GridPanelWrapper.js
  const React325 = __toModule(require_react());
  const prop_types228 = __toModule(require_prop_types7());
  const jsx_runtime341 = __toModule(require_jsx_runtime());
  const _excluded224 = ["className", "slotProps"];
  const useUtilityClasses167 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelWrapper"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridPanelWrapperRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelWrapper",
    overridesResolver: (props, styles30) => styles30.panelWrapper
  })({
    display: "flex",
    flexDirection: "column",
    flex: 1,
    "&:focus": {
      outline: 0
    }
  });
  const isEnabled = () => true;
  const GridPanelWrapper2 = React325.forwardRef(function GridPanelWrapper4(props, ref) {
    const {
      className: className3,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded224);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses167(rootProps);
    return jsx_runtime341.jsx(FocusTrap_default, _extends({
      open: true,
      disableEnforceFocus: true,
      isEnabled
    }, slotProps.TrapFocus, {
      children: jsx_runtime341.jsx(GridPanelWrapperRoot, _extends({
        ref,
        tabIndex: -1,
        className: clsx_m_default(className3, classes.root),
        ownerState: rootProps
      }, other))
    }));
  });
  GridPanelWrapper2.propTypes = {
    slotProps: prop_types228.default.object
  };

  // node_modules/@mui/x-data-grid/constants/envConstants.js
  const GRID_EXPERIMENTAL_ENABLED = false;

  // node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
  const React320 = __toModule(require_react());
  const prop_types223 = __toModule(require_prop_types7());
  const jsx_runtime335 = __toModule(require_jsx_runtime());
  const jsx_runtime336 = __toModule(require_jsx_runtime());
  const _excluded205 = ["sort", "searchPredicate", "autoFocusSearchField", "disableHideAllButton", "disableShowAllButton", "getTogglableColumns"];
  const useUtilityClasses163 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnsPanel"],
      columnsPanelRow: ["columnsPanelRow"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridColumnsPanelRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnsPanel",
    overridesResolver: (props, styles30) => styles30.columnsPanel
  })({
    padding: "8px 0px 8px 8px"
  });
  const GridColumnsPanelRowRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnsPanelRow",
    overridesResolver: (props, styles30) => styles30.columnsPanelRow
  })(({
    theme
  }) => ({
    display: "flex",
    justifyContent: "space-between",
    padding: "1px 8px 1px 7px",
    [`& .${switchClasses_default2.root}`]: {
      marginRight: theme.spacing(0.5)
    }
  }));
  const GridIconButtonRoot = styled_default(IconButton_default)({
    justifyContent: "flex-end"
  });
  const collator = new Intl.Collator();
  const defaultSearchPredicate = (column, searchValue) => {
    return (column.headerName || column.field).toLowerCase().indexOf(searchValue) > -1;
  };
  function GridColumnsPanel(props) {
    var _rootProps$slotProps, _rootProps$slotProps3, _rootProps$slotProps4;
    const apiRef = useGridApiContext2();
    const searchInputRef = React320.useRef(null);
    const columns6 = useGridSelector2(apiRef, gridColumnDefinitionsSelector);
    const columnVisibilityModel = useGridSelector2(apiRef, gridColumnVisibilityModelSelector);
    const rootProps = useGridRootProps2();
    const [searchValue, setSearchValue] = React320.useState("");
    const classes = useUtilityClasses163(rootProps);
    const {
      sort,
      searchPredicate = defaultSearchPredicate,
      autoFocusSearchField = true,
      disableHideAllButton = false,
      disableShowAllButton = false,
      getTogglableColumns
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded205);
    const sortedColumns = React320.useMemo(() => {
      switch (sort) {
        case "asc":
          return [...columns6].sort((a2, b2) => collator.compare(a2.headerName || a2.field, b2.headerName || b2.field));
        case "desc":
          return [...columns6].sort((a2, b2) => -collator.compare(a2.headerName || a2.field, b2.headerName || b2.field));
        default:
          return columns6;
      }
    }, [columns6, sort]);
    const toggleColumn = (event) => {
      const {
        name: field
      } = event.target;
      apiRef.current.setColumnVisibility(field, columnVisibilityModel[field] === false);
    };
    const toggleAllColumns = React320.useCallback((isVisible2) => {
      const currentModel = gridColumnVisibilityModelSelector(apiRef);
      const newModel = _extends({}, currentModel);
      const togglableColumns = getTogglableColumns ? getTogglableColumns(columns6) : null;
      columns6.forEach((col) => {
        if (col.hideable && (togglableColumns == null || togglableColumns.includes(col.field))) {
          if (isVisible2) {
            delete newModel[col.field];
          } else {
            newModel[col.field] = false;
          }
        }
      });
      return apiRef.current.setColumnVisibilityModel(newModel);
    }, [apiRef, columns6, getTogglableColumns]);
    const handleSearchValueChange = React320.useCallback((event) => {
      setSearchValue(event.target.value);
    }, []);
    const currentColumns = React320.useMemo(() => {
      const togglableColumns = getTogglableColumns ? getTogglableColumns(sortedColumns) : null;
      const togglableSortedColumns = togglableColumns ? sortedColumns.filter(({
        field
      }) => togglableColumns.includes(field)) : sortedColumns;
      if (!searchValue) {
        return togglableSortedColumns;
      }
      return togglableSortedColumns.filter((column) => searchPredicate(column, searchValue.toLowerCase()));
    }, [sortedColumns, searchValue, searchPredicate, getTogglableColumns]);
    const firstSwitchRef = React320.useRef(null);
    React320.useEffect(() => {
      if (autoFocusSearchField) {
        searchInputRef.current.focus();
      } else if (firstSwitchRef.current && typeof firstSwitchRef.current.focus === "function") {
        firstSwitchRef.current.focus();
      }
    }, [autoFocusSearchField]);
    let firstHideableColumnFound = false;
    const isFirstHideableColumn = (column) => {
      if (firstHideableColumnFound === false && column.hideable !== false) {
        firstHideableColumnFound = true;
        return true;
      }
      return false;
    };
    return jsx_runtime336.jsxs(GridPanelWrapper2, _extends({}, other, {
      children: [jsx_runtime335.jsx(GridPanelHeader2, {
        children: jsx_runtime335.jsx(rootProps.slots.baseTextField, _extends({
          label: apiRef.current.getLocaleText("columnsPanelTextFieldLabel"),
          placeholder: apiRef.current.getLocaleText("columnsPanelTextFieldPlaceholder"),
          inputRef: searchInputRef,
          value: searchValue,
          onChange: handleSearchValueChange,
          variant: "standard",
          fullWidth: true
        }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField))
      }), jsx_runtime335.jsx(GridPanelContent2, {
        children: jsx_runtime335.jsx(GridColumnsPanelRoot, {
          className: classes.root,
          ownerState: rootProps,
          children: currentColumns.map((column) => {
            var _rootProps$slotProps2;
            return jsx_runtime336.jsxs(GridColumnsPanelRowRoot, {
              className: classes.columnsPanelRow,
              ownerState: rootProps,
              children: [jsx_runtime335.jsx(FormControlLabel_default, {
                control: jsx_runtime335.jsx(rootProps.slots.baseSwitch, _extends({
                  disabled: column.hideable === false,
                  checked: columnVisibilityModel[column.field] !== false,
                  onClick: toggleColumn,
                  name: column.field,
                  size: "small",
                  inputRef: isFirstHideableColumn(column) ? firstSwitchRef : void 0
                }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSwitch)),
                label: column.headerName || column.field
              }), !rootProps.disableColumnReorder && GRID_EXPERIMENTAL_ENABLED && jsx_runtime335.jsx(GridIconButtonRoot, {
                draggable: true,
                "aria-label": apiRef.current.getLocaleText("columnsPanelDragIconLabel"),
                title: apiRef.current.getLocaleText("columnsPanelDragIconLabel"),
                size: "small",
                disabled: true,
                children: jsx_runtime335.jsx(rootProps.slots.columnReorderIcon, {})
              })]
            }, column.field);
          })
        })
      }), disableShowAllButton && disableHideAllButton ? null : jsx_runtime336.jsxs(GridPanelFooter2, {
        children: [!disableHideAllButton ? jsx_runtime335.jsx(rootProps.slots.baseButton, _extends({
          onClick: () => toggleAllColumns(false)
        }, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseButton, {
          disabled: disableHideAllButton,
          children: apiRef.current.getLocaleText("columnsPanelHideAllButton")
        })) : jsx_runtime335.jsx("span", {}), !disableShowAllButton ? jsx_runtime335.jsx(rootProps.slots.baseButton, _extends({
          onClick: () => toggleAllColumns(true)
        }, (_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseButton, {
          disabled: disableShowAllButton,
          children: apiRef.current.getLocaleText("columnsPanelShowAllButton")
        })) : null]
      })]
    }));
  }
  GridColumnsPanel.propTypes = {
    autoFocusSearchField: prop_types223.default.bool,
    disableHideAllButton: prop_types223.default.bool,
    disableShowAllButton: prop_types223.default.bool,
    getTogglableColumns: prop_types223.default.func,
    searchPredicate: prop_types223.default.func,
    slotProps: prop_types223.default.object,
    sort: prop_types223.default.oneOf(["asc", "desc"])
  };

  // node_modules/@mui/x-data-grid/components/panel/GridPanel.js
  const React321 = __toModule(require_react());
  const prop_types224 = __toModule(require_prop_types7());
  const jsx_runtime337 = __toModule(require_jsx_runtime());
  const _excluded206 = ["children", "className", "classes"];
  const gridPanelClasses = generateUtilityClasses2("MuiDataGrid", ["panel", "paper"]);
  const GridPanelRoot = styled_default(Popper_default2, {
    name: "MuiDataGrid",
    slot: "Panel",
    overridesResolver: (props, styles30) => styles30.panel
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.modal
  }));
  const GridPaperRoot = styled_default(Paper_default, {
    name: "MuiDataGrid",
    slot: "Paper",
    overridesResolver: (props, styles30) => styles30.paper
  })(({
    theme
  }) => ({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    minWidth: 300,
    maxHeight: 450,
    display: "flex"
  }));
  const GridPanel = React321.forwardRef((props, ref) => {
    const {
      children,
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded206);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const classes = gridPanelClasses;
    const [isPlaced, setIsPlaced] = React321.useState(false);
    const handleClickAway = React321.useCallback(() => {
      apiRef.current.hidePreferences();
    }, [apiRef]);
    const handleKeyDown3 = React321.useCallback((event) => {
      if (isEscapeKey(event.key)) {
        apiRef.current.hidePreferences();
      }
    }, [apiRef]);
    const modifiers = React321.useMemo(() => [{
      name: "flip",
      enabled: false
    }, {
      name: "isPlaced",
      enabled: true,
      phase: "main",
      fn: () => {
        setIsPlaced(true);
      },
      effect: () => () => {
        setIsPlaced(false);
      }
    }], []);
    const [anchorEl, setAnchorEl] = React321.useState(null);
    React321.useEffect(() => {
      var _apiRef$current$rootE, _apiRef$current$rootE2;
      const columnHeadersElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : (_apiRef$current$rootE2 = _apiRef$current$rootE.current) == null ? void 0 : _apiRef$current$rootE2.querySelector(`.${gridClasses7.columnHeaders}`);
      if (columnHeadersElement) {
        setAnchorEl(columnHeadersElement);
      }
    }, [apiRef]);
    if (!anchorEl) {
      return null;
    }
    return jsx_runtime337.jsx(GridPanelRoot, _extends({
      ref,
      placement: "bottom-start",
      className: clsx_m_default(className3, classes.panel),
      ownerState: rootProps,
      anchorEl,
      modifiers
    }, other, {
      children: jsx_runtime337.jsx(ClickAwayListener_default, {
        mouseEvent: "onMouseUp",
        onClickAway: handleClickAway,
        children: jsx_runtime337.jsx(GridPaperRoot, {
          className: classes.paper,
          ownerState: rootProps,
          elevation: 8,
          onKeyDown: handleKeyDown3,
          children: isPlaced && children
        })
      })
    }));
  });
  GridPanel.propTypes = {
    children: prop_types224.default.node,
    classes: prop_types224.default.object,
    open: prop_types224.default.bool.isRequired,
    ownerState: prop_types224.default.object
  };

  // node_modules/@mui/x-data-grid/components/panel/GridPreferencesPanel.js
  const React326 = __toModule(require_react());
  const jsx_runtime342 = __toModule(require_jsx_runtime());
  const GridPreferencesPanel = React326.forwardRef(function GridPreferencesPanel2(props, ref) {
    var _preferencePanelState, _rootProps$slotProps, _rootProps$slotProps2;
    const apiRef = useGridApiContext2();
    const columns6 = useGridSelector2(apiRef, gridColumnDefinitionsSelector);
    const rootProps = useGridRootProps2();
    const preferencePanelState = useGridSelector2(apiRef, gridPreferencePanelStateSelector);
    const panelContent = apiRef.current.unstable_applyPipeProcessors("preferencePanel", null, (_preferencePanelState = preferencePanelState.openedPanelValue) != null ? _preferencePanelState : GridPreferencePanelsValue.filters);
    return jsx_runtime342.jsx(rootProps.slots.panel, _extends({
      ref,
      as: rootProps.slots.basePopper,
      open: columns6.length > 0 && preferencePanelState.open
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.panel, props, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.basePopper, {
      children: panelContent
    }));
  });

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterForm.js
  const React327 = __toModule(require_react());
  const prop_types229 = __toModule(require_prop_types7());
  const jsx_runtime343 = __toModule(require_jsx_runtime());
  const react15 = __toModule(require_react());
  const jsx_runtime344 = __toModule(require_jsx_runtime());
  const _excluded225 = ["item", "hasMultipleFilters", "deleteFilter", "applyFilterChanges", "multiFilterOperator", "showMultiFilterOperators", "disableMultiFilterOperator", "applyMultiFilterOperatorChanges", "focusElementRef", "logicOperators", "columnsSort", "filterColumns", "deleteIconProps", "logicOperatorInputProps", "operatorInputProps", "columnInputProps", "valueInputProps", "children"];
  const _excluded226 = ["InputComponentProps"];
  const useUtilityClasses168 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["filterForm"],
      deleteIcon: ["filterFormDeleteIcon"],
      logicOperatorInput: ["filterFormLogicOperatorInput"],
      columnInput: ["filterFormColumnInput"],
      operatorInput: ["filterFormOperatorInput"],
      valueInput: ["filterFormValueInput"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridFilterFormRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterForm",
    overridesResolver: (props, styles30) => styles30.filterForm
  })(({
    theme
  }) => ({
    display: "flex",
    padding: theme.spacing(1)
  }));
  const FilterFormDeleteIcon = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterFormDeleteIcon",
    overridesResolver: (_6, styles30) => styles30.filterFormDeleteIcon
  })(({
    theme
  }) => ({
    flexShrink: 0,
    justifyContent: "flex-end",
    marginRight: theme.spacing(0.5),
    marginBottom: theme.spacing(0.2)
  }));
  const FilterFormLogicOperatorInput = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterFormLogicOperatorInput",
    overridesResolver: (_6, styles30) => styles30.filterFormLogicOperatorInput
  })({
    minWidth: 55,
    marginRight: 5,
    justifyContent: "end"
  });
  const FilterFormColumnInput = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterFormColumnInput",
    overridesResolver: (_6, styles30) => styles30.filterFormColumnInput
  })({
    width: 150
  });
  const FilterFormOperatorInput = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterFormOperatorInput",
    overridesResolver: (_6, styles30) => styles30.filterFormOperatorInput
  })({
    width: 120
  });
  const FilterFormValueInput = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FilterFormValueInput",
    overridesResolver: (_6, styles30) => styles30.filterFormValueInput
  })({
    width: 190
  });
  const getLogicOperatorLocaleKey = (logicOperator) => {
    switch (logicOperator) {
      case GridLogicOperator.And:
        return "filterPanelOperatorAnd";
      case GridLogicOperator.Or:
        return "filterPanelOperatorOr";
      default:
        throw new Error("MUI: Invalid `logicOperator` property in the `GridFilterPanel`.");
    }
  };
  const getColumnLabel = (col) => col.headerName || col.field;
  const collator2 = new Intl.Collator();
  const GridFilterForm = React327.forwardRef(function GridFilterForm3(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2, _baseSelectProps$nati, _rootProps$slotProps3, _rootProps$slotProps4, _rootProps$slotProps5, _rootProps$slotProps6, _rootProps$slotProps7, _rootProps$slotProps8, _currentColumn$filter2;
    const {
      item,
      hasMultipleFilters,
      deleteFilter,
      applyFilterChanges,
      multiFilterOperator,
      showMultiFilterOperators,
      disableMultiFilterOperator,
      applyMultiFilterOperatorChanges,
      focusElementRef,
      logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],
      columnsSort,
      filterColumns,
      deleteIconProps = {},
      logicOperatorInputProps = {},
      operatorInputProps = {},
      columnInputProps = {},
      valueInputProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded225);
    const apiRef = useGridApiContext2();
    const filterableColumns = useGridSelector2(apiRef, gridFilterableColumnDefinitionsSelector);
    const filterModel = useGridSelector2(apiRef, gridFilterModelSelector);
    const columnSelectId = useId();
    const columnSelectLabelId = useId();
    const operatorSelectId = useId();
    const operatorSelectLabelId = useId();
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses168(rootProps);
    const valueRef = React327.useRef(null);
    const filterSelectorRef = React327.useRef(null);
    const hasLogicOperatorColumn = hasMultipleFilters && logicOperators.length > 0;
    const baseFormControlProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseFormControl) || {};
    const baseSelectProps = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelect) || {};
    const isBaseSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const baseInputLabelProps = ((_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseInputLabel) || {};
    const baseSelectOptionProps = ((_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseSelectOption) || {};
    const {
      InputComponentProps
    } = valueInputProps, valueInputPropsOther = _objectWithoutPropertiesLoose(valueInputProps, _excluded226);
    const filteredColumns = React327.useMemo(() => {
      if (filterColumns === void 0 || typeof filterColumns !== "function") {
        return filterableColumns;
      }
      const filteredFields = filterColumns({
        field: item.field,
        columns: filterableColumns,
        currentFilters: (filterModel == null ? void 0 : filterModel.items) || []
      });
      return filterableColumns.filter((column) => filteredFields.includes(column.field));
    }, [filterColumns, filterModel == null ? void 0 : filterModel.items, filterableColumns, item.field]);
    const sortedFilteredColumns = React327.useMemo(() => {
      switch (columnsSort) {
        case "asc":
          return filteredColumns.sort((a2, b2) => collator2.compare(getColumnLabel(a2), getColumnLabel(b2)));
        case "desc":
          return filteredColumns.sort((a2, b2) => -collator2.compare(getColumnLabel(a2), getColumnLabel(b2)));
        default:
          return filteredColumns;
      }
    }, [filteredColumns, columnsSort]);
    const currentColumn = item.field ? apiRef.current.getColumn(item.field) : null;
    const currentOperator = React327.useMemo(() => {
      var _currentColumn$filter;
      if (!item.operator || !currentColumn) {
        return null;
      }
      return (_currentColumn$filter = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter.find((operator) => operator.value === item.operator);
    }, [item, currentColumn]);
    const changeColumn = React327.useCallback((event) => {
      const field = event.target.value;
      const column = apiRef.current.getColumn(field);
      if (column.field === currentColumn.field) {
        return;
      }
      const newOperator = column.filterOperators.find((operator) => operator.value === item.operator) || column.filterOperators[0];
      const eraseItemValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
      applyFilterChanges(_extends({}, item, {
        field,
        operator: newOperator.value,
        value: eraseItemValue ? void 0 : item.value
      }));
    }, [apiRef, applyFilterChanges, item, currentColumn, currentOperator]);
    const changeOperator = React327.useCallback((event) => {
      const operator = event.target.value;
      const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find((op) => op.value === operator);
      const eraseItemValue = !(newOperator != null && newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
      applyFilterChanges(_extends({}, item, {
        operator,
        value: eraseItemValue ? void 0 : item.value
      }));
    }, [applyFilterChanges, item, currentColumn, currentOperator]);
    const changeLogicOperator = React327.useCallback((event) => {
      const logicOperator = event.target.value === GridLogicOperator.And.toString() ? GridLogicOperator.And : GridLogicOperator.Or;
      applyMultiFilterOperatorChanges(logicOperator);
    }, [applyMultiFilterOperatorChanges]);
    const handleDeleteFilter = () => {
      if (rootProps.disableMultipleColumnsFiltering) {
        if (item.value === void 0) {
          deleteFilter(item);
        } else {
          applyFilterChanges(_extends({}, item, {
            value: void 0
          }));
        }
      } else {
        deleteFilter(item);
      }
    };
    React327.useImperativeHandle(focusElementRef, () => ({
      focus: () => {
        if (currentOperator != null && currentOperator.InputComponent) {
          var _valueRef$current;
          valueRef == null ? void 0 : (_valueRef$current = valueRef.current) == null ? void 0 : _valueRef$current.focus();
        } else {
          filterSelectorRef.current.focus();
        }
      }
    }), [currentOperator]);
    return jsx_runtime344.jsxs(GridFilterFormRoot, _extends({
      ref,
      className: classes.root,
      "data-id": item.id,
      ownerState: rootProps
    }, other, {
      children: [jsx_runtime343.jsx(FilterFormDeleteIcon, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, deleteIconProps, {
        className: clsx_m_default(classes.deleteIcon, baseFormControlProps.className, deleteIconProps.className),
        ownerState: rootProps,
        children: jsx_runtime343.jsx(rootProps.slots.baseIconButton, _extends({
          "aria-label": apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
          title: apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
          onClick: handleDeleteFilter,
          size: "small"
        }, (_rootProps$slotProps5 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps5.baseIconButton, {
          children: jsx_runtime343.jsx(rootProps.slots.filterPanelDeleteIcon, {
            fontSize: "small"
          })
        }))
      })), jsx_runtime343.jsx(FilterFormLogicOperatorInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, logicOperatorInputProps, {
        sx: _extends({
          display: hasLogicOperatorColumn ? "flex" : "none",
          visibility: showMultiFilterOperators ? "visible" : "hidden"
        }, baseFormControlProps.sx || {}, logicOperatorInputProps.sx || {}),
        className: clsx_m_default(classes.logicOperatorInput, baseFormControlProps.className, logicOperatorInputProps.className),
        ownerState: rootProps,
        children: jsx_runtime343.jsx(rootProps.slots.baseSelect, _extends({
          inputProps: {
            "aria-label": apiRef.current.getLocaleText("filterPanelLogicOperator")
          },
          value: multiFilterOperator,
          onChange: changeLogicOperator,
          disabled: !!disableMultiFilterOperator || logicOperators.length === 1,
          native: isBaseSelectNative
        }, (_rootProps$slotProps6 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps6.baseSelect, {
          children: logicOperators.map((logicOperator) => react15.createElement(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isBaseSelectNative,
            key: logicOperator.toString(),
            value: logicOperator.toString()
          }), apiRef.current.getLocaleText(getLogicOperatorLocaleKey(logicOperator))))
        }))
      })), jsx_runtime344.jsxs(FilterFormColumnInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, columnInputProps, {
        className: clsx_m_default(classes.columnInput, baseFormControlProps.className, columnInputProps.className),
        ownerState: rootProps,
        children: [jsx_runtime343.jsx(rootProps.slots.baseInputLabel, _extends({}, baseInputLabelProps, {
          htmlFor: columnSelectId,
          id: columnSelectLabelId,
          children: apiRef.current.getLocaleText("filterPanelColumns")
        })), jsx_runtime343.jsx(rootProps.slots.baseSelect, _extends({
          labelId: columnSelectLabelId,
          id: columnSelectId,
          label: apiRef.current.getLocaleText("filterPanelColumns"),
          value: item.field || "",
          onChange: changeColumn,
          native: isBaseSelectNative
        }, (_rootProps$slotProps7 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps7.baseSelect, {
          children: sortedFilteredColumns.map((col) => react15.createElement(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isBaseSelectNative,
            key: col.field,
            value: col.field
          }), getColumnLabel(col)))
        }))]
      })), jsx_runtime344.jsxs(FilterFormOperatorInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, operatorInputProps, {
        className: clsx_m_default(classes.operatorInput, baseFormControlProps.className, operatorInputProps.className),
        ownerState: rootProps,
        children: [jsx_runtime343.jsx(rootProps.slots.baseInputLabel, _extends({}, baseInputLabelProps, {
          htmlFor: operatorSelectId,
          id: operatorSelectLabelId,
          children: apiRef.current.getLocaleText("filterPanelOperator")
        })), jsx_runtime343.jsx(rootProps.slots.baseSelect, _extends({
          labelId: operatorSelectLabelId,
          label: apiRef.current.getLocaleText("filterPanelOperator"),
          id: operatorSelectId,
          value: item.operator,
          onChange: changeOperator,
          native: isBaseSelectNative,
          inputRef: filterSelectorRef
        }, (_rootProps$slotProps8 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps8.baseSelect, {
          children: currentColumn == null ? void 0 : (_currentColumn$filter2 = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter2.map((operator) => react15.createElement(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isBaseSelectNative,
            key: operator.value,
            value: operator.value
          }), operator.label || apiRef.current.getLocaleText(`filterOperator${capitalize48(operator.value)}`)))
        }))]
      })), jsx_runtime343.jsx(FilterFormValueInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, valueInputPropsOther, {
        className: clsx_m_default(classes.valueInput, baseFormControlProps.className, valueInputPropsOther.className),
        ownerState: rootProps,
        children: currentOperator != null && currentOperator.InputComponent ? jsx_runtime343.jsx(currentOperator.InputComponent, _extends({
          apiRef,
          item,
          applyValue: applyFilterChanges,
          focusElementRef: valueRef
        }, currentOperator.InputComponentProps, InputComponentProps)) : null
      }))]
    }));
  });
  GridFilterForm.propTypes = {
    applyFilterChanges: prop_types229.default.func.isRequired,
    applyMultiFilterOperatorChanges: prop_types229.default.func.isRequired,
    children: prop_types229.default.node,
    columnInputProps: prop_types229.default.any,
    columnsSort: prop_types229.default.oneOf(["asc", "desc"]),
    deleteFilter: prop_types229.default.func.isRequired,
    deleteIconProps: prop_types229.default.any,
    disableMultiFilterOperator: prop_types229.default.bool,
    filterColumns: prop_types229.default.func,
    focusElementRef: prop_types229.default.oneOfType([prop_types229.default.func, prop_types229.default.object]),
    hasMultipleFilters: prop_types229.default.bool.isRequired,
    item: prop_types229.default.shape({
      field: prop_types229.default.string.isRequired,
      id: prop_types229.default.oneOfType([prop_types229.default.number, prop_types229.default.string]),
      operator: prop_types229.default.string.isRequired,
      value: prop_types229.default.any
    }).isRequired,
    logicOperatorInputProps: prop_types229.default.any,
    logicOperators: prop_types229.default.arrayOf(prop_types229.default.oneOf(["and", "or"]).isRequired),
    multiFilterOperator: prop_types229.default.oneOf(["and", "or"]),
    operatorInputProps: prop_types229.default.any,
    showMultiFilterOperators: prop_types229.default.bool,
    valueInputProps: prop_types229.default.any
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.js
  const React333 = __toModule(require_react());
  const prop_types234 = __toModule(require_prop_types7());
  const jsx_runtime352 = __toModule(require_jsx_runtime());
  const _excluded232 = ["item", "applyValue", "type", "apiRef", "focusElementRef"];
  const SUBMIT_FILTER_STROKE_TIME = 500;
  function GridFilterInputValue2(props) {
    var _item$value, _rootProps$slotProps;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded232);
    const filterTimeout = React333.useRef();
    const [filterValueState, setFilterValueState] = React333.useState((_item$value = item.value) != null ? _item$value : "");
    const [applying, setIsApplying] = React333.useState(false);
    const id = useId();
    const rootProps = useGridRootProps2();
    const onFilterChange = React333.useCallback((event) => {
      const {
        value
      } = event.target;
      clearTimeout(filterTimeout.current);
      setFilterValueState(String(value));
      setIsApplying(true);
      filterTimeout.current = setTimeout(() => {
        applyValue(_extends({}, item, {
          value
        }));
        setIsApplying(false);
      }, SUBMIT_FILTER_STROKE_TIME);
    }, [applyValue, item]);
    React333.useEffect(() => {
      return () => {
        clearTimeout(filterTimeout.current);
      };
    }, []);
    React333.useEffect(() => {
      var _item$value2;
      const itemValue = (_item$value2 = item.value) != null ? _item$value2 : "";
      setFilterValueState(String(itemValue));
    }, [item.value]);
    const InputProps = applying ? {
      endAdornment: jsx_runtime352.jsx(rootProps.slots.loadIcon, {})
    } : others.InputProps;
    return jsx_runtime352.jsx(rootProps.slots.baseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      variant: "standard",
      type: type || "text",
      InputProps,
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef
    }, others, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
  }
  GridFilterInputValue2.propTypes = {
    apiRef: prop_types234.default.shape({
      current: prop_types234.default.object.isRequired
    }).isRequired,
    applyValue: prop_types234.default.func.isRequired,
    focusElementRef: prop_types234.default.oneOfType([prop_types234.default.func, prop_types234.default.object]),
    item: prop_types234.default.shape({
      field: prop_types234.default.string.isRequired,
      id: prop_types234.default.oneOfType([prop_types234.default.number, prop_types234.default.string]),
      operator: prop_types234.default.string.isRequired,
      value: prop_types234.default.any
    }).isRequired
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputDate.js
  const React329 = __toModule(require_react());
  const prop_types230 = __toModule(require_prop_types7());
  const jsx_runtime347 = __toModule(require_jsx_runtime());
  const _excluded228 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "InputProps"];
  const SUBMIT_FILTER_DATE_STROKE_TIME = 500;
  function GridFilterInputDate2(props) {
    var _item$value, _rootProps$slotProps;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      InputProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded228);
    const filterTimeout = React329.useRef();
    const [filterValueState, setFilterValueState] = React329.useState((_item$value = item.value) != null ? _item$value : "");
    const [applying, setIsApplying] = React329.useState(false);
    const id = useId();
    const rootProps = useGridRootProps2();
    const onFilterChange = React329.useCallback((event) => {
      const value = event.target.value;
      clearTimeout(filterTimeout.current);
      setFilterValueState(String(value));
      setIsApplying(true);
      filterTimeout.current = setTimeout(() => {
        applyValue(_extends({}, item, {
          value
        }));
        setIsApplying(false);
      }, SUBMIT_FILTER_DATE_STROKE_TIME);
    }, [applyValue, item]);
    React329.useEffect(() => {
      return () => {
        clearTimeout(filterTimeout.current);
      };
    }, []);
    React329.useEffect(() => {
      var _item$value2;
      const itemValue = (_item$value2 = item.value) != null ? _item$value2 : "";
      setFilterValueState(String(itemValue));
    }, [item.value]);
    return jsx_runtime347.jsx(rootProps.slots.baseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      variant: "standard",
      type: type || "text",
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef,
      InputProps: _extends({}, applying ? {
        endAdornment: jsx_runtime347.jsx(rootProps.slots.loadIcon, {})
      } : {}, InputProps, {
        inputProps: _extends({
          max: type === "datetime-local" ? "9999-12-31T23:59" : "9999-12-31"
        }, InputProps == null ? void 0 : InputProps.inputProps)
      })
    }, other, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
  }
  GridFilterInputDate2.propTypes = {
    apiRef: prop_types230.default.shape({
      current: prop_types230.default.object.isRequired
    }).isRequired,
    applyValue: prop_types230.default.func.isRequired,
    focusElementRef: prop_types230.default.oneOfType([prop_types230.default.func, prop_types230.default.object]),
    item: prop_types230.default.shape({
      field: prop_types230.default.string.isRequired,
      id: prop_types230.default.oneOfType([prop_types230.default.number, prop_types230.default.string]),
      operator: prop_types230.default.string.isRequired,
      value: prop_types230.default.any
    }).isRequired
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputSingleSelect.js
  const React332 = __toModule(require_react());
  const prop_types233 = __toModule(require_prop_types7());
  const react16 = __toModule(require_react());
  const jsx_runtime350 = __toModule(require_jsx_runtime());
  const jsx_runtime351 = __toModule(require_jsx_runtime());
  const _excluded231 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "getOptionLabel", "getOptionValue"];
  const renderSingleSelectOptions = ({
    column: {
      valueOptions,
      field
    },
    OptionComponent,
    getOptionLabel,
    getOptionValue,
    isSelectNative,
    baseSelectOptionProps
  }) => {
    const iterableColumnValues = typeof valueOptions === "function" ? ["", ...valueOptions({
      field
    })] : ["", ...valueOptions || []];
    return iterableColumnValues.map((option) => {
      const value = getOptionValue(option);
      const label = getOptionLabel(option);
      return react16.createElement(OptionComponent, _extends({}, baseSelectOptionProps, {
        native: isSelectNative,
        key: value,
        value
      }), label);
    });
  };
  function GridFilterInputSingleSelect2(props) {
    var _item$value, _rootProps$slotProps$, _rootProps$slotProps, _rootProps$slotProps$2, _resolvedColumn, _resolvedColumn2, _rootProps$slotProps2, _rootProps$slotProps3, _rootProps$slotProps4;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      getOptionLabel: getOptionLabelProp,
      getOptionValue: getOptionValueProp
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded231);
    const [filterValueState, setFilterValueState] = React332.useState((_item$value = item.value) != null ? _item$value : "");
    const id = useId();
    const labelId = useId();
    const rootProps = useGridRootProps2();
    const isSelectNative = (_rootProps$slotProps$ = (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : (_rootProps$slotProps$2 = _rootProps$slotProps.baseSelect) == null ? void 0 : _rootProps$slotProps$2.native) != null ? _rootProps$slotProps$ : true;
    let resolvedColumn = null;
    if (item.field) {
      const column = apiRef.current.getColumn(item.field);
      if (isSingleSelectColDef(column)) {
        resolvedColumn = column;
      }
    }
    const getOptionValue = getOptionValueProp || ((_resolvedColumn = resolvedColumn) == null ? void 0 : _resolvedColumn.getOptionValue);
    const getOptionLabel = getOptionLabelProp || ((_resolvedColumn2 = resolvedColumn) == null ? void 0 : _resolvedColumn2.getOptionLabel);
    const currentValueOptions = React332.useMemo(() => {
      if (!resolvedColumn) {
        return void 0;
      }
      return typeof resolvedColumn.valueOptions === "function" ? resolvedColumn.valueOptions({
        field: resolvedColumn.field
      }) : resolvedColumn.valueOptions;
    }, [resolvedColumn]);
    const onFilterChange = React332.useCallback((event) => {
      let value = event.target.value;
      value = getValueFromValueOptions(value, currentValueOptions, getOptionValue);
      setFilterValueState(String(value));
      applyValue(_extends({}, item, {
        value
      }));
    }, [currentValueOptions, getOptionValue, applyValue, item]);
    React332.useEffect(() => {
      var _itemValue;
      let itemValue;
      if (currentValueOptions !== void 0) {
        itemValue = getValueFromValueOptions(item.value, currentValueOptions, getOptionValue);
        if (itemValue !== item.value) {
          applyValue(_extends({}, item, {
            value: itemValue
          }));
          return;
        }
      } else {
        itemValue = item.value;
      }
      itemValue = (_itemValue = itemValue) != null ? _itemValue : "";
      setFilterValueState(String(itemValue));
    }, [item, currentValueOptions, applyValue, getOptionValue]);
    if (!isSingleSelectColDef(resolvedColumn)) {
      return null;
    }
    if (!isSingleSelectColDef(resolvedColumn)) {
      return null;
    }
    const label = apiRef.current.getLocaleText("filterPanelInputLabel");
    return jsx_runtime351.jsxs(React332.Fragment, {
      children: [jsx_runtime350.jsx(rootProps.slots.baseInputLabel, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseInputLabel, {
        id: labelId,
        shrink: true,
        variant: "standard",
        children: label
      })), jsx_runtime350.jsx(rootProps.slots.baseSelect, _extends({
        id,
        label,
        labelId,
        value: filterValueState,
        onChange: onFilterChange,
        variant: "standard",
        type: type || "text",
        inputProps: {
          ref: focusElementRef,
          placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder")
        },
        native: isSelectNative
      }, others, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelect, {
        children: renderSingleSelectOptions({
          column: resolvedColumn,
          OptionComponent: rootProps.slots.baseSelectOption,
          getOptionLabel,
          getOptionValue,
          isSelectNative,
          baseSelectOptionProps: (_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseSelectOption
        })
      }))]
    });
  }
  GridFilterInputSingleSelect2.propTypes = {
    apiRef: prop_types233.default.shape({
      current: prop_types233.default.object.isRequired
    }).isRequired,
    applyValue: prop_types233.default.func.isRequired,
    focusElementRef: prop_types233.default.oneOfType([prop_types233.default.func, prop_types233.default.object]),
    getOptionLabel: prop_types233.default.func,
    getOptionValue: prop_types233.default.func,
    item: prop_types233.default.shape({
      field: prop_types233.default.string.isRequired,
      id: prop_types233.default.oneOfType([prop_types233.default.number, prop_types233.default.string]),
      operator: prop_types233.default.string.isRequired,
      value: prop_types233.default.any
    }).isRequired
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterPanel.js
  const React334 = __toModule(require_react());
  const prop_types235 = __toModule(require_prop_types7());
  const jsx_runtime353 = __toModule(require_jsx_runtime());
  const jsx_runtime354 = __toModule(require_jsx_runtime());
  const _excluded233 = ["logicOperators", "columnsSort", "filterFormProps", "getColumnForNewFilter", "children", "disableAddFilterButton", "disableRemoveAllButton"];
  const getGridFilter = (col) => ({
    field: col.field,
    operator: col.filterOperators[0].value,
    id: Math.round(Math.random() * 1e5)
  });
  const GridFilterPanel = React334.forwardRef(function GridFilterPanel2(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const filterModel = useGridSelector2(apiRef, gridFilterModelSelector);
    const filterableColumns = useGridSelector2(apiRef, gridFilterableColumnDefinitionsSelector);
    const lastFilterRef = React334.useRef(null);
    const placeholderFilter = React334.useRef(null);
    const {
      logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],
      columnsSort,
      filterFormProps,
      getColumnForNewFilter,
      disableAddFilterButton = false,
      disableRemoveAllButton = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded233);
    const applyFilter = React334.useCallback((item) => {
      apiRef.current.upsertFilterItem(item);
    }, [apiRef]);
    const applyFilterLogicOperator = React334.useCallback((operator) => {
      apiRef.current.setFilterLogicOperator(operator);
    }, [apiRef]);
    const getDefaultFilter = React334.useCallback(() => {
      let nextColumnWithOperator;
      if (getColumnForNewFilter && typeof getColumnForNewFilter === "function") {
        const nextFieldName = getColumnForNewFilter({
          currentFilters: (filterModel == null ? void 0 : filterModel.items) || [],
          columns: filterableColumns
        });
        if (nextFieldName === null) {
          return null;
        }
        nextColumnWithOperator = filterableColumns.find(({
          field
        }) => field === nextFieldName);
      } else {
        nextColumnWithOperator = filterableColumns.find((colDef6) => {
          var _colDef$filterOperato;
          return (_colDef$filterOperato = colDef6.filterOperators) == null ? void 0 : _colDef$filterOperato.length;
        });
      }
      if (!nextColumnWithOperator) {
        return null;
      }
      return getGridFilter(nextColumnWithOperator);
    }, [filterModel == null ? void 0 : filterModel.items, filterableColumns, getColumnForNewFilter]);
    const getNewFilter = React334.useCallback(() => {
      if (getColumnForNewFilter === void 0 || typeof getColumnForNewFilter !== "function") {
        return getDefaultFilter();
      }
      const currentFilters = filterModel.items.length ? filterModel.items : [getDefaultFilter()].filter(Boolean);
      const nextColumnFieldName = getColumnForNewFilter({
        currentFilters,
        columns: filterableColumns
      });
      if (nextColumnFieldName === null) {
        return null;
      }
      const nextColumnWithOperator = filterableColumns.find(({
        field
      }) => field === nextColumnFieldName);
      if (!nextColumnWithOperator) {
        return null;
      }
      return getGridFilter(nextColumnWithOperator);
    }, [filterModel.items, filterableColumns, getColumnForNewFilter, getDefaultFilter]);
    const items = React334.useMemo(() => {
      if (filterModel.items.length) {
        return filterModel.items;
      }
      if (!placeholderFilter.current) {
        placeholderFilter.current = getDefaultFilter();
      }
      return placeholderFilter.current ? [placeholderFilter.current] : [];
    }, [filterModel.items, getDefaultFilter]);
    const hasMultipleFilters = items.length > 1;
    const addNewFilter = () => {
      const newFilter = getNewFilter();
      if (!newFilter) {
        return;
      }
      apiRef.current.upsertFilterItems([...items, newFilter]);
    };
    const deleteFilter = React334.useCallback((item) => {
      const shouldCloseFilterPanel = items.length === 1;
      apiRef.current.deleteFilterItem(item);
      if (shouldCloseFilterPanel) {
        apiRef.current.hideFilterPanel();
      }
    }, [apiRef, items.length]);
    const handleRemoveAll = () => {
      if (items.length === 1 && items[0].value === void 0) {
        apiRef.current.deleteFilterItem(items[0]);
        apiRef.current.hideFilterPanel();
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items: []
      }));
    };
    React334.useEffect(() => {
      if (logicOperators.length > 0 && filterModel.logicOperator && !logicOperators.includes(filterModel.logicOperator)) {
        applyFilterLogicOperator(logicOperators[0]);
      }
    }, [logicOperators, applyFilterLogicOperator, filterModel.logicOperator]);
    React334.useEffect(() => {
      if (items.length > 0) {
        lastFilterRef.current.focus();
      }
    }, [items.length]);
    return jsx_runtime354.jsxs(GridPanelWrapper2, _extends({
      ref
    }, other, {
      children: [jsx_runtime353.jsx(GridPanelContent2, {
        children: items.map((item, index) => jsx_runtime353.jsx(GridFilterForm, _extends({
          item,
          applyFilterChanges: applyFilter,
          deleteFilter,
          hasMultipleFilters,
          showMultiFilterOperators: index > 0,
          multiFilterOperator: filterModel.logicOperator,
          disableMultiFilterOperator: index !== 1,
          applyMultiFilterOperatorChanges: applyFilterLogicOperator,
          focusElementRef: index === items.length - 1 ? lastFilterRef : null,
          logicOperators,
          columnsSort
        }, filterFormProps), item.id == null ? index : item.id))
      }), !rootProps.disableMultipleColumnsFiltering && !(disableAddFilterButton && disableRemoveAllButton) ? jsx_runtime354.jsxs(GridPanelFooter2, {
        children: [!disableAddFilterButton ? jsx_runtime353.jsx(rootProps.slots.baseButton, _extends({
          onClick: addNewFilter,
          startIcon: jsx_runtime353.jsx(rootProps.slots.filterPanelAddIcon, {})
        }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
          children: apiRef.current.getLocaleText("filterPanelAddFilter")
        })) : jsx_runtime353.jsx("span", {}), !disableRemoveAllButton ? jsx_runtime353.jsx(rootProps.slots.baseButton, _extends({
          onClick: handleRemoveAll,
          startIcon: jsx_runtime353.jsx(rootProps.slots.filterPanelRemoveAllIcon, {})
        }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseButton, {
          children: apiRef.current.getLocaleText("filterPanelRemoveAll")
        })) : null]
      }) : null]
    }));
  });
  GridFilterPanel.propTypes = {
    children: prop_types235.default.node,
    columnsSort: prop_types235.default.oneOf(["asc", "desc"]),
    disableAddFilterButton: prop_types235.default.bool,
    disableRemoveAllButton: prop_types235.default.bool,
    filterFormProps: prop_types235.default.shape({
      columnInputProps: prop_types235.default.any,
      columnsSort: prop_types235.default.oneOf(["asc", "desc"]),
      deleteIconProps: prop_types235.default.any,
      filterColumns: prop_types235.default.func,
      logicOperatorInputProps: prop_types235.default.any,
      operatorInputProps: prop_types235.default.any,
      valueInputProps: prop_types235.default.any
    }),
    getColumnForNewFilter: prop_types235.default.func,
    logicOperators: prop_types235.default.arrayOf(prop_types235.default.oneOf(["and", "or"]).isRequired),
    sx: prop_types235.default.oneOfType([prop_types235.default.arrayOf(prop_types235.default.oneOfType([prop_types235.default.func, prop_types235.default.object, prop_types235.default.bool])), prop_types235.default.func, prop_types235.default.object])
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleValue.js
  const React331 = __toModule(require_react());
  const prop_types232 = __toModule(require_prop_types7());
  const jsx_runtime349 = __toModule(require_jsx_runtime());
  const _excluded230 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant"];
  function GridFilterInputMultipleValue2(props) {
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      color: color2,
      error,
      helperText,
      size,
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded230);
    const TextFieldProps = {
      color: color2,
      error,
      helperText,
      size,
      variant
    };
    const [filterValueState, setFilterValueState] = React331.useState(item.value || []);
    const id = useId();
    const rootProps = useGridRootProps2();
    React331.useEffect(() => {
      var _item$value;
      const itemValue = (_item$value = item.value) != null ? _item$value : [];
      setFilterValueState(itemValue.map(String));
    }, [item.value]);
    const handleChange = React331.useCallback((event, value) => {
      setFilterValueState(value.map(String));
      applyValue(_extends({}, item, {
        value: [...value]
      }));
    }, [applyValue, item]);
    return jsx_runtime349.jsx(Autocomplete_default, _extends({
      multiple: true,
      freeSolo: true,
      options: [],
      filterOptions: (options, params) => {
        const {
          inputValue
        } = params;
        return inputValue == null || inputValue === "" ? [] : [inputValue];
      },
      id,
      value: filterValueState,
      onChange: handleChange,
      renderTags: (value, getTagProps) => value.map((option, index) => jsx_runtime349.jsx(Chip_default, _extends({
        variant: "outlined",
        size: "small",
        label: option
      }, getTagProps({
        index
      })))),
      renderInput: (params) => {
        var _rootProps$slotProps;
        return jsx_runtime349.jsx(rootProps.slots.baseTextField, _extends({}, params, {
          label: apiRef.current.getLocaleText("filterPanelInputLabel"),
          placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
          InputLabelProps: _extends({}, params.InputLabelProps, {
            shrink: true
          }),
          inputRef: focusElementRef,
          type: type || "text"
        }, TextFieldProps, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
      }
    }, other));
  }
  GridFilterInputMultipleValue2.propTypes = {
    apiRef: prop_types232.default.shape({
      current: prop_types232.default.object.isRequired
    }).isRequired,
    applyValue: prop_types232.default.func.isRequired,
    focusElementRef: prop_types232.default.oneOfType([prop_types232.default.func, prop_types232.default.object]),
    item: prop_types232.default.shape({
      field: prop_types232.default.string.isRequired,
      id: prop_types232.default.oneOfType([prop_types232.default.number, prop_types232.default.string]),
      operator: prop_types232.default.string.isRequired,
      value: prop_types232.default.any
    }).isRequired,
    type: prop_types232.default.oneOf(["number", "text"])
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js
  const React330 = __toModule(require_react());
  const prop_types231 = __toModule(require_prop_types7());
  const jsx_runtime348 = __toModule(require_jsx_runtime());
  const _excluded229 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant", "getOptionLabel", "getOptionValue"];
  const filter2 = createFilterOptions();
  function GridFilterInputMultipleSingleSelect2(props) {
    var _resolvedColumn, _resolvedColumn2;
    const {
      item,
      applyValue,
      apiRef,
      focusElementRef,
      color: color2,
      error,
      helperText,
      size,
      variant = "standard",
      getOptionLabel: getOptionLabelProp,
      getOptionValue: getOptionValueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded229);
    const TextFieldProps = {
      color: color2,
      error,
      helperText,
      size,
      variant
    };
    const id = useId();
    const rootProps = useGridRootProps2();
    let resolvedColumn = null;
    if (item.field) {
      const column = apiRef.current.getColumn(item.field);
      if (isSingleSelectColDef(column)) {
        resolvedColumn = column;
      }
    }
    const getOptionValue = getOptionValueProp || ((_resolvedColumn = resolvedColumn) == null ? void 0 : _resolvedColumn.getOptionValue);
    const getOptionLabel = getOptionLabelProp || ((_resolvedColumn2 = resolvedColumn) == null ? void 0 : _resolvedColumn2.getOptionLabel);
    const isOptionEqualToValue = React330.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);
    const resolvedValueOptions = React330.useMemo(() => {
      var _resolvedColumn3;
      if (!((_resolvedColumn3 = resolvedColumn) != null && _resolvedColumn3.valueOptions)) {
        return [];
      }
      if (typeof resolvedColumn.valueOptions === "function") {
        return resolvedColumn.valueOptions({
          field: resolvedColumn.field
        });
      }
      return resolvedColumn.valueOptions;
    }, [resolvedColumn]);
    const resolvedFormattedValueOptions = React330.useMemo(() => {
      return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getOptionValue);
    }, [resolvedValueOptions, getOptionValue]);
    const filteredValues = React330.useMemo(() => {
      if (!Array.isArray(item.value)) {
        return [];
      }
      if (resolvedValueOptions !== void 0) {
        const itemValueIndexes = item.value.map((element) => {
          return resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex((formattedOption) => formattedOption === element);
        });
        return itemValueIndexes.filter((index) => index >= 0).map((index) => resolvedValueOptions[index]);
      }
      return item.value;
    }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);
    React330.useEffect(() => {
      if (!Array.isArray(item.value) || filteredValues.length !== item.value.length) {
        applyValue(_extends({}, item, {
          value: filteredValues.map(getOptionValue)
        }));
      }
    }, [item, filteredValues, applyValue, getOptionValue]);
    const handleChange = React330.useCallback((event, value) => {
      applyValue(_extends({}, item, {
        value: value.map(getOptionValue)
      }));
    }, [applyValue, item, getOptionValue]);
    return jsx_runtime348.jsx(Autocomplete_default, _extends({
      multiple: true,
      options: resolvedValueOptions,
      isOptionEqualToValue,
      filterOptions: filter2,
      id,
      value: filteredValues,
      onChange: handleChange,
      getOptionLabel,
      renderTags: (value, getTagProps) => value.map((option, index) => jsx_runtime348.jsx(Chip_default, _extends({
        variant: "outlined",
        size: "small",
        label: getOptionLabel(option)
      }, getTagProps({
        index
      })))),
      renderInput: (params) => {
        var _rootProps$slotProps;
        return jsx_runtime348.jsx(rootProps.slots.baseTextField, _extends({}, params, {
          label: apiRef.current.getLocaleText("filterPanelInputLabel"),
          placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
          InputLabelProps: _extends({}, params.InputLabelProps, {
            shrink: true
          }),
          inputRef: focusElementRef,
          type: "singleSelect"
        }, TextFieldProps, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
      }
    }, other));
  }
  GridFilterInputMultipleSingleSelect2.propTypes = {
    apiRef: prop_types231.default.shape({
      current: prop_types231.default.object.isRequired
    }).isRequired,
    applyValue: prop_types231.default.func.isRequired,
    focusElementRef: prop_types231.default.oneOfType([prop_types231.default.func, prop_types231.default.object]),
    getOptionLabel: prop_types231.default.func,
    getOptionValue: prop_types231.default.func,
    item: prop_types231.default.shape({
      field: prop_types231.default.string.isRequired,
      id: prop_types231.default.oneOfType([prop_types231.default.number, prop_types231.default.string]),
      operator: prop_types231.default.string.isRequired,
      value: prop_types231.default.any
    }).isRequired,
    type: prop_types231.default.oneOf(["singleSelect"])
  };

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarColumnsButton.js
  const React336 = __toModule(require_react());
  const jsx_runtime357 = __toModule(require_jsx_runtime());
  const _excluded235 = ["onClick"];
  const GridToolbarColumnsButton = React336.forwardRef(function GridToolbarColumnsButton3(props, ref) {
    var _rootProps$slotProps;
    const {
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded235);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const {
      open,
      openedPanelValue
    } = useGridSelector2(apiRef, gridPreferencePanelStateSelector);
    const showColumns = (event) => {
      if (open && openedPanelValue === GridPreferencePanelsValue.columns) {
        apiRef.current.hidePreferences();
      } else {
        apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
      }
      onClick == null ? void 0 : onClick(event);
    };
    if (rootProps.disableColumnSelector) {
      return null;
    }
    return jsx_runtime357.jsx(rootProps.slots.baseButton, _extends({
      ref,
      size: "small",
      "aria-label": apiRef.current.getLocaleText("toolbarColumnsLabel"),
      startIcon: jsx_runtime357.jsx(rootProps.slots.columnSelectorIcon, {})
    }, other, {
      onClick: showColumns
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
      children: apiRef.current.getLocaleText("toolbarColumns")
    }));
  });

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarDensitySelector.js
  const React337 = __toModule(require_react());
  const jsx_runtime358 = __toModule(require_jsx_runtime());
  const jsx_runtime359 = __toModule(require_jsx_runtime());
  const _excluded236 = ["onClick"];
  const GridToolbarDensitySelector = React337.forwardRef(function GridToolbarDensitySelector3(props, ref) {
    var _rootProps$slotProps;
    const {
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded236);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const densityValue = useGridSelector2(apiRef, gridDensityValueSelector);
    const densityButtonId = useId();
    const densityMenuId = useId();
    const [open, setOpen] = React337.useState(false);
    const buttonRef = React337.useRef(null);
    const handleRef = useForkRef(ref, buttonRef);
    const densityOptions = [{
      icon: jsx_runtime358.jsx(rootProps.slots.densityCompactIcon, {}),
      label: apiRef.current.getLocaleText("toolbarDensityCompact"),
      value: "compact"
    }, {
      icon: jsx_runtime358.jsx(rootProps.slots.densityStandardIcon, {}),
      label: apiRef.current.getLocaleText("toolbarDensityStandard"),
      value: "standard"
    }, {
      icon: jsx_runtime358.jsx(rootProps.slots.densityComfortableIcon, {}),
      label: apiRef.current.getLocaleText("toolbarDensityComfortable"),
      value: "comfortable"
    }];
    const startIcon = React337.useMemo(() => {
      switch (densityValue) {
        case "compact":
          return jsx_runtime358.jsx(rootProps.slots.densityCompactIcon, {});
        case "comfortable":
          return jsx_runtime358.jsx(rootProps.slots.densityComfortableIcon, {});
        default:
          return jsx_runtime358.jsx(rootProps.slots.densityStandardIcon, {});
      }
    }, [densityValue, rootProps]);
    const handleDensitySelectorOpen = (event) => {
      setOpen((prevOpen) => !prevOpen);
      onClick == null ? void 0 : onClick(event);
    };
    const handleDensitySelectorClickAway = (event) => {
      var _buttonRef$current;
      if (buttonRef.current === event.target || (_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target)) {
        return;
      }
      setOpen(false);
    };
    const handleDensityUpdate = (newDensity) => {
      apiRef.current.setDensity(newDensity);
      setOpen(false);
    };
    const handleListKeyDown = (event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        setOpen(false);
      }
    };
    if (rootProps.disableDensitySelector) {
      return null;
    }
    const densityElements = densityOptions.map((option, index) => jsx_runtime359.jsxs(MenuItem_default, {
      onClick: () => handleDensityUpdate(option.value),
      selected: option.value === densityValue,
      children: [jsx_runtime358.jsx(ListItemIcon_default, {
        children: option.icon
      }), option.label]
    }, index));
    return jsx_runtime359.jsxs(React337.Fragment, {
      children: [jsx_runtime358.jsx(rootProps.slots.baseButton, _extends({
        ref: handleRef,
        size: "small",
        startIcon,
        "aria-label": apiRef.current.getLocaleText("toolbarDensityLabel"),
        "aria-expanded": open ? "true" : void 0,
        "aria-haspopup": "menu",
        "aria-controls": densityMenuId,
        id: densityButtonId
      }, other, {
        onClick: handleDensitySelectorOpen
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
        children: apiRef.current.getLocaleText("toolbarDensity")
      })), jsx_runtime358.jsx(GridMenu2, {
        open,
        target: buttonRef.current,
        onClickAway: handleDensitySelectorClickAway,
        position: "bottom-start",
        children: jsx_runtime358.jsx(MenuList_default, {
          id: densityMenuId,
          className: gridClasses7.menuList,
          "aria-labelledby": densityButtonId,
          onKeyDown: handleListKeyDown,
          autoFocusItem: open,
          children: densityElements
        })
      })]
    });
  });

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarFilterButton.js
  const React340 = __toModule(require_react());
  const prop_types238 = __toModule(require_prop_types7());
  const jsx_runtime363 = __toModule(require_jsx_runtime());
  const jsx_runtime364 = __toModule(require_jsx_runtime());
  const _excluded240 = ["componentsProps"];
  const useUtilityClasses169 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["toolbarFilterList"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridToolbarFilterListRoot = styled_default("ul", {
    name: "MuiDataGrid",
    slot: "ToolbarFilterList",
    overridesResolver: (props, styles30) => styles30.toolbarFilterList
  })(({
    theme
  }) => ({
    margin: theme.spacing(1, 1, 0.5),
    padding: theme.spacing(0, 1)
  }));
  const GridToolbarFilterButton = React340.forwardRef(function GridToolbarFilterButton3(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const {
      componentsProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded240);
    const buttonProps = componentsProps.button || {};
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const activeFilters = useGridSelector2(apiRef, gridFilterActiveItemsSelector);
    const lookup = useGridSelector2(apiRef, gridColumnLookupSelector);
    const preferencePanel = useGridSelector2(apiRef, gridPreferencePanelStateSelector);
    const classes = useUtilityClasses169(rootProps);
    const tooltipContentNode = React340.useMemo(() => {
      if (preferencePanel.open) {
        return apiRef.current.getLocaleText("toolbarFiltersTooltipHide");
      }
      if (activeFilters.length === 0) {
        return apiRef.current.getLocaleText("toolbarFiltersTooltipShow");
      }
      const getOperatorLabel = (item) => lookup[item.field].filterOperators.find((operator) => operator.value === item.operator).label || apiRef.current.getLocaleText(`filterOperator${capitalize48(item.operator)}`).toString();
      const getFilterItemValue = (item) => {
        const {
          getValueAsString
        } = lookup[item.field].filterOperators.find((operator) => operator.value === item.operator);
        return getValueAsString ? getValueAsString(item.value) : item.value;
      };
      return jsx_runtime364.jsxs("div", {
        children: [apiRef.current.getLocaleText("toolbarFiltersTooltipActive")(activeFilters.length), jsx_runtime363.jsx(GridToolbarFilterListRoot, {
          className: classes.root,
          ownerState: rootProps,
          children: activeFilters.map((item, index) => _extends({}, lookup[item.field] && jsx_runtime363.jsx("li", {
            children: `${lookup[item.field].headerName || item.field}
                  ${getOperatorLabel(item)}
                  ${item.value != null ? getFilterItemValue(item) : ""}`
          }, index)))
        })]
      });
    }, [apiRef, rootProps, preferencePanel.open, activeFilters, lookup, classes]);
    const toggleFilter = (event) => {
      var _buttonProps$onClick;
      const {
        open,
        openedPanelValue
      } = preferencePanel;
      if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
        apiRef.current.hideFilterPanel();
      } else {
        apiRef.current.showFilterPanel();
      }
      (_buttonProps$onClick = buttonProps.onClick) == null ? void 0 : _buttonProps$onClick.call(buttonProps, event);
    };
    if (rootProps.disableColumnFilter) {
      return null;
    }
    return jsx_runtime363.jsx(rootProps.slots.baseTooltip, _extends({
      title: tooltipContentNode,
      enterDelay: 1e3
    }, other, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {
      children: jsx_runtime363.jsx(rootProps.slots.baseButton, _extends({
        ref,
        size: "small",
        "aria-label": apiRef.current.getLocaleText("toolbarFiltersLabel"),
        startIcon: jsx_runtime363.jsx(Badge_default2, {
          badgeContent: activeFilters.length,
          color: "primary",
          children: jsx_runtime363.jsx(rootProps.slots.openFilterButtonIcon, {})
        })
      }, buttonProps, {
        onClick: toggleFilter
      }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseButton, {
        children: apiRef.current.getLocaleText("toolbarFilters")
      }))
    }));
  });
  GridToolbarFilterButton.propTypes = {
    componentsProps: prop_types238.default.object
  };

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExportContainer.js
  const React339 = __toModule(require_react());
  const jsx_runtime361 = __toModule(require_jsx_runtime());
  const jsx_runtime362 = __toModule(require_jsx_runtime());
  const _excluded239 = ["children", "onClick"];
  const GridToolbarExportContainer2 = React339.forwardRef(function GridToolbarExportContainer3(props, ref) {
    var _rootProps$slotProps;
    const {
      children,
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded239);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const buttonId = useId();
    const menuId = useId();
    const [open, setOpen] = React339.useState(false);
    const buttonRef = React339.useRef(null);
    const handleRef = useForkRef(ref, buttonRef);
    const handleMenuOpen = (event) => {
      setOpen((prevOpen) => !prevOpen);
      onClick == null ? void 0 : onClick(event);
    };
    const handleMenuClose = () => setOpen(false);
    const handleListKeyDown = (event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        handleMenuClose();
      }
    };
    const handleMenuClickAway = (event) => {
      var _buttonRef$current;
      if (buttonRef.current === event.target || (_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target)) {
        return;
      }
      setOpen(false);
    };
    if (children == null) {
      return null;
    }
    return jsx_runtime362.jsxs(React339.Fragment, {
      children: [jsx_runtime361.jsx(rootProps.slots.baseButton, _extends({
        ref: handleRef,
        size: "small",
        startIcon: jsx_runtime361.jsx(rootProps.slots.exportIcon, {}),
        "aria-expanded": open ? "true" : void 0,
        "aria-label": apiRef.current.getLocaleText("toolbarExportLabel"),
        "aria-haspopup": "menu",
        "aria-labelledby": menuId,
        id: buttonId
      }, other, {
        onClick: handleMenuOpen
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
        children: apiRef.current.getLocaleText("toolbarExport")
      })), jsx_runtime361.jsx(GridMenu2, {
        open,
        target: buttonRef.current,
        onClickAway: handleMenuClickAway,
        position: "bottom-start",
        children: jsx_runtime361.jsx(MenuList_default, {
          id: menuId,
          className: gridClasses7.menuList,
          "aria-labelledby": buttonId,
          onKeyDown: handleListKeyDown,
          autoFocusItem: open,
          children: React339.Children.map(children, (child) => {
            if (!React339.isValidElement(child)) {
              return child;
            }
            return React339.cloneElement(child, {
              hideMenu: handleMenuClose
            });
          })
        })
      })]
    });
  });

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js
  const React338 = __toModule(require_react());
  const prop_types237 = __toModule(require_prop_types7());
  const jsx_runtime360 = __toModule(require_jsx_runtime());
  const _excluded237 = ["hideMenu", "options"];
  const _excluded238 = ["hideMenu", "options"];
  const _excluded311 = ["csvOptions", "printOptions", "excelOptions"];
  function GridCsvExportMenuItem(props) {
    const apiRef = useGridApiContext2();
    const {
      hideMenu,
      options
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded237);
    return jsx_runtime360.jsx(MenuItem_default, _extends({
      onClick: () => {
        apiRef.current.exportDataAsCsv(options);
        hideMenu == null ? void 0 : hideMenu();
      }
    }, other, {
      children: apiRef.current.getLocaleText("toolbarExportCSV")
    }));
  }
  function GridPrintExportMenuItem(props) {
    const apiRef = useGridApiContext2();
    const {
      hideMenu,
      options
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded238);
    return jsx_runtime360.jsx(MenuItem_default, _extends({
      onClick: () => {
        apiRef.current.exportDataAsPrint(options);
        hideMenu == null ? void 0 : hideMenu();
      }
    }, other, {
      children: apiRef.current.getLocaleText("toolbarExportPrint")
    }));
  }
  const GridToolbarExport = React338.forwardRef(function GridToolbarExport6(props, ref) {
    const {
      csvOptions = {},
      printOptions = {},
      excelOptions
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded311);
    const apiRef = useGridApiContext2();
    const preProcessedButtons = apiRef.current.unstable_applyPipeProcessors("exportMenu", [], {
      excelOptions,
      csvOptions,
      printOptions
    }).sort((a2, b2) => a2.componentName > b2.componentName ? 1 : -1);
    if (preProcessedButtons.length === 0) {
      return null;
    }
    return jsx_runtime360.jsx(GridToolbarExportContainer2, _extends({}, other, {
      ref,
      children: preProcessedButtons.map((button, index) => React338.cloneElement(button.component, {
        key: index
      }))
    }));
  });
  GridToolbarExport.propTypes = {
    csvOptions: prop_types237.default.object,
    printOptions: prop_types237.default.object
  };

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js
  const getDefaultGridFilterModel = () => ({
    items: [],
    logicOperator: GridLogicOperator.And,
    quickFilterValues: [],
    quickFilterLogicOperator: GridLogicOperator.And
  });

  // node_modules/@mui/x-data-grid/components/GridRowCount.js
  const React278 = __toModule(require_react());
  const prop_types190 = __toModule(require_prop_types7());
  const jsx_runtime281 = __toModule(require_jsx_runtime());
  const _excluded179 = ["className", "rowCount", "visibleRowCount"];
  const useUtilityClasses135 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["rowCount"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridRowCountRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "RowCount",
    overridesResolver: (props, styles30) => styles30.rowCount
  })(({
    theme
  }) => ({
    alignItems: "center",
    display: "flex",
    margin: theme.spacing(0, 2)
  }));
  const GridRowCount2 = React278.forwardRef(function GridRowCount3(props, ref) {
    const {
      className: className3,
      rowCount,
      visibleRowCount
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded179);
    const apiRef = useGridApiContext2();
    const ownerState = useGridRootProps2();
    const classes = useUtilityClasses135(ownerState);
    if (rowCount === 0) {
      return null;
    }
    const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount, rowCount) : rowCount.toLocaleString();
    return jsx_runtime281.jsxs(GridRowCountRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState
    }, other, {
      children: [apiRef.current.getLocaleText("footerTotalRows"), " ", text]
    }));
  });
  GridRowCount2.propTypes = {
    rowCount: prop_types190.default.number.isRequired,
    sx: prop_types190.default.oneOfType([prop_types190.default.arrayOf(prop_types190.default.oneOfType([prop_types190.default.func, prop_types190.default.object, prop_types190.default.bool])), prop_types190.default.func, prop_types190.default.object]),
    visibleRowCount: prop_types190.default.number.isRequired
  };

  // node_modules/@mui/x-data-grid/components/GridSelectedRowCount.js
  const React280 = __toModule(require_react());
  const prop_types192 = __toModule(require_prop_types7());
  const jsx_runtime283 = __toModule(require_jsx_runtime());
  const _excluded180 = ["className", "selectedRowCount"];
  const useUtilityClasses137 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["selectedRowCount"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridSelectedRowCountRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "SelectedRowCount",
    overridesResolver: (props, styles30) => styles30.selectedRowCount
  })(({
    theme
  }) => ({
    alignItems: "center",
    display: "flex",
    margin: theme.spacing(0, 2),
    visibility: "hidden",
    width: 0,
    height: 0,
    [theme.breakpoints.up("sm")]: {
      visibility: "visible",
      width: "auto",
      height: "auto"
    }
  }));
  const GridSelectedRowCount2 = React280.forwardRef(function GridSelectedRowCount3(props, ref) {
    const {
      className: className3,
      selectedRowCount
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded180);
    const apiRef = useGridApiContext2();
    const ownerState = useGridRootProps2();
    const classes = useUtilityClasses137(ownerState);
    const rowSelectedText = apiRef.current.getLocaleText("footerRowSelected")(selectedRowCount);
    return jsx_runtime283.jsx(GridSelectedRowCountRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState
    }, other, {
      children: rowSelectedText
    }));
  });
  GridSelectedRowCount2.propTypes = {
    selectedRowCount: prop_types192.default.number.isRequired,
    sx: prop_types192.default.oneOfType([prop_types192.default.arrayOf(prop_types192.default.oneOfType([prop_types192.default.func, prop_types192.default.object, prop_types192.default.bool])), prop_types192.default.func, prop_types192.default.object])
  };

  // node_modules/@mui/x-data-grid/components/GridFooter.js
  const React271 = __toModule(require_react());
  const prop_types186 = __toModule(require_prop_types7());
  const jsx_runtime271 = __toModule(require_jsx_runtime());
  const jsx_runtime272 = __toModule(require_jsx_runtime());
  const GridFooter = React271.forwardRef(function GridFooter2(props, ref) {
    var _rootProps$slotProps;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const totalTopLevelRowCount = useGridSelector2(apiRef, gridTopLevelRowCountSelector);
    const selectedRowCount = useGridSelector2(apiRef, selectedGridRowsCountSelector);
    const visibleTopLevelRowCount = useGridSelector2(apiRef, gridFilteredTopLevelRowCountSelector);
    const selectedRowCountElement = !rootProps.hideFooterSelectedRowCount && selectedRowCount > 0 ? jsx_runtime271.jsx(GridSelectedRowCount2, {
      selectedRowCount
    }) : jsx_runtime271.jsx("div", {});
    const rowCountElement = !rootProps.hideFooterRowCount && !rootProps.pagination ? jsx_runtime271.jsx(GridRowCount2, {
      rowCount: totalTopLevelRowCount,
      visibleRowCount: visibleTopLevelRowCount
    }) : null;
    const paginationElement = rootProps.pagination && !rootProps.hideFooterPagination && rootProps.slots.pagination && jsx_runtime271.jsx(rootProps.slots.pagination, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.pagination));
    return jsx_runtime272.jsxs(GridFooterContainer2, _extends({
      ref
    }, props, {
      children: [selectedRowCountElement, rowCountElement, paginationElement]
    }));
  });
  GridFooter.propTypes = {
    sx: prop_types186.default.oneOfType([prop_types186.default.arrayOf(prop_types186.default.oneOfType([prop_types186.default.func, prop_types186.default.object, prop_types186.default.bool])), prop_types186.default.func, prop_types186.default.object])
  };

  // node_modules/@mui/x-data-grid/components/GridHeader.js
  const React272 = __toModule(require_react());
  const jsx_runtime273 = __toModule(require_jsx_runtime());
  const jsx_runtime274 = __toModule(require_jsx_runtime());
  function GridHeader() {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const rootProps = useGridRootProps2();
    return jsx_runtime274.jsxs(React272.Fragment, {
      children: [jsx_runtime273.jsx(rootProps.slots.preferencesPanel, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.preferencesPanel)), rootProps.slots.toolbar && jsx_runtime273.jsx(rootProps.slots.toolbar, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.toolbar))]
    });
  }

  // node_modules/@mui/x-data-grid/components/GridLoadingOverlay.js
  const React273 = __toModule(require_react());
  const prop_types187 = __toModule(require_prop_types7());
  const jsx_runtime275 = __toModule(require_jsx_runtime());
  const GridLoadingOverlay = React273.forwardRef(function GridLoadingOverlay2(props, ref) {
    return jsx_runtime275.jsx(GridOverlay2, _extends({
      ref
    }, props, {
      children: jsx_runtime275.jsx(CircularProgress_default, {})
    }));
  });
  GridLoadingOverlay.propTypes = {
    sx: prop_types187.default.oneOfType([prop_types187.default.arrayOf(prop_types187.default.oneOfType([prop_types187.default.func, prop_types187.default.object, prop_types187.default.bool])), prop_types187.default.func, prop_types187.default.object])
  };

  // node_modules/@mui/x-data-grid/components/GridNoRowsOverlay.js
  const React275 = __toModule(require_react());
  const prop_types188 = __toModule(require_prop_types7());
  const jsx_runtime277 = __toModule(require_jsx_runtime());
  const GridNoRowsOverlay = React275.forwardRef(function GridNoRowsOverlay2(props, ref) {
    const apiRef = useGridApiContext2();
    const noRowsLabel = apiRef.current.getLocaleText("noRowsLabel");
    return jsx_runtime277.jsx(GridOverlay2, _extends({
      ref
    }, props, {
      children: noRowsLabel
    }));
  });
  GridNoRowsOverlay.propTypes = {
    sx: prop_types188.default.oneOfType([prop_types188.default.arrayOf(prop_types188.default.oneOfType([prop_types188.default.func, prop_types188.default.object, prop_types188.default.bool])), prop_types188.default.func, prop_types188.default.object])
  };

  // node_modules/@mui/x-data-grid/components/GridPagination.js
  const React276 = __toModule(require_react());
  const jsx_runtime278 = __toModule(require_jsx_runtime());
  const GridPaginationRoot = styled_default(TablePagination_default2)(({
    theme
  }) => ({
    [`& .${tablePaginationClasses_default2.selectLabel}`]: {
      display: "none",
      [theme.breakpoints.up("sm")]: {
        display: "block"
      }
    },
    [`& .${tablePaginationClasses_default2.input}`]: {
      display: "none",
      [theme.breakpoints.up("sm")]: {
        display: "inline-flex"
      }
    }
  }));
  const GridPagination = React276.forwardRef(function GridPagination2(props, ref) {
    var _rootProps$pageSizeOp;
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const paginationModel = useGridSelector2(apiRef, gridPaginationModelSelector);
    const visibleTopLevelRowCount = useGridSelector2(apiRef, gridFilteredTopLevelRowCountSelector);
    const rowCount = React276.useMemo(() => {
      var _ref, _rootProps$rowCount;
      return (_ref = (_rootProps$rowCount = rootProps.rowCount) != null ? _rootProps$rowCount : visibleTopLevelRowCount) != null ? _ref : 0;
    }, [rootProps.rowCount, visibleTopLevelRowCount]);
    const lastPage = React276.useMemo(() => Math.floor(rowCount / (paginationModel.pageSize || 1)), [rowCount, paginationModel.pageSize]);
    const handlePageSizeChange = React276.useCallback((event) => {
      const pageSize2 = Number(event.target.value);
      apiRef.current.setPageSize(pageSize2);
    }, [apiRef]);
    const handlePageChange = React276.useCallback((_6, page) => {
      apiRef.current.setPage(page);
    }, [apiRef]);
    if (true) {
      var _rootProps$pagination, _rootProps$pagination2;
      const warnedOnceMissingInPageSizeOptions = React276.useRef(false);
      const pageSize2 = (_rootProps$pagination = (_rootProps$pagination2 = rootProps.paginationModel) == null ? void 0 : _rootProps$pagination2.pageSize) != null ? _rootProps$pagination : paginationModel.pageSize;
      if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !rootProps.pageSizeOptions.includes(pageSize2)) {
        console.warn([`MUI: The page size \`${paginationModel.pageSize}\` is not preset in the \`pageSizeOptions\``, `Add it to show the pagination select.`].join("\n"));
        warnedOnceMissingInPageSizeOptions.current = true;
      }
    }
    return jsx_runtime278.jsx(GridPaginationRoot, _extends({
      ref,
      component: "div",
      count: rowCount,
      page: paginationModel.page <= lastPage ? paginationModel.page : lastPage,
      rowsPerPageOptions: (_rootProps$pageSizeOp = rootProps.pageSizeOptions) != null && _rootProps$pageSizeOp.includes(paginationModel.pageSize) ? rootProps.pageSizeOptions : [],
      rowsPerPage: paginationModel.pageSize,
      onPageChange: handlePageChange,
      onRowsPerPageChange: handlePageSizeChange
    }, apiRef.current.getLocaleText("MuiTablePagination"), props));
  });

  // node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js
  const React394 = __toModule(require_react());
  const getVisibleRows = (apiRef, props) => {
    let rows3;
    let range;
    if (props.pagination && props.paginationMode === "client") {
      range = gridPaginationRowRangeSelector(apiRef);
      rows3 = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef);
    } else {
      rows3 = gridExpandedSortedRowEntriesSelector(apiRef);
      if (rows3.length === 0) {
        range = null;
      } else {
        range = {
          firstRowIndex: 0,
          lastRowIndex: rows3.length - 1
        };
      }
    }
    return {
      rows: rows3,
      range
    };
  };
  const useGridVisibleRows2 = (apiRef, props) => {
    const response = getVisibleRows(apiRef, props);
    return React394.useMemo(() => ({
      rows: response.rows,
      range: response.range
    }), [response.rows, response.range]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js
  const sortModelDisableMultiColumnsSortingWarning = buildWarning(["MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
  const sanitizeSortModel = (model, disableMultipleColumnsSorting) => {
    if (disableMultipleColumnsSorting && model.length > 1) {
      sortModelDisableMultiColumnsSortingWarning();
      return [model[0]];
    }
    return model;
  };
  const mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => (state) => _extends({}, state, {
    sorting: _extends({}, state.sorting, {
      sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
    })
  });
  const isDesc = (direction) => direction === "desc";
  const parseSortItem = (sortItem, apiRef) => {
    const column = apiRef.current.getColumn(sortItem.field);
    if (!column) {
      return null;
    }
    const comparator = isDesc(sortItem.sort) ? (...args) => -1 * column.sortComparator(...args) : column.sortComparator;
    const getSortCellParams = (id) => ({
      id,
      field: column.field,
      rowNode: apiRef.current.getRowNode(id),
      value: apiRef.current.getCellValue(id, column.field),
      api: apiRef.current
    });
    return {
      getSortCellParams,
      comparator
    };
  };
  const compareRows = (parsedSortItems, row1, row2) => {
    return parsedSortItems.reduce((res, item, index) => {
      if (res !== 0) {
        return res;
      }
      const sortCellParams1 = row1.params[index];
      const sortCellParams2 = row2.params[index];
      res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
      return res;
    }, 0);
  };
  const buildAggregatedSortingApplier = (sortModel, apiRef) => {
    const comparatorList = sortModel.map((item) => parseSortItem(item, apiRef)).filter((comparator) => !!comparator);
    if (comparatorList.length === 0) {
      return null;
    }
    return (rowList) => rowList.map((node) => ({
      node,
      params: comparatorList.map((el) => el.getSortCellParams(node.id))
    })).sort((a2, b2) => compareRows(comparatorList, a2, b2)).map((row) => row.node.id);
  };
  const getNextGridSortDirection = (sortingOrder, current) => {
    const currentIdx = sortingOrder.indexOf(current);
    if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
      return sortingOrder[0];
    }
    return sortingOrder[currentIdx + 1];
  };
  const gridNillComparator = (v1, v2) => {
    if (v1 == null && v2 != null) {
      return -1;
    }
    if (v2 == null && v1 != null) {
      return 1;
    }
    if (v1 == null && v2 == null) {
      return 0;
    }
    return null;
  };
  const collator3 = new Intl.Collator();
  const gridStringOrNumberComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    if (typeof value1 === "string") {
      return collator3.compare(value1.toString(), value2.toString());
    }
    return value1 - value2;
  };
  const gridNumberComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    return Number(value1) - Number(value2);
  };
  const gridDateComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    if (value1 > value2) {
      return 1;
    }
    if (value1 < value2) {
      return -1;
    }
    return 0;
  };

  // node_modules/@mui/x-data-grid/colDef/gridStringOperators.js
  const getGridStringQuickFilterFn = (value) => {
    if (!value) {
      return null;
    }
    const filterRegex = new RegExp(escapeRegExp(value), "i");
    return ({
      formattedValue: columnValue
    }) => {
      return columnValue != null ? filterRegex.test(columnValue.toString()) : false;
    };
  };
  const getGridStringOperators = (disableTrim = false) => [{
    value: "contains",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const filterRegex = new RegExp(escapeRegExp(filterItemValue), "i");
      return ({
        value
      }) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue2
  }, {
    value: "equals",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const collator4 = new Intl.Collator(void 0, {
        sensitivity: "base",
        usage: "search"
      });
      return ({
        value
      }) => {
        return value != null ? collator4.compare(filterItemValue, value.toString()) === 0 : false;
      };
    },
    InputComponent: GridFilterInputValue2
  }, {
    value: "startsWith",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, "i");
      return ({
        value
      }) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue2
  }, {
    value: "endsWith",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, "i");
      return ({
        value
      }) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue2
  }, {
    value: "isEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value === "" || value == null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isNotEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value !== "" && value != null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isAnyOf",
    getApplyFilterFn: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map((val) => val.trim());
      const collator4 = new Intl.Collator(void 0, {
        sensitivity: "base",
        usage: "search"
      });
      return ({
        value
      }) => value != null ? filterItemValue.some((filterValue) => {
        return collator4.compare(filterValue, value.toString() || "") === 0;
      }) : false;
    },
    InputComponent: GridFilterInputMultipleValue2
  }];

  // node_modules/@mui/x-data-grid/colDef/gridStringColDef.js
  const GRID_STRING_COL_DEF = {
    width: 100,
    minWidth: 50,
    maxWidth: Infinity,
    hideable: true,
    sortable: true,
    resizable: true,
    filterable: true,
    groupable: true,
    pinnable: true,
    aggregable: true,
    editable: false,
    sortComparator: gridStringOrNumberComparator,
    type: "string",
    align: "left",
    filterOperators: getGridStringOperators(),
    renderEditCell: renderEditInputCell,
    getApplyQuickFilterFn: getGridStringQuickFilterFn
  };

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputBoolean.js
  const React328 = __toModule(require_react());
  const jsx_runtime345 = __toModule(require_jsx_runtime());
  const jsx_runtime346 = __toModule(require_jsx_runtime());
  const _excluded227 = ["item", "applyValue", "apiRef", "focusElementRef"];
  function GridFilterInputBoolean2(props) {
    var _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2, _rootProps$slotProps3;
    const {
      item,
      applyValue,
      apiRef,
      focusElementRef
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded227);
    const [filterValueState, setFilterValueState] = React328.useState(item.value || "");
    const rootProps = useGridRootProps2();
    const labelId = useId();
    const selectId = useId();
    const baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const baseSelectOptionProps = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelectOption) || {};
    const onFilterChange = React328.useCallback((event) => {
      const value = event.target.value;
      setFilterValueState(value);
      applyValue(_extends({}, item, {
        value
      }));
    }, [applyValue, item]);
    React328.useEffect(() => {
      setFilterValueState(item.value || "");
    }, [item.value]);
    const label = apiRef.current.getLocaleText("filterPanelInputLabel");
    return jsx_runtime346.jsxs(React328.Fragment, {
      children: [jsx_runtime345.jsx(rootProps.slots.baseInputLabel, _extends({}, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseInputLabel, {
        id: labelId,
        shrink: true,
        variant: "standard",
        children: label
      })), jsx_runtime346.jsxs(rootProps.slots.baseSelect, _extends({
        labelId,
        id: selectId,
        label,
        value: filterValueState,
        onChange: onFilterChange,
        variant: "standard",
        native: isSelectNative,
        displayEmpty: true,
        inputProps: {
          ref: focusElementRef
        }
      }, others, baseSelectProps, {
        children: [jsx_runtime345.jsx(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isSelectNative,
          value: "",
          children: apiRef.current.getLocaleText("filterValueAny")
        })), jsx_runtime345.jsx(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isSelectNative,
          value: "true",
          children: apiRef.current.getLocaleText("filterValueTrue")
        })), jsx_runtime345.jsx(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
          native: isSelectNative,
          value: "false",
          children: apiRef.current.getLocaleText("filterValueFalse")
        }))]
      }))]
    });
  }

  // node_modules/@mui/x-data-grid/colDef/gridBooleanOperators.js
  const getGridBooleanOperators = () => [{
    value: "is",
    getApplyFilterFn: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const valueAsBoolean = filterItem.value === "true";
      return ({
        value
      }) => {
        return Boolean(value) === valueAsBoolean;
      };
    },
    InputComponent: GridFilterInputBoolean2
  }];

  // node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.js
  function gridBooleanFormatter({
    value,
    api
  }) {
    return value ? api.getLocaleText("booleanCellTrueLabel") : api.getLocaleText("booleanCellFalseLabel");
  }
  const GRID_BOOLEAN_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "boolean",
    align: "center",
    headerAlign: "center",
    renderCell: renderBooleanCell,
    renderEditCell: renderEditBooleanCell,
    sortComparator: gridNumberComparator,
    valueFormatter: gridBooleanFormatter,
    filterOperators: getGridBooleanOperators(),
    getApplyQuickFilterFn: void 0,
    aggregable: false
  });

  // node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js
  const React267 = __toModule(require_react());
  const jsx_runtime266 = __toModule(require_jsx_runtime());
  const GRID_CHECKBOX_SELECTION_FIELD = "__check__";
  const GRID_CHECKBOX_SELECTION_COL_DEF = _extends({}, GRID_BOOLEAN_COL_DEF, {
    field: GRID_CHECKBOX_SELECTION_FIELD,
    type: "checkboxSelection",
    width: 50,
    resizable: false,
    sortable: false,
    filterable: false,
    aggregable: false,
    disableColumnMenu: true,
    disableReorder: true,
    disableExport: true,
    getApplyQuickFilterFn: void 0,
    valueGetter: (params) => {
      const selectionLookup = selectedIdsLookupSelector(params.api.state, params.api.instanceId);
      return selectionLookup[params.id] !== void 0;
    },
    renderHeader: (params) => jsx_runtime266.jsx(GridHeaderCheckbox2, _extends({}, params)),
    renderCell: (params) => jsx_runtime266.jsx(GridCellCheckboxRenderer2, _extends({}, params))
  });

  // node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js
  const GRID_ACTIONS_COLUMN_TYPE = "actions";
  const GRID_ACTIONS_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    sortable: false,
    filterable: false,
    aggregable: false,
    width: 100,
    align: "center",
    headerAlign: "center",
    headerName: "",
    disableColumnMenu: true,
    disableExport: true,
    renderCell: renderActionsCell,
    getApplyQuickFilterFn: void 0
  });

  // node_modules/@mui/x-data-grid/constants/gridDetailPanelToggleField.js
  const GRID_DETAIL_PANEL_TOGGLE_FIELD = "__detail_panel_toggle__";

  // node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js
  const gridEditRowsStateSelector = (state) => state.editRows;

  // node_modules/@mui/x-data-grid/components/GridRow.js
  const React277 = __toModule(require_react());
  const prop_types189 = __toModule(require_prop_types7());
  const jsx_runtime279 = __toModule(require_jsx_runtime());
  const jsx_runtime280 = __toModule(require_jsx_runtime());
  const _excluded178 = ["selected", "rowId", "row", "index", "style", "position", "rowHeight", "className", "visibleColumns", "renderedColumns", "containerWidth", "firstColumnToRender", "lastColumnToRender", "isLastVisible", "focusedCell", "tabbableCell", "onClick", "onDoubleClick", "onMouseEnter", "onMouseLeave"];
  const _excluded222 = ["changeReason", "unstable_updateValueOnRender"];
  const useUtilityClasses134 = (ownerState) => {
    const {
      editable,
      editing,
      selected,
      isLastVisible,
      rowHeight,
      classes
    } = ownerState;
    const slots = {
      root: ["row", selected && "selected", editable && "row--editable", editing && "row--editing", isLastVisible && "row--lastVisible", rowHeight === "auto" && "row--dynamicHeight"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function EmptyCell({
    width: width2
  }) {
    if (!width2) {
      return null;
    }
    const style16 = {
      width: width2
    };
    return jsx_runtime279.jsx("div", {
      className: `${gridClasses7.cell} ${gridClasses7.withBorderColor}`,
      style: style16
    });
  }
  const GridRow = React277.forwardRef(function GridRow2(props, refProp) {
    const {
      selected,
      rowId,
      row,
      index,
      style: styleProp,
      position: position2,
      rowHeight,
      className: className3,
      renderedColumns,
      containerWidth,
      firstColumnToRender,
      isLastVisible = false,
      focusedCell,
      tabbableCell,
      onClick,
      onDoubleClick,
      onMouseEnter,
      onMouseLeave
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded178);
    const apiRef = useGridApiContext2();
    const ref = React277.useRef(null);
    const rootProps = useGridRootProps2();
    const currentPage = useGridVisibleRows2(apiRef, rootProps);
    const columnsTotalWidth = useGridSelector2(apiRef, gridColumnsTotalWidthSelector);
    const sortModel = useGridSelector2(apiRef, gridSortModelSelector);
    const treeDepth = useGridSelector2(apiRef, gridRowMaximumTreeDepthSelector);
    const headerGroupingMaxDepth = useGridSelector2(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
    const editRowsState = useGridSelector2(apiRef, gridEditRowsStateSelector);
    const handleRef = useForkRef(ref, refProp);
    const ariaRowIndex = index + headerGroupingMaxDepth + 2;
    const ownerState = {
      selected,
      isLastVisible,
      classes: rootProps.classes,
      editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,
      editable: rootProps.editMode === GridEditModes.Row,
      rowHeight
    };
    const classes = useUtilityClasses134(ownerState);
    React277.useLayoutEffect(() => {
      if (rowHeight === "auto" && ref.current && typeof ResizeObserver === "undefined") {
        apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position2);
      }
    }, [apiRef, rowHeight, rowId, position2]);
    React277.useLayoutEffect(() => {
      if (currentPage.range) {
        const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);
        if (rowIndex != null) {
          apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);
        }
      }
      const rootElement = ref.current;
      const hasFixedHeight = rowHeight !== "auto";
      if (!rootElement || hasFixedHeight || typeof ResizeObserver === "undefined") {
        return void 0;
      }
      const resizeObserver = new ResizeObserver((entries) => {
        const [entry] = entries;
        const height2 = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
        apiRef.current.unstable_storeRowHeightMeasurement(rowId, height2, position2);
      });
      resizeObserver.observe(rootElement);
      return () => resizeObserver.disconnect();
    }, [apiRef, currentPage.range, index, rowHeight, rowId, position2]);
    const publish = React277.useCallback((eventName, propHandler) => (event) => {
      if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {
        return;
      }
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, rowId]);
    const publishClick = React277.useCallback((event) => {
      const cell = findParentElementFromClassName(event.target, gridClasses7.cell);
      const field = cell == null ? void 0 : cell.getAttribute("data-field");
      if (field) {
        if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
          return;
        }
        if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
          return;
        }
        if (field === "__reorder__") {
          return;
        }
        if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {
          return;
        }
        const column = apiRef.current.getColumn(field);
        if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
          return;
        }
      }
      publish("rowClick", onClick)(event);
    }, [apiRef, onClick, publish, rowId]);
    const {
      slots,
      slotProps,
      classes: rootClasses,
      disableColumnReorder,
      getCellClassName
    } = rootProps;
    const rowReordering = rootProps.rowReordering;
    const CellComponent = slots.cell;
    const getCell = React277.useCallback((column, cellProps) => {
      const cellParams = apiRef.current.getCellParams(rowId, column.field);
      const classNames = apiRef.current.unstable_applyPipeProcessors("cellClassName", [], {
        id: rowId,
        field: column.field
      });
      const disableDragEvents = disableColumnReorder && column.disableReorder || !rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;
      if (column.cellClassName) {
        classNames.push(clsx_m_default(typeof column.cellClassName === "function" ? column.cellClassName(cellParams) : column.cellClassName));
      }
      const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;
      let content;
      if (editCellState == null && column.renderCell) {
        content = column.renderCell(_extends({}, cellParams, {
          api: apiRef.current
        }));
        classNames.push(clsx_m_default(gridClasses7["cell--withRenderer"], rootClasses == null ? void 0 : rootClasses["cell--withRenderer"]));
      }
      if (editCellState != null && column.renderEditCell) {
        const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);
        const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded222);
        const params = _extends({}, cellParams, {
          row: updatedRow
        }, editCellStateRest, {
          api: apiRef.current
        });
        content = column.renderEditCell(params);
        classNames.push(clsx_m_default(gridClasses7["cell--editing"], rootClasses == null ? void 0 : rootClasses["cell--editing"]));
      }
      if (getCellClassName) {
        classNames.push(getCellClassName(cellParams));
      }
      const hasFocus = focusedCell === column.field;
      const tabIndex = tabbableCell === column.field ? 0 : -1;
      const isSelected = apiRef.current.unstable_applyPipeProcessors("isCellSelected", false, {
        id: rowId,
        field: column.field
      });
      return jsx_runtime279.jsx(CellComponent, _extends({
        value: cellParams.value,
        field: column.field,
        width: cellProps.width,
        rowId,
        height: rowHeight,
        showRightBorder: cellProps.showRightBorder,
        formattedValue: cellParams.formattedValue,
        align: column.align || "left",
        cellMode: cellParams.cellMode,
        colIndex: cellProps.indexRelativeToAllColumns,
        isEditable: cellParams.isEditable,
        isSelected,
        hasFocus,
        tabIndex,
        className: clsx_m_default(classNames),
        colSpan: cellProps.colSpan,
        disableDragEvents
      }, slotProps == null ? void 0 : slotProps.cell, {
        children: content
      }), column.field);
    }, [apiRef, rowId, disableColumnReorder, rowReordering, sortModel.length, treeDepth, editRowsState, getCellClassName, focusedCell, tabbableCell, CellComponent, rowHeight, slotProps == null ? void 0 : slotProps.cell, rootClasses]);
    const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);
    let minHeight2 = rowHeight;
    if (minHeight2 === "auto" && sizes) {
      let numberOfBaseSizes = 0;
      const maximumSize = Object.entries(sizes).reduce((acc, [key, size]) => {
        const isBaseHeight = /^base[A-Z]/.test(key);
        if (!isBaseHeight) {
          return acc;
        }
        numberOfBaseSizes += 1;
        if (size > acc) {
          return size;
        }
        return acc;
      }, 0);
      if (maximumSize > 0 && numberOfBaseSizes > 1) {
        minHeight2 = maximumSize;
      }
    }
    const style16 = _extends({}, styleProp, {
      maxHeight: rowHeight === "auto" ? "none" : rowHeight,
      minHeight: minHeight2
    });
    if (sizes != null && sizes.spacingTop) {
      const property = rootProps.rowSpacingType === "border" ? "borderTopWidth" : "marginTop";
      style16[property] = sizes.spacingTop;
    }
    if (sizes != null && sizes.spacingBottom) {
      const property = rootProps.rowSpacingType === "border" ? "borderBottomWidth" : "marginBottom";
      let propertyValue = style16[property];
      if (typeof propertyValue !== "number") {
        propertyValue = parseInt(propertyValue || "0", 10);
      }
      propertyValue += sizes.spacingBottom;
      style16[property] = propertyValue;
    }
    const rowClassNames = apiRef.current.unstable_applyPipeProcessors("rowClassName", [], rowId);
    if (typeof rootProps.getRowClassName === "function") {
      var _currentPage$range;
      const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);
      const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {
        isFirstVisible: indexRelativeToCurrentPage === 0,
        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
        indexRelativeToCurrentPage
      });
      rowClassNames.push(rootProps.getRowClassName(rowParams));
    }
    const randomNumber = randomNumberBetween(1e4, 20, 80);
    const rowType = apiRef.current.getRowNode(rowId).type;
    const cells = [];
    for (let i2 = 0; i2 < renderedColumns.length; i2 += 1) {
      const column = renderedColumns[i2];
      const indexRelativeToAllColumns = firstColumnToRender + i2;
      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);
      if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
        if (rowType !== "skeletonRow") {
          const {
            colSpan,
            width: width2
          } = cellColSpanInfo.cellProps;
          const cellProps = {
            width: width2,
            colSpan,
            showRightBorder: rootProps.showCellVerticalBorder,
            indexRelativeToAllColumns
          };
          cells.push(getCell(column, cellProps));
        } else {
          const {
            width: width2
          } = cellColSpanInfo.cellProps;
          const contentWidth = Math.round(randomNumber());
          cells.push(jsx_runtime279.jsx(rootProps.slots.skeletonCell, {
            width: width2,
            contentWidth,
            field: column.field,
            align: column.align
          }, column.field));
        }
      }
    }
    const emptyCellWidth = containerWidth - columnsTotalWidth;
    const eventHandlers = row ? {
      onClick: publishClick,
      onDoubleClick: publish("rowDoubleClick", onDoubleClick),
      onMouseEnter: publish("rowMouseEnter", onMouseEnter),
      onMouseLeave: publish("rowMouseLeave", onMouseLeave)
    } : null;
    return jsx_runtime280.jsxs("div", _extends({
      ref: handleRef,
      "data-id": rowId,
      "data-rowindex": index,
      role: "row",
      className: clsx_m_default(...rowClassNames, classes.root, className3),
      "aria-rowindex": ariaRowIndex,
      "aria-selected": selected,
      style: style16
    }, eventHandlers, other, {
      children: [cells, emptyCellWidth > 0 && jsx_runtime279.jsx(EmptyCell, {
        width: emptyCellWidth
      })]
    }));
  });
  GridRow.propTypes = {
    containerWidth: prop_types189.default.number,
    firstColumnToRender: prop_types189.default.number,
    focusedCell: prop_types189.default.string,
    index: prop_types189.default.number,
    isLastVisible: prop_types189.default.bool,
    lastColumnToRender: prop_types189.default.number,
    onClick: prop_types189.default.func,
    onDoubleClick: prop_types189.default.func,
    onMouseEnter: prop_types189.default.func,
    onMouseLeave: prop_types189.default.func,
    position: prop_types189.default.oneOf(["center", "left", "right"]),
    renderedColumns: prop_types189.default.arrayOf(prop_types189.default.object),
    row: prop_types189.default.object,
    rowHeight: prop_types189.default.oneOfType([prop_types189.default.oneOf(["auto"]), prop_types189.default.number]),
    rowId: prop_types189.default.oneOfType([prop_types189.default.number, prop_types189.default.string]),
    selected: prop_types189.default.bool,
    tabbableCell: prop_types189.default.string,
    visibleColumns: prop_types189.default.arrayOf(prop_types189.default.object)
  };

  // node_modules/@mui/x-data-grid/components/GridScrollArea.js
  const React279 = __toModule(require_react());
  const prop_types191 = __toModule(require_prop_types7());
  const jsx_runtime282 = __toModule(require_jsx_runtime());
  const CLIFF = 1;
  const SLOP = 1.5;
  const useUtilityClasses136 = (ownerState) => {
    const {
      scrollDirection,
      classes
    } = ownerState;
    const slots = {
      root: ["scrollArea", `scrollArea--${scrollDirection}`]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridScrollAreaRawRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ScrollArea",
    overridesResolver: (props, styles30) => [{
      [`&.${gridClasses7["scrollArea--left"]}`]: styles30["scrollArea--left"]
    }, {
      [`&.${gridClasses7["scrollArea--right"]}`]: styles30["scrollArea--right"]
    }, styles30.scrollArea]
  })(() => ({
    position: "absolute",
    top: 0,
    zIndex: 101,
    width: 20,
    bottom: 0,
    [`&.${gridClasses7["scrollArea--left"]}`]: {
      left: 0
    },
    [`&.${gridClasses7["scrollArea--right"]}`]: {
      right: 0
    }
  }));
  function GridScrollAreaRaw(props) {
    const {
      scrollDirection
    } = props;
    const rootRef = React279.useRef(null);
    const apiRef = useGridApiContext2();
    const timeout = React279.useRef();
    const [dragging, setDragging] = React279.useState(false);
    const densityFactor = useGridSelector2(apiRef, gridDensityFactorSelector);
    const scrollPosition = React279.useRef({
      left: 0,
      top: 0
    });
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, rootProps, {
      scrollDirection
    });
    const classes = useUtilityClasses136(ownerState);
    const headerHeight = Math.floor(rootProps.columnHeaderHeight * densityFactor);
    const handleScrolling = React279.useCallback((newScrollPosition) => {
      scrollPosition.current = newScrollPosition;
    }, []);
    const handleDragOver = React279.useCallback((event) => {
      let offset4;
      if (scrollDirection === "left") {
        offset4 = event.clientX - rootRef.current.getBoundingClientRect().right;
      } else if (scrollDirection === "right") {
        offset4 = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);
      } else {
        throw new Error("MUI: Wrong drag direction");
      }
      offset4 = (offset4 - CLIFF) * SLOP + CLIFF;
      clearTimeout(timeout.current);
      timeout.current = setTimeout(() => {
        apiRef.current.scroll({
          left: scrollPosition.current.left + offset4,
          top: scrollPosition.current.top
        });
      });
    }, [scrollDirection, apiRef]);
    React279.useEffect(() => {
      return () => {
        clearTimeout(timeout.current);
      };
    }, []);
    const toggleDragging = React279.useCallback(() => {
      setDragging((prevDragging) => !prevDragging);
    }, []);
    useGridApiEventHandler2(apiRef, "scrollPositionChange", handleScrolling);
    useGridApiEventHandler2(apiRef, "columnHeaderDragStart", toggleDragging);
    useGridApiEventHandler2(apiRef, "columnHeaderDragEnd", toggleDragging);
    return dragging ? jsx_runtime282.jsx(GridScrollAreaRawRoot, {
      ref: rootRef,
      className: clsx_m_default(classes.root),
      ownerState,
      onDragOver: handleDragOver,
      style: {
        height: headerHeight
      }
    }) : null;
  }
  GridScrollAreaRaw.propTypes = {
    scrollDirection: prop_types191.default.oneOf(["left", "right"]).isRequired
  };
  const GridScrollArea2 = React279.memo(GridScrollAreaRaw);

  // node_modules/@mui/x-data-grid/context/GridContextProvider.js
  const React345 = __toModule(require_react());
  const jsx_runtime369 = __toModule(require_jsx_runtime());
  function GridContextProvider2({
    privateApiRef,
    props,
    children
  }) {
    const apiRef = React345.useRef(privateApiRef.current.getPublicApi());
    return jsx_runtime369.jsx(GridRootPropsContext2.Provider, {
      value: props,
      children: jsx_runtime369.jsx(GridPrivateApiContext.Provider, {
        value: privateApiRef,
        children: jsx_runtime369.jsx(GridApiContext.Provider, {
          value: apiRef,
          children
        })
      })
    });
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js
  const React354 = __toModule(require_react());
  const forceDebug = localStorageAvailable() && window.localStorage.getItem("DEBUG") != null;
  const noop = () => {
  };
  const noopLogger = {
    debug: noop,
    info: noop,
    warn: noop,
    error: noop
  };
  const LOG_LEVELS = ["debug", "info", "warn", "error"];
  function getAppender(name, logLevel, appender = console) {
    const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);
    if (minLogLevelIdx === -1) {
      throw new Error(`MUI: Log level ${logLevel} not recognized.`);
    }
    const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {
      if (idx >= minLogLevelIdx) {
        loggerObj[method] = (...args) => {
          const [message, ...other] = args;
          appender[method](`MUI: ${name} - ${message}`, ...other);
        };
      } else {
        loggerObj[method] = noop;
      }
      return loggerObj;
    }, {});
    return logger;
  }
  const useGridLoggerFactory2 = (apiRef, props) => {
    const getLogger = React354.useCallback((name) => {
      if (forceDebug) {
        return getAppender(name, "debug", props.logger);
      }
      if (!props.logLevel) {
        return noopLogger;
      }
      return getAppender(name, props.logLevel.toString(), props.logger);
    }, [props.logLevel, props.logger]);
    useGridApiMethod2(apiRef, {
      getLogger
    }, "private");
  };

  // node_modules/@mui/x-data-grid/utils/EventManager.js
  class EventManager2 {
    constructor() {
      this.maxListeners = 10;
      this.warnOnce = false;
      this.events = {};
    }
    on(eventName, listener, options = {}) {
      let collection = this.events[eventName];
      if (!collection) {
        collection = {
          highPriority: new Map(),
          regular: new Map()
        };
        this.events[eventName] = collection;
      }
      if (options.isFirst) {
        collection.highPriority.set(listener, true);
      } else {
        collection.regular.set(listener, true);
      }
      if (true) {
        const collectionSize = collection.highPriority.size + collection.regular.size;
        if (collectionSize > this.maxListeners && !this.warnOnce) {
          this.warnOnce = true;
          console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`, `Use emitter.setMaxListeners() to increase limit.`].join("\n"));
        }
      }
    }
    removeListener(eventName, listener) {
      if (this.events[eventName]) {
        this.events[eventName].regular.delete(listener);
        this.events[eventName].highPriority.delete(listener);
      }
    }
    removeAllListeners() {
      this.events = {};
    }
    emit(eventName, ...args) {
      const collection = this.events[eventName];
      if (!collection) {
        return;
      }
      const highPriorityListeners = Array.from(collection.highPriority.keys());
      const regularListeners = Array.from(collection.regular.keys());
      for (let i2 = highPriorityListeners.length - 1; i2 >= 0; i2 -= 1) {
        const listener = highPriorityListeners[i2];
        if (collection.highPriority.has(listener)) {
          listener.apply(this, args);
        }
      }
      for (let i2 = 0; i2 < regularListeners.length; i2 += 1) {
        const listener = regularListeners[i2];
        if (collection.regular.has(listener)) {
          listener.apply(this, args);
        }
      }
    }
    once(eventName, listener) {
      const that = this;
      this.on(eventName, function oneTimeListener(...args) {
        that.removeListener(eventName, oneTimeListener);
        listener.apply(that, args);
      });
    }
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
  const React352 = __toModule(require_react());
  const isSyntheticEvent = (event) => {
    return event.isPropagationStopped !== void 0;
  };
  let globalId2 = 0;
  const wrapPublicApi = (publicApi) => {
    const privateOnlyApi = {};
    privateOnlyApi.getPublicApi = () => publicApi;
    privateOnlyApi.register = (visibility2, methods) => {
      Object.keys(methods).forEach((methodName) => {
        if (visibility2 === "public") {
          publicApi[methodName] = methods[methodName];
        } else {
          privateOnlyApi[methodName] = methods[methodName];
        }
      });
    };
    const handler = {
      get: (obj, prop) => {
        if (prop in obj) {
          return obj[prop];
        }
        return privateOnlyApi[prop];
      },
      set: (obj, prop, value) => {
        obj[prop] = value;
        return true;
      }
    };
    return new Proxy(publicApi, handler);
  };
  function useGridApiInitialization(inputApiRef, props) {
    const publicApiRef = React352.useRef();
    if (!publicApiRef.current) {
      publicApiRef.current = {
        state: {},
        instanceId: {
          id: globalId2
        }
      };
      globalId2 += 1;
    }
    const privateApiRef = React352.useRef();
    if (!privateApiRef.current) {
      privateApiRef.current = wrapPublicApi(publicApiRef.current);
      privateApiRef.current.register("private", {
        caches: {},
        eventManager: new EventManager2()
      });
    }
    React352.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);
    const publishEvent = React352.useCallback((...args) => {
      const [name, params, event = {}] = args;
      event.defaultMuiPrevented = false;
      if (isSyntheticEvent(event) && event.isPropagationStopped()) {
        return;
      }
      const details = props.signature === GridSignature.DataGridPro ? {
        api: privateApiRef.current.getPublicApi()
      } : {};
      privateApiRef.current.eventManager.emit(name, params, event, details);
    }, [privateApiRef, props.signature]);
    const subscribeEvent = React352.useCallback((event, handler, options) => {
      privateApiRef.current.eventManager.on(event, handler, options);
      const api = privateApiRef.current;
      return () => {
        api.eventManager.removeListener(event, handler);
      };
    }, [privateApiRef]);
    useGridApiMethod2(privateApiRef, {
      subscribeEvent,
      publishEvent
    }, "public");
    React352.useEffect(() => {
      const api = privateApiRef.current;
      return () => {
        api.publishEvent("unmount");
      };
    }, [privateApiRef]);
    return privateApiRef;
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.js
  const React353 = __toModule(require_react());
  const useGridLocaleText2 = (apiRef, props) => {
    const getLocaleText = React353.useCallback((key) => {
      if (props.localeText[key] == null) {
        throw new Error(`Missing translation for key ${key}.`);
      }
      return props.localeText[key];
    }, [props.localeText]);
    apiRef.current.register("public", {
      getLocaleText
    });
  };

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js
  const React347 = __toModule(require_react());
  const useGridPipeProcessing = (apiRef) => {
    const processorsCache = React347.useRef({});
    const runAppliers = React347.useCallback((groupCache) => {
      if (!groupCache) {
        return;
      }
      Object.values(groupCache.appliers).forEach((callback) => {
        callback();
      });
    }, []);
    const registerPipeProcessor = React347.useCallback((group, id, processor) => {
      if (!processorsCache.current[group]) {
        processorsCache.current[group] = {
          processors: new Map(),
          appliers: {}
        };
      }
      const groupCache = processorsCache.current[group];
      const oldProcessor = groupCache.processors.get(id);
      if (oldProcessor !== processor) {
        groupCache.processors.set(id, processor);
        runAppliers(groupCache);
      }
      return () => {
        processorsCache.current[group].processors.set(id, null);
      };
    }, [runAppliers]);
    const registerPipeApplier = React347.useCallback((group, id, applier) => {
      if (!processorsCache.current[group]) {
        processorsCache.current[group] = {
          processors: new Map(),
          appliers: {}
        };
      }
      processorsCache.current[group].appliers[id] = applier;
      return () => {
        const _appliers = processorsCache.current[group].appliers, otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));
        processorsCache.current[group].appliers = otherAppliers;
      };
    }, []);
    const requestPipeProcessorsApplication = React347.useCallback((group) => {
      const groupCache = processorsCache.current[group];
      runAppliers(groupCache);
    }, [runAppliers]);
    const applyPipeProcessors = React347.useCallback((...args) => {
      const [group, value, context] = args;
      if (!processorsCache.current[group]) {
        return value;
      }
      const preProcessors = Array.from(processorsCache.current[group].processors.values());
      return preProcessors.reduce((acc, preProcessor) => {
        if (!preProcessor) {
          return acc;
        }
        return preProcessor(acc, context);
      }, value);
    }, []);
    const preProcessingPrivateApi = {
      registerPipeProcessor,
      registerPipeApplier,
      requestPipeProcessorsApplication
    };
    const preProcessingPublicApi = {
      unstable_applyPipeProcessors: applyPipeProcessors
    };
    useGridApiMethod2(apiRef, preProcessingPrivateApi, "private");
    useGridApiMethod2(apiRef, preProcessingPublicApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js
  const React349 = __toModule(require_react());
  const useGridRegisterPipeProcessor = (apiRef, group, callback) => {
    const cleanup = React349.useRef();
    const id = React349.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = React349.useCallback(() => {
      cleanup.current = apiRef.current.registerPipeProcessor(group, id.current, callback);
    }, [apiRef, callback, group]);
    useFirstRender2(() => {
      registerPreProcessor();
    });
    const isFirstRender = React349.useRef(true);
    React349.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
      return () => {
        if (cleanup.current) {
          cleanup.current();
          cleanup.current = null;
        }
      };
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js
  const React348 = __toModule(require_react());
  const useGridRegisterPipeApplier = (apiRef, group, callback) => {
    const cleanup = React348.useRef();
    const id = React348.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = React348.useCallback(() => {
      cleanup.current = apiRef.current.registerPipeApplier(group, id.current, callback);
    }, [apiRef, callback, group]);
    useFirstRender2(() => {
      registerPreProcessor();
    });
    const isFirstRender = React348.useRef(true);
    React348.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
      return () => {
        if (cleanup.current) {
          cleanup.current();
          cleanup.current = null;
        }
      };
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js
  const React350 = __toModule(require_react());
  const useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {
    const registerPreProcessor = React350.useCallback(() => {
      apiRef.current.registerStrategyProcessor(strategyName, group, processor);
    }, [apiRef, processor, group, strategyName]);
    useFirstRender2(() => {
      registerPreProcessor();
    });
    const isFirstRender = React350.useRef(true);
    React350.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js
  const React351 = __toModule(require_react());
  const GRID_DEFAULT_STRATEGY = "none";
  const GRID_STRATEGIES_PROCESSORS = {
    rowTreeCreation: "rowTree",
    filtering: "rowTree",
    sorting: "rowTree"
  };
  const useGridStrategyProcessing = (apiRef) => {
    const availableStrategies = React351.useRef(new Map());
    const strategiesCache = React351.useRef({});
    const registerStrategyProcessor = React351.useCallback((strategyName, processorName, processor) => {
      const cleanup = () => {
        const _ref = strategiesCache.current[processorName], otherProcessors = _objectWithoutPropertiesLoose(_ref, [strategyName].map(_toPropertyKey));
        strategiesCache.current[processorName] = otherProcessors;
      };
      if (!strategiesCache.current[processorName]) {
        strategiesCache.current[processorName] = {};
      }
      const groupPreProcessors = strategiesCache.current[processorName];
      const previousProcessor = groupPreProcessors[strategyName];
      groupPreProcessors[strategyName] = processor;
      if (!previousProcessor || previousProcessor === processor) {
        return cleanup;
      }
      if (strategyName === apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
        apiRef.current.publishEvent("activeStrategyProcessorChange", processorName);
      }
      return cleanup;
    }, [apiRef]);
    const applyStrategyProcessor = React351.useCallback((processorName, params) => {
      const activeStrategy = apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);
      if (activeStrategy == null) {
        throw new Error("Can't apply a strategy processor before defining an active strategy");
      }
      const groupCache = strategiesCache.current[processorName];
      if (!groupCache || !groupCache[activeStrategy]) {
        throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
      }
      const processor = groupCache[activeStrategy];
      return processor(params);
    }, [apiRef]);
    const getActiveStrategy = React351.useCallback((strategyGroup) => {
      var _availableStrategyEnt;
      const strategyEntries = Array.from(availableStrategies.current.entries());
      const availableStrategyEntry = strategyEntries.find(([, strategy]) => {
        if (strategy.group !== strategyGroup) {
          return false;
        }
        return strategy.isAvailable();
      });
      return (_availableStrategyEnt = availableStrategyEntry == null ? void 0 : availableStrategyEntry[0]) != null ? _availableStrategyEnt : GRID_DEFAULT_STRATEGY;
    }, []);
    const setStrategyAvailability = React351.useCallback((strategyGroup, strategyName, isAvailable) => {
      availableStrategies.current.set(strategyName, {
        group: strategyGroup,
        isAvailable
      });
      apiRef.current.publishEvent("strategyAvailabilityChange");
    }, [apiRef]);
    const strategyProcessingApi = {
      registerStrategyProcessor,
      applyStrategyProcessor,
      getActiveStrategy,
      setStrategyAvailability
    };
    useGridApiMethod2(apiRef, strategyProcessingApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js
  const React355 = __toModule(require_react());
  const _excluded245 = ["stateId"];
  const useGridStateInitialization2 = (apiRef, props) => {
    const controlStateMapRef = React355.useRef({});
    const [, rawForceUpdate] = React355.useState();
    const registerControlState = React355.useCallback((controlStateItem) => {
      const {
        stateId
      } = controlStateItem, others = _objectWithoutPropertiesLoose(controlStateItem, _excluded245);
      controlStateMapRef.current[stateId] = _extends({}, others, {
        stateId
      });
    }, []);
    const setState = React355.useCallback((state, reason) => {
      let newState;
      if (isFunction(state)) {
        newState = state(apiRef.current.state);
      } else {
        newState = state;
      }
      if (apiRef.current.state === newState) {
        return false;
      }
      let ignoreSetState = false;
      const updatedControlStateIds = [];
      Object.keys(controlStateMapRef.current).forEach((stateId) => {
        const controlState = controlStateMapRef.current[stateId];
        const oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);
        const newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);
        if (newSubState === oldSubState) {
          return;
        }
        updatedControlStateIds.push({
          stateId: controlState.stateId,
          hasPropChanged: newSubState !== controlState.propModel
        });
        if (controlState.propModel !== void 0 && newSubState !== controlState.propModel) {
          ignoreSetState = true;
        }
      });
      if (updatedControlStateIds.length > 1) {
        throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el) => el.stateId).join(", ")} in the same transaction.`);
      }
      if (!ignoreSetState) {
        apiRef.current.state = newState;
        if (apiRef.current.publishEvent) {
          apiRef.current.publishEvent("stateChange", newState);
        }
      }
      if (updatedControlStateIds.length === 1) {
        const {
          stateId,
          hasPropChanged
        } = updatedControlStateIds[0];
        const controlState = controlStateMapRef.current[stateId];
        const model = controlState.stateSelector(newState, apiRef.current.instanceId);
        if (controlState.propOnChange && hasPropChanged) {
          const details = props.signature === GridSignature.DataGridPro ? {
            api: apiRef.current,
            reason
          } : {
            reason
          };
          controlState.propOnChange(model, details);
        }
        if (!ignoreSetState) {
          apiRef.current.publishEvent(controlState.changeEvent, model, {
            reason
          });
        }
      }
      return !ignoreSetState;
    }, [apiRef, props.signature]);
    const updateControlState = React355.useCallback((key, state, reason) => {
      return apiRef.current.setState((previousState) => {
        return _extends({}, previousState, {
          [key]: state(previousState[key])
        });
      }, reason);
    }, [apiRef]);
    const forceUpdate = React355.useCallback(() => rawForceUpdate(() => apiRef.current.state), [apiRef]);
    const publicStateApi = {
      setState,
      forceUpdate
    };
    const privateStateApi = {
      updateControlState,
      registerControlState
    };
    useGridApiMethod2(apiRef, publicStateApi, "public");
    useGridApiMethod2(apiRef, privateStateApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.js
  const useGridInitialization2 = (inputApiRef, props) => {
    const privateApiRef = useGridApiInitialization(inputApiRef, props);
    useGridLoggerFactory2(privateApiRef, props);
    useGridStateInitialization2(privateApiRef, props);
    useGridPipeProcessing(privateApiRef);
    useGridStrategyProcessing(privateApiRef);
    useGridLocaleText2(privateApiRef, props);
    return privateApiRef;
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridInitializeState.js
  const React389 = __toModule(require_react());
  const useGridInitializeState2 = (initializer, privateApiRef, props) => {
    const isInitialized = React389.useRef(false);
    if (!isInitialized.current) {
      privateApiRef.current.state = initializer(privateApiRef.current.state, props, privateApiRef);
      isInitialized.current = true;
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js
  const React356 = __toModule(require_react());
  function writeToClipboardPolyfill(data) {
    const span = document.createElement("span");
    span.style.whiteSpace = "pre";
    span.style.userSelect = "all";
    span.style.opacity = "0px";
    span.textContent = data;
    document.body.appendChild(span);
    const range = document.createRange();
    range.selectNode(span);
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
    try {
      document.execCommand("copy");
    } finally {
      document.body.removeChild(span);
    }
  }
  function hasNativeSelection(element) {
    var _window$getSelection;
    if ((_window$getSelection = window.getSelection()) != null && _window$getSelection.toString()) {
      return true;
    }
    if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {
      return true;
    }
    return false;
  }
  const useGridClipboard2 = (apiRef) => {
    const copySelectedRowsToClipboard = React356.useCallback(() => {
      if (apiRef.current.getSelectedRows().size === 0) {
        return;
      }
      const data = apiRef.current.getDataAsCsv({
        includeHeaders: false,
        delimiter: "	"
      });
      if (navigator.clipboard) {
        navigator.clipboard.writeText(data).catch(() => {
          writeToClipboardPolyfill(data);
        });
      } else {
        writeToClipboardPolyfill(data);
      }
    }, [apiRef]);
    const handleKeydown = React356.useCallback((event) => {
      const isModifierKeyPressed = event.ctrlKey || event.metaKey;
      if (String.fromCharCode(event.keyCode) !== "C" || !isModifierKeyPressed) {
        return;
      }
      if (hasNativeSelection(event.target)) {
        return;
      }
      apiRef.current.unstable_copySelectedRowsToClipboard();
    }, [apiRef]);
    useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, "keydown", handleKeydown);
    const clipboardApi = {
      unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard
    };
    useGridApiMethod2(apiRef, clipboardApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js
  const React359 = __toModule(require_react());
  const columnMenuStateInitializer = (state) => _extends({}, state, {
    columnMenu: {
      open: false
    }
  });
  const useGridColumnMenu2 = (apiRef) => {
    const logger = useGridLogger(apiRef, "useGridColumnMenu");
    const showColumnMenu = React359.useCallback((field) => {
      const shouldUpdate = apiRef.current.setState((state) => {
        if (state.columnMenu.open && state.columnMenu.field === field) {
          return state;
        }
        logger.debug("Opening Column Menu");
        return _extends({}, state, {
          columnMenu: {
            open: true,
            field
          }
        });
      });
      if (shouldUpdate) {
        apiRef.current.hidePreferences();
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const hideColumnMenu = React359.useCallback(() => {
      const columnMenuState = gridColumnMenuSelector(apiRef.current.state);
      if (columnMenuState.field) {
        const columnLookup = gridColumnLookupSelector(apiRef);
        const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
        const orderedFields = gridColumnFieldsSelector(apiRef);
        let fieldToFocus = columnMenuState.field;
        if (!columnLookup[fieldToFocus]) {
          fieldToFocus = orderedFields[0];
        }
        if (columnVisibilityModel[fieldToFocus] === false) {
          const visibleOrderedFields = orderedFields.filter((field) => {
            if (field === fieldToFocus) {
              return true;
            }
            return columnVisibilityModel[field] !== false;
          });
          const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
          fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
        }
        apiRef.current.setColumnHeaderFocus(fieldToFocus);
      }
      const shouldUpdate = apiRef.current.setState((state) => {
        if (!state.columnMenu.open && state.columnMenu.field === void 0) {
          return state;
        }
        logger.debug("Hiding Column Menu");
        return _extends({}, state, {
          columnMenu: _extends({}, state.columnMenu, {
            open: false,
            field: void 0
          })
        });
      });
      if (shouldUpdate) {
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const toggleColumnMenu = React359.useCallback((field) => {
      logger.debug("Toggle Column Menu");
      const columnMenu = gridColumnMenuSelector(apiRef.current.state);
      if (!columnMenu.open || columnMenu.field !== field) {
        showColumnMenu(field);
      } else {
        hideColumnMenu();
      }
    }, [apiRef, logger, showColumnMenu, hideColumnMenu]);
    const columnMenuApi = {
      showColumnMenu,
      hideColumnMenu,
      toggleColumnMenu
    };
    useGridApiMethod2(apiRef, columnMenuApi, "public");
    useGridApiEventHandler2(apiRef, "columnResizeStart", hideColumnMenu);
    useGridApiEventHandler2(apiRef, "virtualScrollerWheel", apiRef.current.hideColumnMenu);
    useGridApiEventHandler2(apiRef, "virtualScrollerTouchMove", apiRef.current.hideColumnMenu);
  };

  // node_modules/@mui/x-data-grid/colDef/gridDateOperators.js
  const dateRegex = /(\d+)-(\d+)-(\d+)/;
  const dateTimeRegex = /(\d+)-(\d+)-(\d+)T(\d+):(\d+)/;
  function buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {
    if (!filterItem.value) {
      return null;
    }
    const [year, month, day, hour, minute] = filterItem.value.match(showTime ? dateTimeRegex : dateRegex).slice(1).map(Number);
    const time = new Date(year, month - 1, day, hour || 0, minute || 0).getTime();
    return ({
      value
    }) => {
      if (!value) {
        return false;
      }
      if (keepHours) {
        return compareFn(value.getTime(), time);
      }
      const dateCopy = new Date(value);
      const timeToCompare = dateCopy.setHours(showTime ? value.getHours() : 0, showTime ? value.getMinutes() : 0, 0, 0);
      return compareFn(timeToCompare, time);
    };
  }
  const getGridDateOperators = (showTime) => [{
    value: "is",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);
    },
    InputComponent: GridFilterInputDate2,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "not",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);
    },
    InputComponent: GridFilterInputDate2,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "after",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);
    },
    InputComponent: GridFilterInputDate2,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "onOrAfter",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);
    },
    InputComponent: GridFilterInputDate2,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "before",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);
    },
    InputComponent: GridFilterInputDate2,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "onOrBefore",
    getApplyFilterFn: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);
    },
    InputComponent: GridFilterInputDate2,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "isEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value == null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isNotEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value != null;
      };
    },
    requiresFilterValue: false
  }];

  // node_modules/@mui/x-data-grid/colDef/gridDateColDef.js
  function throwIfNotDateObject({
    value,
    columnType,
    rowId,
    field
  }) {
    if (!(value instanceof Date)) {
      throw new Error([`MUI: \`${columnType}\` column type only accepts \`Date\` objects as values.`, "Use `valueGetter` to transform the value into a `Date` object.", `Row ID: ${rowId}, field: "${field}".`].join("\n"));
    }
  }
  function gridDateFormatter({
    value,
    field,
    id
  }) {
    if (!value) {
      return "";
    }
    throwIfNotDateObject({
      value,
      columnType: "date",
      rowId: id,
      field
    });
    return value.toLocaleDateString();
  }
  function gridDateTimeFormatter({
    value,
    field,
    id
  }) {
    if (!value) {
      return "";
    }
    throwIfNotDateObject({
      value,
      columnType: "dateTime",
      rowId: id,
      field
    });
    return value.toLocaleString();
  }
  const GRID_DATE_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "date",
    sortComparator: gridDateComparator,
    valueFormatter: gridDateFormatter,
    filterOperators: getGridDateOperators(),
    renderEditCell: renderEditDateCell,
    getApplyQuickFilterFn: void 0
  });
  const GRID_DATETIME_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "dateTime",
    sortComparator: gridDateComparator,
    valueFormatter: gridDateTimeFormatter,
    filterOperators: getGridDateOperators(true),
    renderEditCell: renderEditDateCell,
    getApplyQuickFilterFn: void 0
  });

  // node_modules/@mui/x-data-grid/colDef/gridNumericOperators.js
  const parseNumericValue = (value) => {
    if (value == null) {
      return null;
    }
    return Number(value);
  };
  const getGridNumericQuickFilterFn = (value) => {
    if (value == null || Number.isNaN(value) || value === "") {
      return null;
    }
    return ({
      value: columnValue
    }) => {
      return parseNumericValue(columnValue) === parseNumericValue(value);
    };
  };
  const getGridNumericOperators = () => [{
    label: "=",
    value: "=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        return parseNumericValue(value) === filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue2,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: "!=",
    value: "!=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        return parseNumericValue(value) !== filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue2,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: ">",
    value: ">",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) > filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue2,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: ">=",
    value: ">=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) >= filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue2,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: "<",
    value: "<",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) < filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue2,
    InputComponentProps: {
      type: "number"
    }
  }, {
    label: "<=",
    value: "<=",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return ({
        value
      }) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) <= filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue2,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: "isEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value == null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isNotEmpty",
    getApplyFilterFn: () => {
      return ({
        value
      }) => {
        return value != null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isAnyOf",
    getApplyFilterFn: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      return ({
        value
      }) => {
        return value != null && filterItem.value.includes(Number(value));
      };
    },
    InputComponent: GridFilterInputMultipleValue2,
    InputComponentProps: {
      type: "number"
    }
  }];

  // node_modules/@mui/x-data-grid/colDef/gridNumericColDef.js
  const GRID_NUMERIC_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "number",
    align: "right",
    headerAlign: "right",
    sortComparator: gridNumberComparator,
    valueParser: (value) => value === "" ? null : Number(value),
    valueFormatter: ({
      value
    }) => isNumber(value) ? value.toLocaleString() : value || "",
    filterOperators: getGridNumericOperators(),
    getApplyQuickFilterFn: getGridNumericQuickFilterFn
  });

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.js
  const parseObjectValue = (value) => {
    if (value == null || !isObject(value)) {
      return value;
    }
    return value.value;
  };
  const getGridSingleSelectOperators = () => [{
    value: "is",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || filterItem.value === "") {
        return null;
      }
      return ({
        value
      }) => parseObjectValue(value) === parseObjectValue(filterItem.value);
    },
    InputComponent: GridFilterInputSingleSelect2
  }, {
    value: "not",
    getApplyFilterFn: (filterItem) => {
      if (filterItem.value == null || filterItem.value === "") {
        return null;
      }
      return ({
        value
      }) => parseObjectValue(value) !== parseObjectValue(filterItem.value);
    },
    InputComponent: GridFilterInputSingleSelect2
  }, {
    value: "isAnyOf",
    getApplyFilterFn: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      const filterItemValues = filterItem.value.map(parseObjectValue);
      return ({
        value
      }) => filterItemValues.includes(parseObjectValue(value));
    },
    InputComponent: GridFilterInputMultipleSingleSelect2
  }];

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js
  const isArrayOfObjects = (options) => {
    return typeof options[0] === "object";
  };
  const defaultGetOptionValue = (value) => {
    return isObject(value) ? value.value : value;
  };
  const defaultGetOptionLabel = (value) => {
    return isObject(value) ? value.label : String(value);
  };
  const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "singleSelect",
    getOptionLabel: defaultGetOptionLabel,
    getOptionValue: defaultGetOptionValue,
    valueFormatter(params) {
      const {
        id,
        field,
        value,
        api
      } = params;
      const colDef6 = params.api.getColumn(field);
      if (!isSingleSelectColDef(colDef6)) {
        return "";
      }
      let valueOptions;
      if (typeof colDef6.valueOptions === "function") {
        valueOptions = colDef6.valueOptions({
          id,
          row: id ? api.getRow(id) : null,
          field
        });
      } else {
        valueOptions = colDef6.valueOptions;
      }
      if (value == null) {
        return "";
      }
      if (!valueOptions) {
        return value;
      }
      if (!isArrayOfObjects(valueOptions)) {
        return colDef6.getOptionLabel(value);
      }
      const valueOption = valueOptions.find((option) => colDef6.getOptionValue(option) === value);
      return valueOption ? colDef6.getOptionLabel(valueOption) : "";
    },
    renderEditCell: renderEditSingleSelectCell,
    filterOperators: getGridSingleSelectOperators()
  });

  // node_modules/@mui/x-data-grid/colDef/gridDefaultColumnTypes.js
  const DEFAULT_GRID_COL_TYPE_KEY = "__default__";
  const getGridDefaultColumnTypes = () => {
    const nativeColumnTypes = {
      string: GRID_STRING_COL_DEF,
      number: GRID_NUMERIC_COL_DEF,
      date: GRID_DATE_COL_DEF,
      dateTime: GRID_DATETIME_COL_DEF,
      boolean: GRID_BOOLEAN_COL_DEF,
      singleSelect: GRID_SINGLE_SELECT_COL_DEF,
      [GRID_ACTIONS_COLUMN_TYPE]: GRID_ACTIONS_COL_DEF,
      [DEFAULT_GRID_COL_TYPE_KEY]: GRID_STRING_COL_DEF
    };
    return nativeColumnTypes;
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js
  const COLUMNS_DIMENSION_PROPERTIES = ["maxWidth", "minWidth", "width", "flex"];
  function computeFlexColumnsWidth({
    initialFreeSpace,
    totalFlexUnits,
    flexColumns
  }) {
    const flexColumnsLookup = {
      all: {},
      frozenFields: [],
      freeze: (field) => {
        const value = flexColumnsLookup.all[field];
        if (value && value.frozen !== true) {
          flexColumnsLookup.all[field].frozen = true;
          flexColumnsLookup.frozenFields.push(field);
        }
      }
    };
    function loopOverFlexItems() {
      if (flexColumnsLookup.frozenFields.length === flexColumns.length) {
        return;
      }
      const violationsLookup = {
        min: {},
        max: {}
      };
      let remainingFreeSpace = initialFreeSpace;
      let flexUnits = totalFlexUnits;
      let totalViolation = 0;
      flexColumnsLookup.frozenFields.forEach((field) => {
        remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
        flexUnits -= flexColumnsLookup.all[field].flex;
      });
      for (let i2 = 0; i2 < flexColumns.length; i2 += 1) {
        const column = flexColumns[i2];
        if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {
          continue;
        }
        const widthPerFlexUnit = remainingFreeSpace / flexUnits;
        let computedWidth = widthPerFlexUnit * column.flex;
        if (computedWidth < column.minWidth) {
          totalViolation += column.minWidth - computedWidth;
          computedWidth = column.minWidth;
          violationsLookup.min[column.field] = true;
        } else if (computedWidth > column.maxWidth) {
          totalViolation += column.maxWidth - computedWidth;
          computedWidth = column.maxWidth;
          violationsLookup.max[column.field] = true;
        }
        flexColumnsLookup.all[column.field] = {
          frozen: false,
          computedWidth,
          flex: column.flex
        };
      }
      if (totalViolation < 0) {
        Object.keys(violationsLookup.max).forEach((field) => {
          flexColumnsLookup.freeze(field);
        });
      } else if (totalViolation > 0) {
        Object.keys(violationsLookup.min).forEach((field) => {
          flexColumnsLookup.freeze(field);
        });
      } else {
        flexColumns.forEach(({
          field
        }) => {
          flexColumnsLookup.freeze(field);
        });
      }
      loopOverFlexItems();
    }
    loopOverFlexItems();
    return flexColumnsLookup.all;
  }
  const hydrateColumnsWidth = (rawState, viewportInnerWidth) => {
    const columnsLookup = {};
    let totalFlexUnits = 0;
    let widthAllocatedBeforeFlex = 0;
    const flexColumns = [];
    rawState.orderedFields.forEach((columnField) => {
      const newColumn = _extends({}, rawState.lookup[columnField]);
      if (rawState.columnVisibilityModel[columnField] === false) {
        newColumn.computedWidth = 0;
      } else {
        let computedWidth;
        if (newColumn.flex && newColumn.flex > 0) {
          totalFlexUnits += newColumn.flex;
          computedWidth = 0;
          flexColumns.push(newColumn);
        } else {
          computedWidth = clamp5(newColumn.width, newColumn.minWidth, newColumn.maxWidth);
        }
        widthAllocatedBeforeFlex += computedWidth;
        newColumn.computedWidth = computedWidth;
      }
      columnsLookup[columnField] = newColumn;
    });
    const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0);
    if (totalFlexUnits > 0 && viewportInnerWidth > 0) {
      const computedColumnWidths = computeFlexColumnsWidth({
        initialFreeSpace,
        totalFlexUnits,
        flexColumns
      });
      Object.keys(computedColumnWidths).forEach((field) => {
        columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;
      });
    }
    return _extends({}, rawState, {
      lookup: columnsLookup
    });
  };
  const applyInitialState = (columnsState, initialState) => {
    if (!initialState) {
      return columnsState;
    }
    const {
      orderedFields = [],
      dimensions = {}
    } = initialState;
    const columnsWithUpdatedDimensions = Object.keys(dimensions);
    if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
      return columnsState;
    }
    const orderedFieldsLookup = {};
    const cleanOrderedFields = [];
    for (let i2 = 0; i2 < orderedFields.length; i2 += 1) {
      const field = orderedFields[i2];
      if (columnsState.lookup[field]) {
        orderedFieldsLookup[field] = true;
        cleanOrderedFields.push(field);
      }
    }
    const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [...cleanOrderedFields, ...columnsState.orderedFields.filter((field) => !orderedFieldsLookup[field])];
    const newColumnLookup = _extends({}, columnsState.lookup);
    for (let i2 = 0; i2 < columnsWithUpdatedDimensions.length; i2 += 1) {
      const field = columnsWithUpdatedDimensions[i2];
      const newColDef = _extends({}, newColumnLookup[field], {
        hasBeenResized: true
      });
      Object.entries(dimensions[field]).forEach(([key, value]) => {
        newColDef[key] = value === -1 ? Infinity : value;
      });
      newColumnLookup[field] = newColDef;
    }
    const newColumnsState = _extends({}, columnsState, {
      orderedFields: newOrderedFields,
      lookup: newColumnLookup
    });
    return newColumnsState;
  };
  const createColumnsState = ({
    apiRef,
    columnsToUpsert,
    initialState,
    columnTypes,
    columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),
    keepOnlyColumnsToUpsert = false
  }) => {
    var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current, _apiRef$current$getRo3;
    const isInsideStateInitializer = !apiRef.current.state.columns;
    let columnsState;
    if (isInsideStateInitializer) {
      columnsState = {
        orderedFields: [],
        lookup: {},
        columnVisibilityModel
      };
    } else {
      const currentState = gridColumnsStateSelector(apiRef.current.state);
      columnsState = {
        orderedFields: keepOnlyColumnsToUpsert ? [] : [...currentState.orderedFields],
        lookup: _extends({}, currentState.lookup),
        columnVisibilityModel
      };
    }
    let columnsToKeep = {};
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
      columnsToKeep = Object.keys(columnsState.lookup).reduce((acc, key) => _extends({}, acc, {
        [key]: false
      }), {});
    }
    const columnsToUpsertLookup = {};
    columnsToUpsert.forEach((newColumn) => {
      const {
        field
      } = newColumn;
      columnsToUpsertLookup[field] = true;
      columnsToKeep[field] = true;
      let existingState = columnsState.lookup[field];
      if (existingState == null) {
        let colDef6 = columnTypes[DEFAULT_GRID_COL_TYPE_KEY];
        if (newColumn.type && columnTypes[newColumn.type]) {
          colDef6 = columnTypes[newColumn.type];
        }
        existingState = _extends({}, colDef6, {
          field,
          hasBeenResized: false
        });
        columnsState.orderedFields.push(field);
      } else if (keepOnlyColumnsToUpsert) {
        columnsState.orderedFields.push(field);
      }
      let hasBeenResized = existingState.hasBeenResized;
      COLUMNS_DIMENSION_PROPERTIES.forEach((key) => {
        if (newColumn[key] !== void 0) {
          hasBeenResized = true;
          if (newColumn[key] === -1) {
            newColumn[key] = Infinity;
          }
        }
      });
      columnsState.lookup[field] = _extends({}, existingState, newColumn, {
        hasBeenResized
      });
    });
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
      Object.keys(columnsState.lookup).forEach((field) => {
        if (!columnsToKeep[field]) {
          delete columnsState.lookup[field];
        }
      });
    }
    const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors("hydrateColumns", columnsState);
    const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);
    return hydrateColumnsWidth(columnsStateWithPortableColumns, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null ? void 0 : (_apiRef$current$getRo3 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo3.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);
  };
  const mergeColumnsState = (columnsState) => (state) => _extends({}, state, {
    columns: columnsState
  });
  function getFirstNonSpannedColumnToRender({
    firstColumnToRender,
    apiRef,
    firstRowToRender,
    lastRowToRender,
    visibleRows
  }) {
    let firstNonSpannedColumnToRender = firstColumnToRender;
    for (let i2 = firstRowToRender; i2 < lastRowToRender; i2 += 1) {
      const row = visibleRows[i2];
      if (row) {
        const rowId = visibleRows[i2].id;
        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);
        if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
          firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
        }
      }
    }
    return firstNonSpannedColumnToRender;
  }
  function getFirstColumnIndexToRender({
    firstColumnIndex,
    minColumnIndex,
    columnBuffer,
    firstRowToRender,
    lastRowToRender,
    apiRef,
    visibleRows
  }) {
    const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);
    const firstColumnToRender = getFirstNonSpannedColumnToRender({
      firstColumnToRender: initialFirstColumnToRender,
      apiRef,
      firstRowToRender,
      lastRowToRender,
      visibleRows
    });
    return firstColumnToRender;
  }
  function getTotalHeaderHeight(apiRef, headerHeight) {
    const densityFactor = gridDensityFactorSelector(apiRef);
    const maxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);
    return Math.floor(headerHeight * densityFactor) * ((maxDepth != null ? maxDepth : 0) + 1);
  }

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js
  const React362 = __toModule(require_react());
  const jsx_runtime371 = __toModule(require_jsx_runtime());
  const defaultColumnTypes = getGridDefaultColumnTypes();
  const columnsStateInitializer = (state, props, apiRef) => {
    var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _props$initialState2$;
    const columnsState = createColumnsState({
      apiRef,
      columnTypes: defaultColumnTypes,
      columnsToUpsert: props.columns,
      initialState: (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.columns,
      columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.columns) == null ? void 0 : _props$initialState2$.columnVisibilityModel) != null ? _ref : {},
      keepOnlyColumnsToUpsert: true
    });
    return _extends({}, state, {
      columns: columnsState
    });
  };
  function useGridColumns2(apiRef, props) {
    var _props$initialState4, _props$slotProps2;
    const logger = useGridLogger(apiRef, "useGridColumns");
    const columnTypes = defaultColumnTypes;
    const previousColumnsProp = React362.useRef(props.columns);
    const previousColumnTypesProp = React362.useRef(columnTypes);
    apiRef.current.registerControlState({
      stateId: "visibleColumns",
      propModel: props.columnVisibilityModel,
      propOnChange: props.onColumnVisibilityModelChange,
      stateSelector: gridColumnVisibilityModelSelector,
      changeEvent: "columnVisibilityModelChange"
    });
    const setGridColumnsState = React362.useCallback((columnsState) => {
      logger.debug("Updating columns state.");
      apiRef.current.setState(mergeColumnsState(columnsState));
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent("columnsChange", columnsState.orderedFields);
    }, [logger, apiRef]);
    const getColumn = React362.useCallback((field) => gridColumnLookupSelector(apiRef)[field], [apiRef]);
    const getAllColumns = React362.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);
    const getVisibleColumns = React362.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);
    const getColumnIndex = React362.useCallback((field, useVisibleColumns = true) => {
      const columns6 = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);
      return columns6.findIndex((col) => col.field === field);
    }, [apiRef]);
    const getColumnPosition = React362.useCallback((field) => {
      const index = getColumnIndex(field);
      return gridColumnPositionsSelector(apiRef)[index];
    }, [apiRef, getColumnIndex]);
    const setColumnVisibilityModel = React362.useCallback((model) => {
      const currentModel = gridColumnVisibilityModelSelector(apiRef);
      if (currentModel !== model) {
        apiRef.current.setState((state) => _extends({}, state, {
          columns: createColumnsState({
            apiRef,
            columnTypes,
            columnsToUpsert: [],
            initialState: void 0,
            columnVisibilityModel: model,
            keepOnlyColumnsToUpsert: false
          })
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, columnTypes]);
    const updateColumns = React362.useCallback((columns6) => {
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: columns6,
        initialState: void 0,
        keepOnlyColumnsToUpsert: false
      });
      setGridColumnsState(columnsState);
    }, [apiRef, setGridColumnsState, columnTypes]);
    const setColumnVisibility = React362.useCallback((field, isVisible2) => {
      var _columnVisibilityMode;
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;
      if (isVisible2 !== isCurrentlyVisible) {
        const newModel = _extends({}, columnVisibilityModel, {
          [field]: isVisible2
        });
        apiRef.current.setColumnVisibilityModel(newModel);
      }
    }, [apiRef]);
    const getColumnIndexRelativeToVisibleColumns = React362.useCallback((field) => {
      const allColumns = gridColumnFieldsSelector(apiRef);
      return allColumns.findIndex((col) => col === field);
    }, [apiRef]);
    const setColumnIndex = React362.useCallback((field, targetIndexPosition) => {
      const allColumns = gridColumnFieldsSelector(apiRef);
      const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);
      if (oldIndexPosition === targetIndexPosition) {
        return;
      }
      logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
      const updatedColumns = [...allColumns];
      const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];
      updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);
      setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {
        orderedFields: updatedColumns
      }));
      const params = {
        column: apiRef.current.getColumn(field),
        targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),
        oldIndex: oldIndexPosition
      };
      apiRef.current.publishEvent("columnIndexChange", params);
    }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);
    const setColumnWidth = React362.useCallback((field, width2) => {
      logger.debug(`Updating column ${field} width to ${width2}`);
      const column = apiRef.current.getColumn(field);
      const newColumn = _extends({}, column, {
        width: width2
      });
      apiRef.current.updateColumns([newColumn]);
      apiRef.current.publishEvent("columnWidthChange", {
        element: apiRef.current.getColumnHeaderElement(field),
        colDef: newColumn,
        width: width2
      });
    }, [apiRef, logger]);
    const columnApi = {
      getColumn,
      getAllColumns,
      getColumnIndex,
      getColumnPosition,
      getVisibleColumns,
      getColumnIndexRelativeToVisibleColumns,
      updateColumns,
      setColumnVisibilityModel,
      setColumnVisibility,
      setColumnWidth
    };
    const columnReorderApi = {
      setColumnIndex
    };
    useGridApiMethod2(apiRef, columnApi, "public");
    useGridApiMethod2(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? "private" : "public");
    const stateExportPreProcessing = React362.useCallback((prevState, context) => {
      var _props$initialState$c, _props$initialState3, _props$initialState3$;
      const columnsStateToExport = {};
      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);
      const shouldExportColumnVisibilityModel = !context.exportOnlyDirtyModels || props.columnVisibilityModel != null || Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _props$initialState$c : {}).length > 0 || Object.keys(columnVisibilityModelToExport).length > 0;
      if (shouldExportColumnVisibilityModel) {
        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
      }
      columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);
      const columns6 = gridColumnDefinitionsSelector(apiRef);
      const dimensions = {};
      columns6.forEach((colDef6) => {
        if (colDef6.hasBeenResized) {
          const colDefDimensions = {};
          COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName) => {
            let propertyValue = colDef6[propertyName];
            if (propertyValue === Infinity) {
              propertyValue = -1;
            }
            colDefDimensions[propertyName] = propertyValue;
          });
          dimensions[colDef6.field] = colDefDimensions;
        }
      });
      if (Object.keys(dimensions).length > 0) {
        columnsStateToExport.dimensions = dimensions;
      }
      return _extends({}, prevState, {
        columns: columnsStateToExport
      });
    }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.columns]);
    const stateRestorePreProcessing = React362.useCallback((params, context) => {
      var _context$stateToResto;
      const columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel;
      const initialState = context.stateToRestore.columns;
      if (columnVisibilityModelToImport == null && initialState == null) {
        return params;
      }
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: [],
        initialState,
        columnVisibilityModel: columnVisibilityModelToImport,
        keepOnlyColumnsToUpsert: false
      });
      apiRef.current.setState(mergeColumnsState(columnsState));
      if (initialState != null) {
        apiRef.current.publishEvent("columnsChange", columnsState.orderedFields);
      }
      return params;
    }, [apiRef, columnTypes]);
    const preferencePanelPreProcessing = React362.useCallback((initialValue, value) => {
      if (value === GridPreferencePanelsValue.columns) {
        var _props$slotProps;
        const ColumnsPanel = props.slots.columnsPanel;
        return jsx_runtime371.jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.columnsPanel));
      }
      return initialValue;
    }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.columnsPanel]);
    const addColumnMenuItems = React362.useCallback((columnMenuItems) => {
      if (props.disableColumnSelector) {
        return columnMenuItems;
      }
      return [...columnMenuItems, "columnMenuColumnsItem"];
    }, [props.disableColumnSelector]);
    useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItems);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
    const prevInnerWidth = React362.useRef(null);
    const handleGridSizeChange = (viewportInnerSize) => {
      if (prevInnerWidth.current !== viewportInnerSize.width) {
        prevInnerWidth.current = viewportInnerSize.width;
        setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), viewportInnerSize.width));
      }
    };
    useGridApiEventHandler2(apiRef, "viewportInnerSizeChange", handleGridSizeChange);
    const hydrateColumns = React362.useCallback(() => {
      logger.info(`Columns pipe processing have changed, regenerating the columns`);
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: [],
        initialState: void 0,
        keepOnlyColumnsToUpsert: false
      });
      setGridColumnsState(columnsState);
    }, [apiRef, logger, setGridColumnsState, columnTypes]);
    useGridRegisterPipeApplier(apiRef, "hydrateColumns", hydrateColumns);
    const isFirstRender = React362.useRef(true);
    React362.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }
      logger.info(`GridColumns have changed, new length ${props.columns.length}`);
      if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {
        return;
      }
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        initialState: void 0,
        columnsToUpsert: props.columns,
        keepOnlyColumnsToUpsert: true
      });
      previousColumnsProp.current = props.columns;
      previousColumnTypesProp.current = columnTypes;
      setGridColumnsState(columnsState);
    }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);
    React362.useEffect(() => {
      if (props.columnVisibilityModel !== void 0) {
        apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);
      }
    }, [apiRef, logger, props.columnVisibilityModel]);
  }

  // node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js
  const React363 = __toModule(require_react());
  const COMPACT_DENSITY_FACTOR = 0.7;
  const COMFORTABLE_DENSITY_FACTOR = 1.3;
  const DENSITY_FACTORS = {
    compact: COMPACT_DENSITY_FACTOR,
    comfortable: COMFORTABLE_DENSITY_FACTOR,
    standard: 1
  };
  const densityStateInitializer = (state, props) => _extends({}, state, {
    density: {
      value: props.density,
      factor: DENSITY_FACTORS[props.density]
    }
  });
  const useGridDensity2 = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useDensity");
    const setDensity = React363.useCallback((newDensity) => {
      logger.debug(`Set grid density to ${newDensity}`);
      apiRef.current.setState((state) => {
        const currentDensityState = gridDensitySelector(state);
        const newDensityState = {
          value: newDensity,
          factor: DENSITY_FACTORS[newDensity]
        };
        if (isDeepEqual(currentDensityState, newDensityState)) {
          return state;
        }
        return _extends({}, state, {
          density: newDensityState
        });
      });
      apiRef.current.forceUpdate();
    }, [logger, apiRef]);
    React363.useEffect(() => {
      apiRef.current.setDensity(props.density);
    }, [apiRef, props.density]);
    const densityApi = {
      setDensity
    };
    useGridApiMethod2(apiRef, densityApi, "public");
  };

  // node_modules/@mui/x-data-grid/utils/exportAs.js
  function exportAs2(blob, extension = "csv", filename = document.title || "untitled") {
    const fullName = `${filename}.${extension}`;
    if ("download" in HTMLAnchorElement.prototype) {
      const url = URL.createObjectURL(blob);
      const a2 = document.createElement("a");
      a2.href = url;
      a2.download = fullName;
      a2.click();
      setTimeout(() => {
        URL.revokeObjectURL(url);
      });
      return;
    }
    throw new Error("MUI: exportAs not supported");
  }

  // node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js
  const serializeCellValue = (value, delimiterCharacter) => {
    if (typeof value === "string") {
      const formattedValue = value.replace(/"/g, '""');
      if ([delimiterCharacter, "\n", "\r"].some((delimiter) => formattedValue.includes(delimiter))) {
        return `"${formattedValue}"`;
      }
      return formattedValue;
    }
    return value;
  };
  const objectFormattedValueWarning = buildWarning(["MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
  const serializeRow = (id, columns6, getCellParams, delimiterCharacter) => columns6.map((column) => {
    const cellParams = getCellParams(id, column.field);
    if (true) {
      if (String(cellParams.formattedValue) === "[object Object]") {
        objectFormattedValueWarning();
      }
    }
    return serializeCellValue(cellParams.formattedValue, delimiterCharacter);
  });
  function buildCSV(options) {
    const {
      columns: columns6,
      rowIds,
      getCellParams,
      delimiterCharacter,
      includeHeaders
    } = options;
    const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns6, getCellParams, delimiterCharacter).join(delimiterCharacter)}\r
`, "").trim();
    if (!includeHeaders) {
      return CSVBody;
    }
    const CSVHead = `${columns6.filter((column) => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map((column) => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\r
`;
    return `${CSVHead}${CSVBody}`.trim();
  }

  // node_modules/@mui/x-data-grid/hooks/features/export/utils.js
  const getColumnsToExport = ({
    apiRef,
    options
  }) => {
    const columns6 = gridColumnDefinitionsSelector(apiRef);
    if (options.fields) {
      return options.fields.map((field) => columns6.find((column) => column.field === field)).filter((column) => !!column);
    }
    const validColumns = options.allColumns ? columns6 : gridVisibleColumnDefinitionsSelector(apiRef);
    return validColumns.filter((column) => !column.disableExport);
  };
  const defaultGetRowsToExport = ({
    apiRef
  }) => {
    var _pinnedRows$top, _pinnedRows$bottom;
    const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);
    const rowTree = gridRowTreeSelector(apiRef);
    const selectedRows = apiRef.current.getSelectedRows();
    const bodyRows = filteredSortedRowIds.filter((id) => rowTree[id].type !== "footer");
    const pinnedRows = gridPinnedRowsSelector(apiRef);
    const topPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map((row) => row.id)) || [];
    const bottomPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map((row) => row.id)) || [];
    bodyRows.unshift(...topPinnedRowsIds);
    bodyRows.push(...bottomPinnedRowsIds);
    if (selectedRows.size > 0) {
      return bodyRows.filter((id) => selectedRows.has(id));
    }
    return bodyRows;
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
  const React368 = __toModule(require_react());
  const jsx_runtime372 = __toModule(require_jsx_runtime());
  const useGridCsvExport2 = (apiRef) => {
    const logger = useGridLogger(apiRef, "useGridCsvExport");
    const getDataAsCsv = React368.useCallback((options = {}) => {
      var _options$getRowsToExp, _options$includeHeade;
      logger.debug(`Get data as CSV`);
      const exportedColumns = getColumnsToExport({
        apiRef,
        options
      });
      const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;
      const exportedRowIds = getRowsToExport({
        apiRef
      });
      return buildCSV({
        columns: exportedColumns,
        rowIds: exportedRowIds,
        getCellParams: apiRef.current.getCellParams,
        delimiterCharacter: options.delimiter || ",",
        includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true
      });
    }, [logger, apiRef]);
    const exportDataAsCsv = React368.useCallback((options) => {
      logger.debug(`Export data as CSV`);
      const csv = getDataAsCsv(options);
      const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([239, 187, 191]) : "", csv], {
        type: "text/csv"
      });
      exportAs2(blob, "csv", options == null ? void 0 : options.fileName);
    }, [logger, getDataAsCsv]);
    const csvExportApi = {
      getDataAsCsv,
      exportDataAsCsv
    };
    useGridApiMethod2(apiRef, csvExportApi, "public");
    const addExportMenuButtons = React368.useCallback((initialValue, options) => {
      var _options$csvOptions;
      if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {
        return initialValue;
      }
      return [...initialValue, {
        component: jsx_runtime372.jsx(GridCsvExportMenuItem, {
          options: options.csvOptions
        }),
        componentName: "csvExport"
      }];
    }, []);
    useGridRegisterPipeProcessor(apiRef, "exportMenu", addExportMenuButtons);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js
  const gridRowsMetaSelector2 = (state) => state.rowsMeta;

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
  const React369 = __toModule(require_react());
  const jsx_runtime373 = __toModule(require_jsx_runtime());
  function raf() {
    return new Promise((resolve) => {
      requestAnimationFrame(() => {
        resolve();
      });
    });
  }
  function buildPrintWindow(title) {
    const iframeEl = document.createElement("iframe");
    iframeEl.style.position = "absolute";
    iframeEl.style.width = "0px";
    iframeEl.style.height = "0px";
    iframeEl.title = title || document.title;
    return iframeEl;
  }
  const useGridPrintExport2 = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridPrintExport");
    const doc = React369.useRef(null);
    const previousGridState = React369.useRef(null);
    const previousColumnVisibility = React369.useRef({});
    React369.useEffect(() => {
      doc.current = ownerDocument(apiRef.current.rootElementRef.current);
    }, [apiRef]);
    const updateGridColumnsForPrint = React369.useCallback((fields, allColumns) => new Promise((resolve) => {
      if (!fields && !allColumns) {
        resolve();
        return;
      }
      const exportedColumnFields = getColumnsToExport({
        apiRef,
        options: {
          fields,
          allColumns
        }
      }).map((column) => column.field);
      const columns6 = gridColumnDefinitionsSelector(apiRef);
      const newColumnVisibilityModel = {};
      columns6.forEach((column) => {
        newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);
      });
      apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);
      resolve();
    }), [apiRef]);
    const handlePrintWindowLoad = React369.useCallback((printWindow, options) => {
      var _querySelector, _querySelector2;
      const normalizeOptions = _extends({
        copyStyles: true,
        hideToolbar: false,
        hideFooter: false
      }, options);
      const printDoc = printWindow.contentDocument;
      if (!printDoc) {
        return;
      }
      const rowsMeta = gridRowsMetaSelector2(apiRef.current.state);
      const gridRootElement = apiRef.current.rootElementRef.current;
      const gridClone = gridRootElement.cloneNode(true);
      const gridMain = gridClone.querySelector(`.${gridClasses7.main}`);
      gridMain.style.overflow = "visible";
      gridClone.style.contain = "size";
      const columnHeaders = gridClone.querySelector(`.${gridClasses7.columnHeaders}`);
      const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses7.columnHeadersInner}`);
      columnHeadersInner.style.width = "100%";
      let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses7.toolbarContainer}`)) == null ? void 0 : _querySelector.offsetHeight) || 0;
      let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses7.footerContainer}`)) == null ? void 0 : _querySelector2.offsetHeight) || 0;
      if (normalizeOptions.hideToolbar) {
        var _gridClone$querySelec;
        (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses7.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();
        gridToolbarElementHeight = 0;
      }
      if (normalizeOptions.hideFooter) {
        var _gridClone$querySelec2;
        (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses7.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();
        gridFooterElementHeight = 0;
      }
      gridClone.style.height = `${rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props.columnHeaderHeight) + gridToolbarElementHeight + gridFooterElementHeight}px`;
      gridClone.style.boxSizing = "content-box";
      const container = document.createElement("div");
      container.appendChild(gridClone);
      printDoc.body.innerHTML = container.innerHTML;
      const defaultPageStyle = typeof normalizeOptions.pageStyle === "function" ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;
      if (typeof defaultPageStyle === "string") {
        const styleElement = printDoc.createElement("style");
        styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
        printDoc.head.appendChild(styleElement);
      }
      if (normalizeOptions.bodyClassName) {
        printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" "));
      }
      if (normalizeOptions.copyStyles) {
        const rootCandidate = gridRootElement.getRootNode();
        const root2 = rootCandidate.constructor.name === "ShadowRoot" ? rootCandidate : doc.current;
        const headStyleElements = root2.querySelectorAll("style, link[rel='stylesheet']");
        for (let i2 = 0; i2 < headStyleElements.length; i2 += 1) {
          const node = headStyleElements[i2];
          if (node.tagName === "STYLE") {
            const newHeadStyleElements = printDoc.createElement(node.tagName);
            const sheet2 = node.sheet;
            if (sheet2) {
              let styleCSS = "";
              for (let j2 = 0; j2 < sheet2.cssRules.length; j2 += 1) {
                if (typeof sheet2.cssRules[j2].cssText === "string") {
                  styleCSS += `${sheet2.cssRules[j2].cssText}\r
`;
                }
              }
              newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));
              printDoc.head.appendChild(newHeadStyleElements);
            }
          } else if (node.getAttribute("href")) {
            const newHeadStyleElements = printDoc.createElement(node.tagName);
            for (let j2 = 0; j2 < node.attributes.length; j2 += 1) {
              const attr = node.attributes[j2];
              if (attr) {
                newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || "");
              }
            }
            printDoc.head.appendChild(newHeadStyleElements);
          }
        }
      }
      if (true) {
        printWindow.contentWindow.print();
      }
    }, [apiRef, doc, props.columnHeaderHeight]);
    const handlePrintWindowAfterPrint = React369.useCallback((printWindow) => {
      var _previousGridState$cu, _previousGridState$cu2;
      doc.current.body.removeChild(printWindow);
      apiRef.current.restoreState(previousGridState.current || {});
      if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {
        apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);
      }
      apiRef.current.unstable_enableVirtualization();
      previousGridState.current = null;
      previousColumnVisibility.current = {};
    }, [apiRef]);
    const exportDataAsPrint = React369.useCallback(async (options) => {
      logger.debug(`Export data as Print`);
      if (!apiRef.current.rootElementRef.current) {
        throw new Error("MUI: No grid root element available.");
      }
      previousGridState.current = apiRef.current.exportState();
      previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);
      if (props.pagination) {
        const visibleRowCount = gridExpandedRowCountSelector(apiRef);
        apiRef.current.setPageSize(visibleRowCount);
      }
      await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);
      apiRef.current.unstable_disableVirtualization();
      await raf();
      const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);
      if (false) {
        doc.current.body.appendChild(printWindow);
        handlePrintWindowLoad(printWindow, options);
        handlePrintWindowAfterPrint(printWindow);
      } else {
        printWindow.onload = () => {
          handlePrintWindowLoad(printWindow, options);
          const mediaQueryList = printWindow.contentWindow.matchMedia("print");
          mediaQueryList.addEventListener("change", (mql) => {
            const isAfterPrint = mql.matches === false;
            if (isAfterPrint) {
              handlePrintWindowAfterPrint(printWindow);
            }
          });
        };
        doc.current.body.appendChild(printWindow);
      }
    }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);
    const printExportApi = {
      exportDataAsPrint
    };
    useGridApiMethod2(apiRef, printExportApi, "public");
    const addExportMenuButtons = React369.useCallback((initialValue, options) => {
      var _options$printOptions;
      if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {
        return initialValue;
      }
      return [...initialValue, {
        component: jsx_runtime373.jsx(GridPrintExportMenuItem, {
          options: options.printOptions
        }),
        componentName: "printExport"
      }];
    }, []);
    useGridRegisterPipeProcessor(apiRef, "exportMenu", addExportMenuButtons);
  };

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js
  const cleanFilterItem = (item, apiRef) => {
    const cleanItem = _extends({}, item);
    if (cleanItem.id == null) {
      cleanItem.id = Math.round(Math.random() * 1e5);
    }
    if (cleanItem.operator == null) {
      const column = gridColumnLookupSelector(apiRef)[cleanItem.field];
      cleanItem.operator = column && column.filterOperators[0].value;
    }
    return cleanItem;
  };
  const filterModelDisableMultiColumnsFilteringWarning = buildWarning(["MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
  const filterModelMissingItemIdWarning = buildWarning("MUI: The `id` field is required on `filterModel.items` when you use multiple filters.", "error");
  const filterModelMissingItemOperatorWarning = buildWarning("MUI: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.", "error");
  const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {
    const hasSeveralItems = model.items.length > 1;
    let items;
    if (hasSeveralItems && disableMultipleColumnsFiltering) {
      filterModelDisableMultiColumnsFilteringWarning();
      items = [model.items[0]];
    } else {
      items = model.items;
    }
    const hasItemsWithoutIds = hasSeveralItems && items.some((item) => item.id == null);
    const hasItemWithoutOperator = items.some((item) => item.operator == null);
    if (hasItemsWithoutIds) {
      filterModelMissingItemIdWarning();
    }
    if (hasItemWithoutOperator) {
      filterModelMissingItemOperatorWarning();
    }
    if (hasItemWithoutOperator || hasItemsWithoutIds) {
      return _extends({}, model, {
        items: items.map((item) => cleanFilterItem(item, apiRef))
      });
    }
    if (model.items !== items) {
      return _extends({}, model, {
        items
      });
    }
    return model;
  };
  const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => (filteringState) => _extends({}, filteringState, {
    filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)
  });
  const getFilterCallbackFromItem = (filterItem, apiRef) => {
    if (!filterItem.field || !filterItem.operator) {
      return null;
    }
    const column = apiRef.current.getColumn(filterItem.field);
    if (!column) {
      return null;
    }
    let parsedValue;
    if (column.valueParser) {
      var _filterItem$value;
      const parser = column.valueParser;
      parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map((x2) => parser(x2)) : parser(filterItem.value);
    } else {
      parsedValue = filterItem.value;
    }
    const newFilterItem = _extends({}, filterItem, {
      value: parsedValue
    });
    const filterOperators = column.filterOperators;
    if (!(filterOperators != null && filterOperators.length)) {
      throw new Error(`MUI: No filter operators found for column '${column.field}'.`);
    }
    const filterOperator = filterOperators.find((operator) => operator.value === newFilterItem.operator);
    if (!filterOperator) {
      throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);
    }
    const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);
    if (typeof applyFilterOnRow !== "function") {
      return null;
    }
    const fn = (rowId) => {
      const cellParams = apiRef.current.getCellParams(rowId, newFilterItem.field);
      return applyFilterOnRow(cellParams);
    };
    return {
      fn,
      item: newFilterItem
    };
  };
  const buildAggregatedFilterItemsApplier = (filterModel, apiRef) => {
    const {
      items
    } = filterModel;
    const appliers = items.map((item) => getFilterCallbackFromItem(item, apiRef)).filter((callback) => !!callback);
    if (appliers.length === 0) {
      return null;
    }
    return (rowId, shouldApplyFilter) => {
      const resultPerItemId = {};
      const filteredAppliers = shouldApplyFilter ? appliers.filter((applier) => shouldApplyFilter(applier.item.field)) : appliers;
      filteredAppliers.forEach((applier) => {
        resultPerItemId[applier.item.id] = applier.fn(rowId);
      });
      return resultPerItemId;
    };
  };
  const buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {
    const {
      quickFilterValues = []
    } = filterModel;
    if (quickFilterValues.length === 0) {
      return null;
    }
    const columnsFields = gridColumnFieldsSelector(apiRef);
    const appliersPerField = {};
    columnsFields.forEach((field) => {
      const column = apiRef.current.getColumn(field);
      const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;
      if (!getApplyQuickFilterFn) {
        return;
      }
      appliersPerField[field] = quickFilterValues.map((value) => getApplyQuickFilterFn(value, column, apiRef));
    });
    const sanitizedQuickFilterValues = quickFilterValues.filter((value, index) => Object.keys(appliersPerField).some((field) => appliersPerField[field][index] != null));
    if (sanitizedQuickFilterValues.length === 0) {
      return null;
    }
    return (rowId, shouldApplyFilter) => {
      const usedCellParams = {};
      const fieldsToFilter = [];
      Object.keys(appliersPerField).forEach((field) => {
        if (!shouldApplyFilter || shouldApplyFilter(field)) {
          usedCellParams[field] = apiRef.current.getCellParams(rowId, field);
          fieldsToFilter.push(field);
        }
      });
      const quickFilterValueResult = {};
      sanitizedQuickFilterValues.forEach((value, index) => {
        const isPassing = fieldsToFilter.some((field) => {
          var _appliersPerField$fie, _appliersPerField$fie2;
          if (appliersPerField[field][index] == null) {
            return false;
          }
          return (_appliersPerField$fie = (_appliersPerField$fie2 = appliersPerField[field])[index]) == null ? void 0 : _appliersPerField$fie.call(_appliersPerField$fie2, usedCellParams[field]);
        });
        quickFilterValueResult[value] = isPassing;
      });
      return quickFilterValueResult;
    };
  };
  const buildAggregatedFilterApplier = (filterModel, apiRef) => {
    const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef);
    const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);
    return (rowId, shouldApplyFilter) => ({
      passingFilterItems: isRowMatchingFilterItems && isRowMatchingFilterItems(rowId, shouldApplyFilter),
      passingQuickFilterValues: isRowMatchingQuickFilter && isRowMatchingQuickFilter(rowId, shouldApplyFilter)
    });
  };
  const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef) => {
    var _filterModel$quickFil, _filterModel$logicOpe;
    const cleanedFilterItems = filterModel.items.filter((item) => getFilterCallbackFromItem(item, apiRef) !== null);
    const cleanedAllFilterItemResults = allFilterItemResults.filter((result) => result != null);
    const cleanedAllQuickFilterResults = allQuickFilterResults.filter((result) => result != null);
    const quickFilterLogicOperator = (_filterModel$quickFil = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil : getDefaultGridFilterModel().quickFilterLogicOperator;
    const logicOperator = (_filterModel$logicOpe = filterModel.logicOperator) != null ? _filterModel$logicOpe : getDefaultGridFilterModel().logicOperator;
    if (cleanedAllFilterItemResults.length > 0) {
      const filterItemPredicate = (item) => {
        return cleanedAllFilterItemResults.some((filterItemResult) => filterItemResult[item.id]);
      };
      if (logicOperator === GridLogicOperator.And) {
        const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);
        if (!passesAllFilters) {
          return false;
        }
      } else {
        const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);
        if (!passesSomeFilters) {
          return false;
        }
      }
    }
    if (cleanedAllQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {
      const quickFilterValuePredicate = (value) => {
        return cleanedAllQuickFilterResults.some((quickFilterValueResult) => quickFilterValueResult[value]);
      };
      if (quickFilterLogicOperator === GridLogicOperator.And) {
        const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);
        if (!passesAllQuickFilterValues) {
          return false;
        }
      } else {
        const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);
        if (!passesSomeQuickFilterValues) {
          return false;
        }
      }
    }
    return true;
  };

  // node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js
  const React370 = __toModule(require_react());
  const jsx_runtime374 = __toModule(require_jsx_runtime());
  const filterStateInitializer = (state, props, apiRef) => {
    var _ref, _props$filterModel, _props$initialState, _props$initialState$f;
    const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();
    return _extends({}, state, {
      filter: {
        filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),
        visibleRowsLookup: {},
        filteredDescendantCountLookup: {}
      }
    });
  };
  const useGridFilter2 = (apiRef, props) => {
    var _props$initialState3, _props$initialState3$, _props$slotProps2;
    const logger = useGridLogger(apiRef, "useGridFilter");
    apiRef.current.registerControlState({
      stateId: "filter",
      propModel: props.filterModel,
      propOnChange: props.onFilterModelChange,
      stateSelector: gridFilterModelSelector,
      changeEvent: "filterModelChange"
    });
    const updateFilteredRows = React370.useCallback(() => {
      apiRef.current.setState((state) => {
        const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);
        const isRowMatchingFilters = props.filterMode === "client" ? buildAggregatedFilterApplier(filterModel, apiRef) : null;
        const filteringResult = apiRef.current.applyStrategyProcessor("filtering", {
          isRowMatchingFilters,
          filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()
        });
        return _extends({}, state, {
          filter: _extends({}, state.filter, filteringResult)
        });
      });
      apiRef.current.publishEvent("filteredRowsSet");
    }, [props.filterMode, apiRef]);
    const addColumnMenuItem = React370.useCallback((columnMenuItems, colDef6) => {
      if (colDef6 == null || colDef6.filterable === false || props.disableColumnFilter) {
        return columnMenuItems;
      }
      return [...columnMenuItems, "columnMenuFilterItem"];
    }, [props.disableColumnFilter]);
    const applyFilters = React370.useCallback(() => {
      updateFilteredRows();
      apiRef.current.forceUpdate();
    }, [apiRef, updateFilteredRows]);
    const upsertFilterItem = React370.useCallback((item) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const items = [...filterModel.items];
      const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
      if (itemIndex === -1) {
        items.push(item);
      } else {
        items[itemIndex] = item;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }), "upsertFilterItem");
    }, [apiRef]);
    const upsertFilterItems = React370.useCallback((items) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const existingItems = [...filterModel.items];
      items.forEach((item) => {
        const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
        if (itemIndex === -1) {
          existingItems.push(item);
        } else {
          existingItems[itemIndex] = item;
        }
      });
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }), "upsertFilterItems");
    }, [apiRef]);
    const deleteFilterItem = React370.useCallback((itemToDelete) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const items = filterModel.items.filter((item) => item.id !== itemToDelete.id);
      if (items.length === filterModel.items.length) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }), "deleteFilterItem");
    }, [apiRef]);
    const showFilterPanel = React370.useCallback((targetColumnField) => {
      logger.debug("Displaying filter panel");
      if (targetColumnField) {
        const filterModel = gridFilterModelSelector(apiRef);
        const filterItemsWithValue = filterModel.items.filter((item) => {
          var _column$filterOperato;
          if (item.value !== void 0) {
            if (Array.isArray(item.value) && item.value.length === 0) {
              return false;
            }
            return true;
          }
          const column = apiRef.current.getColumn(item.field);
          const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find((operator) => operator.value === item.operator);
          const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === "undefined" ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;
          if (requiresFilterValue) {
            return false;
          }
          return true;
        });
        let newFilterItems;
        const filterItemOnTarget = filterItemsWithValue.find((item) => item.field === targetColumnField);
        const targetColumn = apiRef.current.getColumn(targetColumnField);
        if (filterItemOnTarget) {
          newFilterItems = filterItemsWithValue;
        } else if (props.disableMultipleColumnsFiltering) {
          newFilterItems = [cleanFilterItem({
            field: targetColumnField,
            operator: targetColumn.filterOperators[0].value
          }, apiRef)];
        } else {
          newFilterItems = [...filterItemsWithValue, cleanFilterItem({
            field: targetColumnField,
            operator: targetColumn.filterOperators[0].value
          }, apiRef)];
        }
        apiRef.current.setFilterModel(_extends({}, filterModel, {
          items: newFilterItems
        }));
      }
      apiRef.current.showPreferences(GridPreferencePanelsValue.filters);
    }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
    const hideFilterPanel = React370.useCallback(() => {
      logger.debug("Hiding filter panel");
      apiRef.current.hidePreferences();
    }, [apiRef, logger]);
    const setFilterLogicOperator = React370.useCallback((logicOperator) => {
      const filterModel = gridFilterModelSelector(apiRef);
      if (filterModel.logicOperator === logicOperator) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        logicOperator
      }), "changeLogicOperator");
    }, [apiRef]);
    const setQuickFilterValues = React370.useCallback((values3) => {
      const filterModel = gridFilterModelSelector(apiRef);
      if (isDeepEqual(filterModel.quickFilterValues, values3)) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        quickFilterValues: [...values3]
      }));
    }, [apiRef]);
    const setFilterModel = React370.useCallback((model, reason) => {
      const currentModel = gridFilterModelSelector(apiRef);
      if (currentModel !== model) {
        logger.debug("Setting filter model");
        apiRef.current.updateControlState("filter", mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);
        apiRef.current.unstable_applyFilters();
      }
    }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
    const filterApi = {
      setFilterLogicOperator,
      unstable_applyFilters: applyFilters,
      deleteFilterItem,
      upsertFilterItem,
      upsertFilterItems,
      setFilterModel,
      showFilterPanel,
      hideFilterPanel,
      setQuickFilterValues
    };
    useGridApiMethod2(apiRef, filterApi, "public");
    const stateExportPreProcessing = React370.useCallback((prevState, context) => {
      var _props$initialState2, _props$initialState2$;
      const filterModelToExport = gridFilterModelSelector(apiRef);
      const shouldExportFilterModel = !context.exportOnlyDirtyModels || props.filterModel != null || ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());
      if (!shouldExportFilterModel) {
        return prevState;
      }
      return _extends({}, prevState, {
        filter: {
          filterModel: filterModelToExport
        }
      });
    }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);
    const stateRestorePreProcessing = React370.useCallback((params, context) => {
      var _context$stateToResto;
      const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;
      if (filterModel == null) {
        return params;
      }
      apiRef.current.updateControlState("filter", mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), "restoreState");
      return _extends({}, params, {
        callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]
      });
    }, [apiRef, props.disableMultipleColumnsFiltering]);
    const preferencePanelPreProcessing = React370.useCallback((initialValue, value) => {
      if (value === GridPreferencePanelsValue.filters) {
        var _props$slotProps;
        const FilterPanel = props.slots.filterPanel;
        return jsx_runtime374.jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));
      }
      return initialValue;
    }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);
    const flatFilteringMethod = React370.useCallback((params) => {
      if (props.filterMode === "client" && params.isRowMatchingFilters) {
        const tree = gridRowTreeSelector(apiRef);
        const rowIds = tree[GRID_ROOT_GROUP_ID].children;
        const filteredRowsLookup = {};
        for (let i2 = 0; i2 < rowIds.length; i2 += 1) {
          const rowId = rowIds[i2];
          let isRowPassing;
          if (typeof rowId === "string" && rowId.startsWith("auto-generated-group-footer")) {
            isRowPassing = true;
          } else {
            const {
              passingFilterItems,
              passingQuickFilterValues
            } = params.isRowMatchingFilters(rowId);
            isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);
          }
          filteredRowsLookup[rowId] = isRowPassing;
        }
        return {
          filteredRowsLookup,
          visibleRowsLookup: filteredRowsLookup,
          filteredDescendantCountLookup: {}
        };
      }
      return {
        visibleRowsLookup: {},
        filteredRowsLookup: {},
        filteredDescendantCountLookup: {}
      };
    }, [apiRef, props.filterMode]);
    useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItem);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "filtering", flatFilteringMethod);
    const handleColumnsChange = React370.useCallback(() => {
      logger.debug("onColUpdated - GridColumns changed, applying filters");
      const filterModel = gridFilterModelSelector(apiRef);
      const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);
      const newFilterItems = filterModel.items.filter((item) => item.field && filterableColumnsLookup[item.field]);
      if (newFilterItems.length < filterModel.items.length) {
        apiRef.current.setFilterModel(_extends({}, filterModel, {
          items: newFilterItems
        }));
      }
    }, [apiRef, logger]);
    const handleStrategyProcessorChange = React370.useCallback((methodName) => {
      if (methodName === "filtering") {
        apiRef.current.unstable_applyFilters();
      }
    }, [apiRef]);
    useGridApiEventHandler2(apiRef, "rowsSet", updateFilteredRows);
    useGridApiEventHandler2(apiRef, "rowExpansionChange", apiRef.current.unstable_applyFilters);
    useGridApiEventHandler2(apiRef, "columnsChange", handleColumnsChange);
    useGridApiEventHandler2(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
    useFirstRender2(() => {
      apiRef.current.unstable_applyFilters();
    });
    React370.useEffect(() => {
      if (props.filterModel !== void 0) {
        apiRef.current.setFilterModel(props.filterModel);
      }
    }, [apiRef, logger, props.filterModel]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js
  const React371 = __toModule(require_react());
  const focusStateInitializer = (state) => _extends({}, state, {
    focus: {
      cell: null,
      columnHeader: null,
      columnGroupHeader: null
    },
    tabIndex: {
      cell: null,
      columnHeader: null,
      columnGroupHeader: null
    }
  });
  const useGridFocus2 = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridFocus");
    const lastClickedCell = React371.useRef(null);
    const publishCellFocusOut = React371.useCallback((cell, event) => {
      if (cell) {
        if (apiRef.current.getRow(cell.id)) {
          apiRef.current.publishEvent("cellFocusOut", apiRef.current.getCellParams(cell.id, cell.field), event);
        }
      }
    }, [apiRef]);
    const setCellFocus = React371.useCallback((id, field) => {
      const focusedCell = gridFocusCellSelector(apiRef);
      if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {
        return;
      }
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on cell with id=${id} and field=${field}`);
        return _extends({}, state, {
          tabIndex: {
            cell: {
              id,
              field
            },
            columnHeader: null,
            columnGroupHeader: null
          },
          focus: {
            cell: {
              id,
              field
            },
            columnHeader: null,
            columnGroupHeader: null
          }
        });
      });
      apiRef.current.forceUpdate();
      if (!apiRef.current.getRow(id)) {
        return;
      }
      if (focusedCell) {
        publishCellFocusOut(focusedCell, {});
      }
      apiRef.current.publishEvent("cellFocusIn", apiRef.current.getCellParams(id, field));
    }, [apiRef, logger, publishCellFocusOut]);
    const setColumnHeaderFocus = React371.useCallback((field, event = {}) => {
      const cell = gridFocusCellSelector(apiRef);
      publishCellFocusOut(cell, event);
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on column header with colIndex=${field}`);
        return _extends({}, state, {
          tabIndex: {
            columnHeader: {
              field
            },
            cell: null,
            columnGroupHeader: null
          },
          focus: {
            columnHeader: {
              field
            },
            cell: null,
            columnGroupHeader: null
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef, logger, publishCellFocusOut]);
    const setColumnGroupHeaderFocus = React371.useCallback((field, depth, event = {}) => {
      const cell = gridFocusCellSelector(apiRef);
      if (cell) {
        apiRef.current.publishEvent("cellFocusOut", apiRef.current.getCellParams(cell.id, cell.field), event);
      }
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          tabIndex: {
            columnGroupHeader: {
              field,
              depth
            },
            columnHeader: null,
            cell: null
          },
          focus: {
            columnGroupHeader: {
              field,
              depth
            },
            columnHeader: null,
            cell: null
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const getColumnGroupHeaderFocus = React371.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);
    const moveFocusToRelativeCell = React371.useCallback((id, field, direction) => {
      let columnIndexToFocus = apiRef.current.getColumnIndex(field);
      let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      if (direction === "right") {
        columnIndexToFocus += 1;
      } else if (direction === "left") {
        columnIndexToFocus -= 1;
      } else {
        rowIndexToFocus += 1;
      }
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      if (columnIndexToFocus >= visibleColumns.length) {
        rowIndexToFocus += 1;
        if (rowIndexToFocus < currentPage.rows.length) {
          columnIndexToFocus = 0;
        }
      } else if (columnIndexToFocus < 0) {
        rowIndexToFocus -= 1;
        if (rowIndexToFocus >= 0) {
          columnIndexToFocus = visibleColumns.length - 1;
        }
      }
      rowIndexToFocus = clamp5(rowIndexToFocus, 0, currentPage.rows.length - 1);
      const rowToFocus = currentPage.rows[rowIndexToFocus];
      const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);
      if (colSpanInfo && colSpanInfo.spannedByColSpan) {
        if (direction === "left" || direction === "below") {
          columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;
        } else if (direction === "right") {
          columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;
        }
      }
      columnIndexToFocus = clamp5(columnIndexToFocus, 0, visibleColumns.length - 1);
      const columnToFocus = visibleColumns[columnIndexToFocus];
      apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);
    }, [apiRef, props.pagination, props.paginationMode]);
    const handleCellDoubleClick = React371.useCallback(({
      id,
      field
    }) => {
      apiRef.current.setCellFocus(id, field);
    }, [apiRef]);
    const handleCellKeyDown = React371.useCallback((params, event) => {
      if (event.key === "Enter" || event.key === "Tab" || event.key === "Shift" || isNavigationKey(event.key)) {
        return;
      }
      apiRef.current.setCellFocus(params.id, params.field);
    }, [apiRef]);
    const handleColumnHeaderFocus = React371.useCallback(({
      field
    }, event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      apiRef.current.setColumnHeaderFocus(field, event);
    }, [apiRef]);
    const focussedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);
    const handleColumnGroupHeaderFocus = React371.useCallback(({
      fields,
      depth
    }, event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (focussedColumnGroup !== null && focussedColumnGroup.depth === depth && fields.includes(focussedColumnGroup.field)) {
        return;
      }
      apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);
    }, [apiRef, focussedColumnGroup]);
    const handleBlur2 = React371.useCallback(() => {
      logger.debug(`Clearing focus`);
      apiRef.current.setState((state) => _extends({}, state, {
        focus: {
          cell: null,
          columnHeader: null,
          columnGroupHeader: null
        }
      }));
    }, [logger, apiRef]);
    const handleCellMouseDown = React371.useCallback((params) => {
      lastClickedCell.current = params;
    }, []);
    const handleDocumentClick = React371.useCallback((event) => {
      const cellParams = lastClickedCell.current;
      lastClickedCell.current = null;
      const focusedCell = gridFocusCellSelector(apiRef);
      const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
        event,
        cell: cellParams
      });
      if (!canUpdateFocus) {
        return;
      }
      if (!focusedCell) {
        if (cellParams) {
          apiRef.current.setCellFocus(cellParams.id, cellParams.field);
        }
        return;
      }
      if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {
        return;
      }
      const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);
      if (cellElement != null && cellElement.contains(event.target)) {
        return;
      }
      if (cellParams) {
        apiRef.current.setCellFocus(cellParams.id, cellParams.field);
      } else {
        apiRef.current.setState((state) => _extends({}, state, {
          focus: {
            cell: null,
            columnHeader: null,
            columnGroupHeader: null
          }
        }));
        apiRef.current.forceUpdate();
        publishCellFocusOut(focusedCell, event);
      }
    }, [apiRef, publishCellFocusOut]);
    const handleCellModeChange = React371.useCallback((params) => {
      if (params.cellMode === "view") {
        return;
      }
      const cell = gridFocusCellSelector(apiRef);
      if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {
        apiRef.current.setCellFocus(params.id, params.field);
      }
    }, [apiRef]);
    const handleRowSet = React371.useCallback(() => {
      const cell = gridFocusCellSelector(apiRef);
      if (cell && !apiRef.current.getRow(cell.id)) {
        apiRef.current.setState((state) => _extends({}, state, {
          focus: {
            cell: null,
            columnHeader: null,
            columnGroupHeader: null
          }
        }));
      }
    }, [apiRef]);
    const focusApi = {
      setCellFocus,
      setColumnHeaderFocus
    };
    const focusPrivateApi = {
      moveFocusToRelativeCell,
      setColumnGroupHeaderFocus,
      getColumnGroupHeaderFocus
    };
    useGridApiMethod2(apiRef, focusApi, "public");
    useGridApiMethod2(apiRef, focusPrivateApi, "private");
    React371.useEffect(() => {
      const doc = ownerDocument(apiRef.current.rootElementRef.current);
      doc.addEventListener("mouseup", handleDocumentClick);
      return () => {
        doc.removeEventListener("mouseup", handleDocumentClick);
      };
    }, [apiRef, handleDocumentClick]);
    useGridApiEventHandler2(apiRef, "columnHeaderBlur", handleBlur2);
    useGridApiEventHandler2(apiRef, "cellDoubleClick", handleCellDoubleClick);
    useGridApiEventHandler2(apiRef, "cellMouseDown", handleCellMouseDown);
    useGridApiEventHandler2(apiRef, "cellKeyDown", handleCellKeyDown);
    useGridApiEventHandler2(apiRef, "cellModeChange", handleCellModeChange);
    useGridApiEventHandler2(apiRef, "columnHeaderFocus", handleColumnHeaderFocus);
    useGridApiEventHandler2(apiRef, "columnGroupHeaderFocus", handleColumnGroupHeaderFocus);
    useGridApiEventHandler2(apiRef, "rowsSet", handleRowSet);
  };

  // node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js
  const React372 = __toModule(require_react());
  function enrichPageRowsWithPinnedRows(apiRef, rows3) {
    const pinnedRows = gridPinnedRowsSelector(apiRef) || {};
    return [...pinnedRows.top || [], ...rows3, ...pinnedRows.bottom || []];
  }
  const getLeftColumnIndex = ({
    currentColIndex,
    firstColIndex,
    lastColIndex,
    direction
  }) => {
    if (direction === "rtl") {
      if (currentColIndex < lastColIndex) {
        return currentColIndex + 1;
      }
    } else if (direction === "ltr") {
      if (currentColIndex > firstColIndex) {
        return currentColIndex - 1;
      }
    }
    return null;
  };
  const getRightColumnIndex = ({
    currentColIndex,
    firstColIndex,
    lastColIndex,
    direction
  }) => {
    if (direction === "rtl") {
      if (currentColIndex > firstColIndex) {
        return currentColIndex - 1;
      }
    } else if (direction === "ltr") {
      if (currentColIndex < lastColIndex) {
        return currentColIndex + 1;
      }
    }
    return null;
  };
  const useGridKeyboardNavigation2 = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridKeyboardNavigation");
    const initialCurrentPageRows = useGridVisibleRows2(apiRef, props).rows;
    const theme = useTheme3();
    const currentPageRows = React372.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);
    const goToCell = React372.useCallback((colIndex, rowId, closestColumnToUse = "left") => {
      const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);
      const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);
      if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
        if (closestColumnToUse === "left") {
          colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
        } else if (closestColumnToUse === "right") {
          colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
        }
      }
      const rowIndexRelativeToAllRows = visibleSortedRows.findIndex((row) => row.id === rowId);
      logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex,
        rowIndex: rowIndexRelativeToAllRows
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setCellFocus(rowId, field);
    }, [apiRef, logger]);
    const goToHeader = React372.useCallback((colIndex, event) => {
      logger.debug(`Navigating to header col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setColumnHeaderFocus(field, event);
    }, [apiRef, logger]);
    const goToGroupHeader = React372.useCallback((colIndex, depth, event) => {
      logger.debug(`Navigating to header col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex
      });
      const {
        field
      } = apiRef.current.getVisibleColumns()[colIndex];
      apiRef.current.setColumnGroupHeaderFocus(field, depth, event);
    }, [apiRef, logger]);
    const getRowIdFromIndex = React372.useCallback((rowIndex) => {
      return currentPageRows[rowIndex].id;
    }, [currentPageRows]);
    const handleColumnHeaderKeyDown = React372.useCallback((params, event) => {
      const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses7.columnHeaderTitleContainerContent}`);
      const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);
      if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return;
      }
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const firstRowIndexInPage = 0;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (firstRowIndexInPage !== null) {
            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));
          }
          break;
        }
        case "ArrowRight": {
          const rightColIndex = getRightColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction: theme.direction
          });
          if (rightColIndex !== null) {
            goToHeader(rightColIndex, event);
          }
          break;
        }
        case "ArrowLeft": {
          const leftColIndex = getLeftColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction: theme.direction
          });
          if (leftColIndex !== null) {
            goToHeader(leftColIndex, event);
          }
          break;
        }
        case "ArrowUp": {
          if (columnGroupMaxDepth > 0) {
            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);
          }
          break;
        }
        case "PageDown": {
          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "Home": {
          goToHeader(firstColIndex, event);
          break;
        }
        case "End": {
          goToHeader(lastColIndex, event);
          break;
        }
        case "Enter": {
          if (event.ctrlKey || event.metaKey) {
            apiRef.current.toggleColumnMenu(params.field);
          }
          break;
        }
        case " ": {
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPageRows.length, theme.direction, goToCell, getRowIdFromIndex, goToHeader, goToGroupHeader]);
    const focusedColumnGroup = useGridSelector2(apiRef, unstable_gridFocusColumnGroupHeaderSelector);
    const handleColumnGroupHeaderKeyDown = React372.useCallback((params, event) => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return;
      }
      if (focusedColumnGroup === null) {
        return;
      }
      const {
        field: currentField,
        depth: currentDepth
      } = focusedColumnGroup;
      const {
        fields,
        depth,
        maxDepth
      } = params;
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const currentColIndex = apiRef.current.getColumnIndex(currentField);
      const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;
      const firstRowIndexInPage = 0;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (depth === maxDepth - 1) {
            goToHeader(currentColIndex, event);
          } else {
            goToGroupHeader(currentColIndex, currentDepth + 1, event);
          }
          break;
        }
        case "ArrowUp": {
          if (depth > 0) {
            goToGroupHeader(currentColIndex, currentDepth - 1, event);
          }
          break;
        }
        case "ArrowRight": {
          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;
          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {
            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);
          }
          break;
        }
        case "ArrowLeft": {
          const remainingLeftColumns = fields.indexOf(currentField);
          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {
            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);
          }
          break;
        }
        case "PageDown": {
          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "Home": {
          goToGroupHeader(firstColIndex, currentDepth, event);
          break;
        }
        case "End": {
          goToGroupHeader(lastColIndex, currentDepth, event);
          break;
        }
        case " ": {
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, focusedColumnGroup, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);
    const handleCellKeyDown = React372.useCallback((params, event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      const cellParams = apiRef.current.getCellParams(params.id, params.field);
      if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {
        return;
      }
      const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
        event,
        cell: cellParams
      });
      if (!canUpdateFocus) {
        return;
      }
      const dimensions = apiRef.current.getRootDimensions();
      if (currentPageRows.length === 0 || !dimensions) {
        return;
      }
      const direction = theme.direction;
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const rowIndexBefore = currentPageRows.findIndex((row) => row.id === params.id);
      const firstRowIndexInPage = 0;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));
          }
          break;
        }
        case "ArrowUp": {
          if (rowIndexBefore > firstRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));
          } else {
            goToHeader(colIndexBefore, event);
          }
          break;
        }
        case "ArrowRight": {
          const rightColIndex = getRightColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction
          });
          if (rightColIndex !== null) {
            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === "rtl" ? "left" : "right");
          }
          break;
        }
        case "ArrowLeft": {
          const leftColIndex = getLeftColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction
          });
          if (leftColIndex !== null) {
            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === "rtl" ? "right" : "left");
          }
          break;
        }
        case "Tab": {
          if (event.shiftKey && colIndexBefore > firstColIndex) {
            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), "left");
          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), "right");
          }
          break;
        }
        case " ": {
          const field = params.field;
          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
            break;
          }
          const colDef6 = params.colDef;
          if (colDef6 && colDef6.type === "treeDataGroup") {
            break;
          }
          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "PageDown": {
          if (rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "PageUp": {
          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);
          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));
          } else {
            goToHeader(colIndexBefore, event);
          }
          break;
        }
        case "Home": {
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));
          } else {
            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));
          }
          break;
        }
        case "End": {
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));
          } else {
            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));
          }
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPageRows, theme.direction, getRowIdFromIndex, goToCell, goToHeader]);
    useGridApiEventHandler2(apiRef, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
    useGridApiEventHandler2(apiRef, "columnGroupHeaderKeyDown", handleColumnGroupHeaderKeyDown);
    useGridApiEventHandler2(apiRef, "cellKeyDown", handleCellKeyDown);
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js
  const React373 = __toModule(require_react());
  const paginationStateInitializer = (state, props) => {
    var _props$paginationMode, _props$initialState, _props$initialState$p;
    const paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_props$paginationMode = props.paginationModel) != null ? _props$paginationMode : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.paginationModel);
    throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);
    return _extends({}, state, {
      pagination: {
        paginationModel
      }
    });
  };
  const mergeStateWithPaginationModel = (rowCount, signature, paginationModelProp) => (paginationState) => {
    var _paginationModelProp$;
    let paginationModel = paginationState.paginationModel;
    const pageSize2 = (_paginationModelProp$ = paginationModelProp == null ? void 0 : paginationModelProp.pageSize) != null ? _paginationModelProp$ : paginationModel.pageSize;
    const pageCount = getPageCount(rowCount, pageSize2);
    if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {
      paginationModel = paginationModelProp;
    }
    const validPage = getValidPage(paginationModel.page, pageCount);
    if (validPage !== paginationModel.page) {
      paginationModel = _extends({}, paginationModel, {
        page: validPage
      });
    }
    throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);
    return {
      paginationModel
    };
  };
  const useGridPagination2 = (apiRef, props) => {
    var _props$initialState3, _props$initialState3$;
    const logger = useGridLogger(apiRef, "useGridPagination");
    const visibleTopLevelRowCount = useGridSelector2(apiRef, gridFilteredTopLevelRowCountSelector);
    const densityFactor = useGridSelector2(apiRef, gridDensityFactorSelector);
    const rowHeight = Math.floor(props.rowHeight * densityFactor);
    apiRef.current.registerControlState({
      stateId: "pagination",
      propModel: props.paginationModel,
      propOnChange: props.onPaginationModelChange,
      stateSelector: gridPaginationModelSelector,
      changeEvent: "paginationModelChange"
    });
    const setPage = React373.useCallback((page) => {
      const currentModel = gridPaginationModelSelector(apiRef);
      if (page === currentModel.page) {
        return;
      }
      logger.debug(`Setting page to ${page}`);
      apiRef.current.setPaginationModel({
        page,
        pageSize: currentModel.pageSize
      });
    }, [apiRef, logger]);
    const setPageSize = React373.useCallback((pageSize2) => {
      const currentModel = gridPaginationModelSelector(apiRef);
      if (pageSize2 === currentModel.pageSize) {
        return;
      }
      logger.debug(`Setting page size to ${pageSize2}`);
      apiRef.current.setPaginationModel({
        pageSize: pageSize2,
        page: currentModel.page
      });
    }, [apiRef, logger]);
    const setPaginationModel = React373.useCallback((paginationModel) => {
      var _props$rowCount;
      const currentModel = gridPaginationModelSelector(apiRef);
      if (paginationModel === currentModel) {
        return;
      }
      logger.debug("Setting 'paginationModel' to", paginationModel);
      apiRef.current.updateControlState("pagination", mergeStateWithPaginationModel((_props$rowCount = props.rowCount) != null ? _props$rowCount : visibleTopLevelRowCount, props.signature, paginationModel), "setPaginationModel");
      apiRef.current.forceUpdate();
    }, [apiRef, logger, props.rowCount, props.signature, visibleTopLevelRowCount]);
    const pageApi = {
      setPage,
      setPageSize,
      setPaginationModel
    };
    useGridApiMethod2(apiRef, pageApi, "public");
    const stateExportPreProcessing = React373.useCallback((prevState, context) => {
      var _props$initialState2, _props$initialState2$;
      const paginationModel = gridPaginationModelSelector(apiRef);
      const shouldExportPaginationModel = !context.exportOnlyDirtyModels || props.paginationModel != null || ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.paginationModel) != null || paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);
      if (!shouldExportPaginationModel) {
        return prevState;
      }
      return _extends({}, prevState, {
        pagination: _extends({}, prevState.pagination, {
          paginationModel
        })
      });
    }, [apiRef, props.paginationModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.pagination) == null ? void 0 : _props$initialState3$.paginationModel, props.autoPageSize]);
    const stateRestorePreProcessing = React373.useCallback((params, context) => {
      var _context$stateToResto, _context$stateToResto2, _props$rowCount2;
      const paginationModel = (_context$stateToResto = context.stateToRestore.pagination) != null && _context$stateToResto.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.paginationModel) : gridPaginationModelSelector(apiRef);
      apiRef.current.updateControlState("pagination", mergeStateWithPaginationModel((_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : visibleTopLevelRowCount, props.signature, paginationModel), "stateRestorePreProcessing");
      return params;
    }, [apiRef, props.autoPageSize, props.rowCount, props.signature, visibleTopLevelRowCount]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    const handlePaginationModelChange = () => {
      var _apiRef$current$virtu;
      const paginationModel = gridPaginationModelSelector(apiRef);
      if ((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current) {
        apiRef.current.scrollToIndexes({
          rowIndex: paginationModel.page * paginationModel.pageSize
        });
      }
      apiRef.current.forceUpdate();
    };
    const handleUpdateAutoPageSize = React373.useCallback(() => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!props.autoPageSize || !dimensions) {
        return;
      }
      const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);
      const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);
      apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);
    }, [apiRef, props.autoPageSize, rowHeight]);
    useGridApiEventHandler2(apiRef, "viewportInnerSizeChange", handleUpdateAutoPageSize);
    useGridApiEventHandler2(apiRef, "paginationModelChange", handlePaginationModelChange);
    React373.useEffect(() => {
      if (true) {
        if (props.paginationMode === "server" && props.rowCount == null) {
          noRowCountInServerMode();
        }
      }
    }, [props.rowCount, props.paginationMode]);
    React373.useEffect(() => {
      var _props$rowCount3;
      apiRef.current.updateControlState("pagination", mergeStateWithPaginationModel((_props$rowCount3 = props.rowCount) != null ? _props$rowCount3 : visibleTopLevelRowCount, props.signature, props.paginationModel));
    }, [apiRef, props.paginationModel, props.rowCount, props.paginationMode, visibleTopLevelRowCount, props.signature]);
    React373.useEffect(() => {
      handleUpdateAutoPageSize();
    }, [handleUpdateAutoPageSize]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js
  const React374 = __toModule(require_react());
  const preferencePanelStateInitializer = (state, props) => {
    var _props$initialState$p, _props$initialState;
    return _extends({}, state, {
      preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {
        open: false
      }
    });
  };
  const useGridPreferencesPanel2 = (apiRef, props) => {
    var _props$initialState3;
    const logger = useGridLogger(apiRef, "useGridPreferencesPanel");
    const hideTimeout = React374.useRef();
    const immediateTimeout = React374.useRef();
    const hidePreferences = React374.useCallback(() => {
      logger.debug("Hiding Preferences Panel");
      const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);
      if (preferencePanelState.openedPanelValue) {
        apiRef.current.publishEvent("preferencePanelClose", {
          openedPanelValue: preferencePanelState.openedPanelValue
        });
      }
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel: {
          open: false
        }
      }));
      apiRef.current.forceUpdate();
    }, [apiRef, logger]);
    const doNotHidePanel = React374.useCallback(() => {
      immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);
    }, []);
    const hidePreferencesDelayed = React374.useCallback(() => {
      hideTimeout.current = setTimeout(hidePreferences, 100);
    }, [hidePreferences]);
    const showPreferences = React374.useCallback((newValue) => {
      logger.debug("Opening Preferences Panel");
      doNotHidePanel();
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel: _extends({}, state.preferencePanel, {
          open: true,
          openedPanelValue: newValue
        })
      }));
      apiRef.current.publishEvent("preferencePanelOpen", {
        openedPanelValue: newValue
      });
      apiRef.current.forceUpdate();
    }, [logger, doNotHidePanel, apiRef]);
    useGridApiMethod2(apiRef, {
      showPreferences,
      hidePreferences: hidePreferencesDelayed
    }, "public");
    const stateExportPreProcessing = React374.useCallback((prevState, context) => {
      var _props$initialState2;
      const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);
      const shouldExportPreferencePanel = !context.exportOnlyDirtyModels || ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null || preferencePanelToExport.open;
      if (!shouldExportPreferencePanel) {
        return prevState;
      }
      return _extends({}, prevState, {
        preferencePanel: preferencePanelToExport
      });
    }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);
    const stateRestorePreProcessing = React374.useCallback((params, context) => {
      const preferencePanel = context.stateToRestore.preferencePanel;
      if (preferencePanel != null) {
        apiRef.current.setState((state) => _extends({}, state, {
          preferencePanel
        }));
      }
      return params;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    React374.useEffect(() => {
      return () => {
        clearTimeout(hideTimeout.current);
        clearTimeout(immediateTimeout.current);
      };
    }, []);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js
  const React365 = __toModule(require_react());
  const _excluded248 = ["id", "field"];
  const _excluded249 = ["id", "field"];
  const missingOnProcessRowUpdateErrorWarning = buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see http://mui.com/components/data-grid/editing/#persistence."], "error");
  const useGridCellEditing = (apiRef, props) => {
    const [cellModesModel, setCellModesModel] = React365.useState({});
    const cellModesModelRef = React365.useRef(cellModesModel);
    const prevCellModesModel = React365.useRef({});
    const {
      processRowUpdate,
      onProcessRowUpdateError,
      cellModesModel: cellModesModelProp,
      onCellModesModelChange
    } = props;
    const runIfEditModeIsCell = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Cell) {
        callback(...args);
      }
    };
    const throwIfNotEditable = React365.useCallback((id, field) => {
      const params = apiRef.current.getCellParams(id, field);
      if (!apiRef.current.isCellEditable(params)) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
      }
    }, [apiRef]);
    const throwIfNotInMode = React365.useCallback((id, field, mode) => {
      if (apiRef.current.getCellMode(id, field) !== mode) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React365.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (params.cellMode === GridCellModes.Edit) {
        return;
      }
      const newParams = _extends({}, params, {
        reason: GridCellEditStartReasons.cellDoubleClick
      });
      apiRef.current.publishEvent("cellEditStart", newParams, event);
    }, [apiRef]);
    const handleCellFocusOut = React365.useCallback((params, event) => {
      if (params.cellMode === GridCellModes.View) {
        return;
      }
      if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {
        return;
      }
      const newParams = _extends({}, params, {
        reason: GridCellEditStopReasons.cellFocusOut
      });
      apiRef.current.publishEvent("cellEditStop", newParams, event);
    }, [apiRef]);
    const handleCellKeyDown = React365.useCallback((params, event) => {
      if (params.cellMode === GridCellModes.Edit) {
        if (event.which === 229) {
          return;
        }
        let reason;
        if (event.key === "Escape") {
          reason = GridCellEditStopReasons.escapeKeyDown;
        } else if (event.key === "Enter") {
          reason = GridCellEditStopReasons.enterKeyDown;
        } else if (event.key === "Tab") {
          reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;
          event.preventDefault();
        }
        if (reason) {
          const newParams = _extends({}, params, {
            reason
          });
          apiRef.current.publishEvent("cellEditStop", newParams, event);
        }
      } else if (params.isEditable) {
        let reason;
        if (event.key === " ") {
          return;
        }
        if (isPrintableKey(event)) {
          reason = GridCellEditStartReasons.printableKeyDown;
        } else if ((event.ctrlKey || event.metaKey) && event.key === "v") {
          reason = GridCellEditStartReasons.printableKeyDown;
        } else if (event.key === "Enter") {
          reason = GridCellEditStartReasons.enterKeyDown;
        } else if (event.key === "Delete" || event.key === "Backspace") {
          reason = GridCellEditStartReasons.deleteKeyDown;
        }
        if (reason) {
          const newParams = _extends({}, params, {
            reason,
            key: event.key
          });
          apiRef.current.publishEvent("cellEditStart", newParams, event);
        }
      }
    }, [apiRef]);
    const handleCellEditStart = React365.useCallback((params) => {
      const {
        id,
        field,
        reason,
        key
      } = params;
      const startCellEditModeParams = {
        id,
        field
      };
      if (reason === GridCellEditStartReasons.printableKeyDown) {
        if (React365.version.startsWith("17")) {
          startCellEditModeParams.deleteValue = true;
        } else {
          startCellEditModeParams.initialValue = key;
        }
      } else if (reason === GridCellEditStartReasons.deleteKeyDown) {
        startCellEditModeParams.deleteValue = true;
      }
      apiRef.current.startCellEditMode(startCellEditModeParams);
    }, [apiRef]);
    const handleCellEditStop = React365.useCallback((params) => {
      const {
        id,
        field,
        reason
      } = params;
      apiRef.current.runPendingEditCellValueMutation(id, field);
      let cellToFocusAfter;
      if (reason === GridCellEditStopReasons.enterKeyDown) {
        cellToFocusAfter = "below";
      } else if (reason === GridCellEditStopReasons.tabKeyDown) {
        cellToFocusAfter = "right";
      } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {
        cellToFocusAfter = "left";
      }
      const ignoreModifications = reason === "escapeKeyDown";
      apiRef.current.stopCellEditMode({
        id,
        field,
        ignoreModifications,
        cellToFocusAfter
      });
    }, [apiRef]);
    useGridApiEventHandler2(apiRef, "cellDoubleClick", runIfEditModeIsCell(handleCellDoubleClick));
    useGridApiEventHandler2(apiRef, "cellFocusOut", runIfEditModeIsCell(handleCellFocusOut));
    useGridApiEventHandler2(apiRef, "cellKeyDown", runIfEditModeIsCell(handleCellKeyDown));
    useGridApiEventHandler2(apiRef, "cellEditStart", runIfEditModeIsCell(handleCellEditStart));
    useGridApiEventHandler2(apiRef, "cellEditStop", runIfEditModeIsCell(handleCellEditStop));
    useGridApiOptionHandler(apiRef, "cellEditStart", props.onCellEditStart);
    useGridApiOptionHandler(apiRef, "cellEditStop", props.onCellEditStop);
    const getCellMode = React365.useCallback((id, field) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editingState[id] && editingState[id][field];
      return isEditing ? GridCellModes.Edit : GridCellModes.View;
    }, [apiRef]);
    const updateCellModesModel = useEventCallback((newModel) => {
      const isNewModelDifferentFromProp = newModel !== props.cellModesModel;
      if (onCellModesModelChange && isNewModelDifferentFromProp) {
        onCellModesModelChange(newModel, {});
      }
      if (props.cellModesModel && isNewModelDifferentFromProp) {
        return;
      }
      setCellModesModel(newModel);
      cellModesModelRef.current = newModel;
      apiRef.current.publishEvent("cellModesModelChange", newModel);
    });
    const updateFieldInCellModesModel = React365.useCallback((id, field, newProps) => {
      const newModel = _extends({}, cellModesModelRef.current);
      if (newProps !== null) {
        newModel[id] = _extends({}, newModel[id], {
          [field]: _extends({}, newProps)
        });
      } else {
        const _newModel$id = newModel[id], otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey));
        newModel[id] = otherFields;
        if (Object.keys(newModel[id]).length === 0) {
          delete newModel[id];
        }
      }
      updateCellModesModel(newModel);
    }, [updateCellModesModel]);
    const updateOrDeleteFieldState = React365.useCallback((id, field, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = _extends({}, newEditingState[id], {
            [field]: _extends({}, newProps)
          });
        } else {
          delete newEditingState[id][field];
          if (Object.keys(newEditingState[id]).length === 0) {
            delete newEditingState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const startCellEditMode = React365.useCallback((params) => {
      const {
        id,
        field
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded248);
      throwIfNotEditable(id, field);
      throwIfNotInMode(id, field, GridCellModes.View);
      updateFieldInCellModesModel(id, field, _extends({
        mode: GridCellModes.Edit
      }, other));
    }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);
    const updateStateToStartCellEditMode = useEventCallback((params) => {
      const {
        id,
        field,
        deleteValue,
        initialValue
      } = params;
      let newValue = apiRef.current.getCellValue(id, field);
      let unstable_updateValueOnRender = false;
      if (deleteValue || initialValue) {
        newValue = deleteValue ? "" : initialValue;
        unstable_updateValueOnRender = true;
      }
      const newProps = {
        value: newValue,
        error: false,
        isProcessingProps: false,
        unstable_updateValueOnRender
      };
      updateOrDeleteFieldState(id, field, newProps);
      apiRef.current.setCellFocus(id, field);
    });
    const stopCellEditMode = React365.useCallback((params) => {
      const {
        id,
        field
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded249);
      throwIfNotInMode(id, field, GridCellModes.Edit);
      updateFieldInCellModesModel(id, field, _extends({
        mode: GridCellModes.View
      }, other));
    }, [throwIfNotInMode, updateFieldInCellModesModel]);
    const updateStateToStopCellEditMode = useEventCallback(async (params) => {
      const {
        id,
        field,
        ignoreModifications,
        cellToFocusAfter = "none"
      } = params;
      throwIfNotInMode(id, field, GridCellModes.Edit);
      apiRef.current.runPendingEditCellValueMutation(id, field);
      const finishCellEditMode = () => {
        updateOrDeleteFieldState(id, field, null);
        updateFieldInCellModesModel(id, field, null);
        if (cellToFocusAfter !== "none") {
          apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);
        }
      };
      if (ignoreModifications) {
        finishCellEditMode();
        return;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const {
        error,
        isProcessingProps
      } = editingState[id][field];
      if (error || isProcessingProps) {
        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
        updateFieldInCellModesModel(id, field, {
          mode: GridCellModes.Edit
        });
        return;
      }
      const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);
      if (processRowUpdate) {
        const handleError = (errorThrown) => {
          prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
          updateFieldInCellModesModel(id, field, {
            mode: GridCellModes.Edit
          });
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else {
            missingOnProcessRowUpdateErrorWarning();
          }
        };
        try {
          const row = apiRef.current.getRow(id);
          Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
            apiRef.current.updateRows([finalRowUpdate]);
            finishCellEditMode();
          }).catch(handleError);
        } catch (errorThrown) {
          handleError(errorThrown);
        }
      } else {
        apiRef.current.updateRows([rowUpdate]);
        finishCellEditMode();
      }
    });
    const setCellEditingEditCellValue = React365.useCallback(async (params) => {
      var _editingState$id, _editingState$id$fiel;
      const {
        id,
        field,
        value,
        debounceMs,
        unstable_skipValueParser: skipValueParser
      } = params;
      throwIfNotEditable(id, field);
      throwIfNotInMode(id, field, GridCellModes.Edit);
      const column = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      let parsedValue = value;
      if (column.valueParser && !skipValueParser) {
        parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));
      }
      let editingState = gridEditRowsStateSelector(apiRef.current.state);
      let newProps = _extends({}, editingState[id][field], {
        value: parsedValue,
        changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
      });
      if (column.preProcessEditCellProps) {
        const hasChanged = value !== editingState[id][field].value;
        newProps = _extends({}, newProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, field, newProps);
        newProps = await Promise.resolve(column.preProcessEditCellProps({
          id,
          row,
          props: newProps,
          hasChanged
        }));
      }
      if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {
        return false;
      }
      editingState = gridEditRowsStateSelector(apiRef.current.state);
      newProps = _extends({}, newProps, {
        isProcessingProps: false
      });
      newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
      updateOrDeleteFieldState(id, field, newProps);
      editingState = gridEditRowsStateSelector(apiRef.current.state);
      return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);
    }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
    const getRowWithUpdatedValuesFromCellEditing = React365.useCallback((id, field) => {
      const column = apiRef.current.getColumn(field);
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      if (!editingState[id] || !editingState[id][field]) {
        return apiRef.current.getRow(id);
      }
      const {
        value
      } = editingState[id][field];
      return column.valueSetter ? column.valueSetter({
        value,
        row
      }) : _extends({}, row, {
        [field]: value
      });
    }, [apiRef]);
    const editingApi = {
      getCellMode,
      startCellEditMode,
      stopCellEditMode
    };
    const editingPrivateApi = {
      setCellEditingEditCellValue,
      getRowWithUpdatedValuesFromCellEditing
    };
    useGridApiMethod2(apiRef, editingApi, "public");
    useGridApiMethod2(apiRef, editingPrivateApi, "private");
    React365.useEffect(() => {
      if (cellModesModelProp) {
        updateCellModesModel(cellModesModelProp);
      }
    }, [cellModesModelProp, updateCellModesModel]);
    React365.useEffect(() => {
      const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);
      const copyOfPrevCellModes = prevCellModesModel.current;
      prevCellModesModel.current = deepClone2(cellModesModel);
      Object.entries(cellModesModel).forEach(([id, fields]) => {
        Object.entries(fields).forEach(([field, params]) => {
          var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;
          const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;
          const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;
          if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {
            updateStateToStartCellEditMode(_extends({
              id: originalId,
              field
            }, params));
          } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {
            updateStateToStopCellEditMode(_extends({
              id: originalId,
              field
            }, params));
          }
        });
      });
    }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js
  const React367 = __toModule(require_react());
  const _excluded250 = ["id"];
  const _excluded251 = ["id"];
  const missingOnProcessRowUpdateErrorWarning2 = buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see http://mui.com/components/data-grid/editing/#persistence."], "error");
  const useGridRowEditing2 = (apiRef, props) => {
    const [rowModesModel, setRowModesModel] = React367.useState({});
    const rowModesModelRef = React367.useRef(rowModesModel);
    const prevRowModesModel = React367.useRef({});
    const focusTimeout = React367.useRef(null);
    const nextFocusedCell = React367.useRef(null);
    const {
      processRowUpdate,
      onProcessRowUpdateError,
      rowModesModel: rowModesModelProp,
      onRowModesModelChange
    } = props;
    const runIfEditModeIsRow = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Row) {
        callback(...args);
      }
    };
    const throwIfNotEditable = React367.useCallback((id, field) => {
      const params = apiRef.current.getCellParams(id, field);
      if (!apiRef.current.isCellEditable(params)) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
      }
    }, [apiRef]);
    const throwIfNotInMode = React367.useCallback((id, mode) => {
      if (apiRef.current.getRowMode(id) !== mode) {
        throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React367.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {
        return;
      }
      const rowParams = apiRef.current.getRowParams(params.id);
      const newParams = _extends({}, rowParams, {
        field: params.field,
        reason: GridRowEditStartReasons.cellDoubleClick
      });
      apiRef.current.publishEvent("rowEditStart", newParams, event);
    }, [apiRef]);
    const handleCellFocusIn = React367.useCallback((params) => {
      nextFocusedCell.current = params;
    }, []);
    const handleCellFocusOut = React367.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
        return;
      }
      nextFocusedCell.current = null;
      focusTimeout.current = setTimeout(() => {
        var _nextFocusedCell$curr;
        focusTimeout.current = null;
        if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {
          if (!apiRef.current.getRow(params.id)) {
            return;
          }
          if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
            return;
          }
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            field: params.field,
            reason: GridRowEditStopReasons.rowFocusOut
          });
          apiRef.current.publishEvent("rowEditStop", newParams, event);
        }
      });
    }, [apiRef]);
    React367.useEffect(() => {
      return () => {
        clearTimeout(focusTimeout.current);
      };
    }, []);
    const handleCellKeyDown = React367.useCallback((params, event) => {
      if (params.cellMode === GridRowModes.Edit) {
        if (event.which === 229) {
          return;
        }
        let reason;
        if (event.key === "Escape") {
          reason = GridRowEditStopReasons.escapeKeyDown;
        } else if (event.key === "Enter") {
          reason = GridRowEditStopReasons.enterKeyDown;
        } else if (event.key === "Tab") {
          const columnFields = gridColumnFieldsSelector(apiRef).filter((field) => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));
          if (event.shiftKey) {
            if (params.field === columnFields[0]) {
              reason = GridRowEditStopReasons.shiftTabKeyDown;
            }
          } else if (params.field === columnFields[columnFields.length - 1]) {
            reason = GridRowEditStopReasons.tabKeyDown;
          }
          event.preventDefault();
          if (!reason) {
            const index = columnFields.findIndex((field) => field === params.field);
            const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];
            apiRef.current.setCellFocus(params.id, nextFieldToFocus);
          }
        }
        if (reason) {
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            reason,
            field: params.field
          });
          apiRef.current.publishEvent("rowEditStop", newParams, event);
        }
      } else if (params.isEditable) {
        let reason;
        if (event.key === " ") {
          return;
        }
        if (isPrintableKey(event)) {
          reason = GridRowEditStartReasons.printableKeyDown;
        } else if ((event.ctrlKey || event.metaKey) && event.key === "v") {
          reason = GridRowEditStartReasons.printableKeyDown;
        } else if (event.key === "Enter") {
          reason = GridRowEditStartReasons.enterKeyDown;
        } else if (event.key === "Delete" || event.key === "Backspace") {
          reason = GridRowEditStartReasons.deleteKeyDown;
        }
        if (reason) {
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            field: params.field,
            key: event.key,
            reason
          });
          apiRef.current.publishEvent("rowEditStart", newParams, event);
        }
      }
    }, [apiRef]);
    const handleRowEditStart = React367.useCallback((params) => {
      const {
        id,
        field,
        reason,
        key
      } = params;
      const startRowEditModeParams = {
        id,
        fieldToFocus: field
      };
      if (reason === GridRowEditStartReasons.printableKeyDown) {
        if (React367.version.startsWith("17")) {
          startRowEditModeParams.deleteValue = !!field;
        } else {
          startRowEditModeParams.initialValue = key;
        }
      } else if (reason === GridRowEditStartReasons.deleteKeyDown) {
        startRowEditModeParams.deleteValue = !!field;
      }
      apiRef.current.startRowEditMode(startRowEditModeParams);
    }, [apiRef]);
    const handleRowEditStop = React367.useCallback((params) => {
      const {
        id,
        reason,
        field
      } = params;
      apiRef.current.runPendingEditCellValueMutation(id);
      let cellToFocusAfter;
      if (reason === GridRowEditStopReasons.enterKeyDown) {
        cellToFocusAfter = "below";
      } else if (reason === GridRowEditStopReasons.tabKeyDown) {
        cellToFocusAfter = "right";
      } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {
        cellToFocusAfter = "left";
      }
      const ignoreModifications = reason === "escapeKeyDown";
      apiRef.current.stopRowEditMode({
        id,
        ignoreModifications,
        field,
        cellToFocusAfter
      });
    }, [apiRef]);
    useGridApiEventHandler2(apiRef, "cellDoubleClick", runIfEditModeIsRow(handleCellDoubleClick));
    useGridApiEventHandler2(apiRef, "cellFocusIn", runIfEditModeIsRow(handleCellFocusIn));
    useGridApiEventHandler2(apiRef, "cellFocusOut", runIfEditModeIsRow(handleCellFocusOut));
    useGridApiEventHandler2(apiRef, "cellKeyDown", runIfEditModeIsRow(handleCellKeyDown));
    useGridApiEventHandler2(apiRef, "rowEditStart", runIfEditModeIsRow(handleRowEditStart));
    useGridApiEventHandler2(apiRef, "rowEditStop", runIfEditModeIsRow(handleRowEditStop));
    useGridApiOptionHandler(apiRef, "rowEditStart", props.onRowEditStart);
    useGridApiOptionHandler(apiRef, "rowEditStop", props.onRowEditStop);
    const getRowMode = React367.useCallback((id) => {
      if (props.editMode === GridEditModes.Cell) {
        return GridRowModes.View;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;
      return isEditing ? GridRowModes.Edit : GridRowModes.View;
    }, [apiRef, props.editMode]);
    const updateRowModesModel = useEventCallback((newModel) => {
      const isNewModelDifferentFromProp = newModel !== props.rowModesModel;
      if (onRowModesModelChange && isNewModelDifferentFromProp) {
        onRowModesModelChange(newModel, {});
      }
      if (props.rowModesModel && isNewModelDifferentFromProp) {
        return;
      }
      setRowModesModel(newModel);
      rowModesModelRef.current = newModel;
      apiRef.current.publishEvent("rowModesModelChange", newModel);
    });
    const updateRowInRowModesModel = React367.useCallback((id, newProps) => {
      const newModel = _extends({}, rowModesModelRef.current);
      if (newProps !== null) {
        newModel[id] = _extends({}, newProps);
      } else {
        delete newModel[id];
      }
      updateRowModesModel(newModel);
    }, [updateRowModesModel]);
    const updateOrDeleteRowState = React367.useCallback((id, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = newProps;
        } else {
          delete newEditingState[id];
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const updateOrDeleteFieldState = React367.useCallback((id, field, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = _extends({}, newEditingState[id], {
            [field]: _extends({}, newProps)
          });
        } else {
          delete newEditingState[id][field];
          if (Object.keys(newEditingState[id]).length === 0) {
            delete newEditingState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const startRowEditMode = React367.useCallback((params) => {
      const {
        id
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded250);
      throwIfNotInMode(id, GridRowModes.View);
      updateRowInRowModesModel(id, _extends({
        mode: GridRowModes.Edit
      }, other));
    }, [throwIfNotInMode, updateRowInRowModesModel]);
    const updateStateToStartRowEditMode = useEventCallback((params) => {
      const {
        id,
        fieldToFocus,
        deleteValue,
        initialValue
      } = params;
      const columnFields = gridColumnFieldsSelector(apiRef);
      const newProps = columnFields.reduce((acc, field) => {
        const cellParams = apiRef.current.getCellParams(id, field);
        if (!cellParams.isEditable) {
          return acc;
        }
        let newValue = apiRef.current.getCellValue(id, field);
        let unstable_updateValueOnRender = false;
        if (fieldToFocus === field && (deleteValue || initialValue)) {
          newValue = deleteValue ? "" : initialValue;
          unstable_updateValueOnRender = true;
        }
        acc[field] = {
          value: newValue,
          error: false,
          isProcessingProps: false,
          unstable_updateValueOnRender
        };
        return acc;
      }, {});
      updateOrDeleteRowState(id, newProps);
      if (fieldToFocus) {
        apiRef.current.setCellFocus(id, fieldToFocus);
      }
    });
    const stopRowEditMode = React367.useCallback((params) => {
      const {
        id
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded251);
      throwIfNotInMode(id, GridRowModes.Edit);
      updateRowInRowModesModel(id, _extends({
        mode: GridRowModes.View
      }, other));
    }, [throwIfNotInMode, updateRowInRowModesModel]);
    const updateStateToStopRowEditMode = useEventCallback((params) => {
      const {
        id,
        ignoreModifications,
        field: focusedField,
        cellToFocusAfter = "none"
      } = params;
      apiRef.current.runPendingEditCellValueMutation(id);
      const finishRowEditMode = () => {
        if (cellToFocusAfter !== "none" && focusedField) {
          apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
        }
        updateOrDeleteRowState(id, null);
        updateRowInRowModesModel(id, null);
      };
      if (ignoreModifications) {
        finishRowEditMode();
        return;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      const isSomeFieldProcessingProps = Object.values(editingState[id]).some((fieldProps) => fieldProps.isProcessingProps);
      if (isSomeFieldProcessingProps) {
        prevRowModesModel.current[id].mode = GridRowModes.Edit;
        return;
      }
      const hasSomeFieldWithError = Object.values(editingState[id]).some((fieldProps) => fieldProps.error);
      if (hasSomeFieldWithError) {
        prevRowModesModel.current[id].mode = GridRowModes.Edit;
        updateRowInRowModesModel(id, {
          mode: GridRowModes.Edit
        });
        return;
      }
      const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
      if (processRowUpdate) {
        const handleError = (errorThrown) => {
          prevRowModesModel.current[id].mode = GridRowModes.Edit;
          updateRowInRowModesModel(id, {
            mode: GridRowModes.Edit
          });
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else {
            missingOnProcessRowUpdateErrorWarning2();
          }
        };
        try {
          Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
            apiRef.current.updateRows([finalRowUpdate]);
            finishRowEditMode();
          }).catch(handleError);
        } catch (errorThrown) {
          handleError(errorThrown);
        }
      } else {
        apiRef.current.updateRows([rowUpdate]);
        finishRowEditMode();
      }
    });
    const setRowEditingEditCellValue = React367.useCallback((params) => {
      const {
        id,
        field,
        value,
        debounceMs,
        unstable_skipValueParser: skipValueParser
      } = params;
      throwIfNotEditable(id, field);
      const column = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      let parsedValue = value;
      if (column.valueParser && !skipValueParser) {
        parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));
      }
      let editingState = gridEditRowsStateSelector(apiRef.current.state);
      let newProps = _extends({}, editingState[id][field], {
        value: parsedValue,
        changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
      });
      if (!column.preProcessEditCellProps) {
        updateOrDeleteFieldState(id, field, newProps);
      }
      return new Promise((resolve) => {
        const promises = [];
        if (column.preProcessEditCellProps) {
          const hasChanged = newProps.value !== editingState[id][field].value;
          newProps = _extends({}, newProps, {
            isProcessingProps: true
          });
          updateOrDeleteFieldState(id, field, newProps);
          const _editingState$id = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));
          const promise = Promise.resolve(column.preProcessEditCellProps({
            id,
            row,
            props: newProps,
            hasChanged,
            otherFieldsProps
          })).then((processedProps) => {
            if (apiRef.current.getRowMode(id) === GridRowModes.View) {
              resolve(false);
              return;
            }
            editingState = gridEditRowsStateSelector(apiRef.current.state);
            processedProps = _extends({}, processedProps, {
              isProcessingProps: false
            });
            processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
            updateOrDeleteFieldState(id, field, processedProps);
          });
          promises.push(promise);
        }
        Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {
          if (thisField === field) {
            return;
          }
          const fieldColumn = apiRef.current.getColumn(thisField);
          if (!fieldColumn.preProcessEditCellProps) {
            return;
          }
          fieldProps = _extends({}, fieldProps, {
            isProcessingProps: true
          });
          updateOrDeleteFieldState(id, thisField, fieldProps);
          editingState = gridEditRowsStateSelector(apiRef.current.state);
          const _editingState$id2 = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));
          const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
            id,
            row,
            props: fieldProps,
            hasChanged: false,
            otherFieldsProps
          })).then((processedProps) => {
            if (apiRef.current.getRowMode(id) === GridRowModes.View) {
              resolve(false);
              return;
            }
            processedProps = _extends({}, processedProps, {
              isProcessingProps: false
            });
            updateOrDeleteFieldState(id, thisField, processedProps);
          });
          promises.push(promise);
        });
        Promise.all(promises).then(() => {
          if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
            editingState = gridEditRowsStateSelector(apiRef.current.state);
            resolve(!editingState[id][field].error);
          } else {
            resolve(false);
          }
        });
      });
    }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);
    const getRowWithUpdatedValuesFromRowEditing = React367.useCallback((id) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      if (!editingState[id]) {
        return apiRef.current.getRow(id);
      }
      let rowUpdate = _extends({}, row);
      Object.entries(editingState[id]).forEach(([field, fieldProps]) => {
        const column = apiRef.current.getColumn(field);
        if (column.valueSetter) {
          rowUpdate = column.valueSetter({
            value: fieldProps.value,
            row: rowUpdate
          });
        } else {
          rowUpdate[field] = fieldProps.value;
        }
      });
      return rowUpdate;
    }, [apiRef]);
    const editingApi = {
      getRowMode,
      startRowEditMode,
      stopRowEditMode
    };
    const editingPrivateApi = {
      setRowEditingEditCellValue,
      getRowWithUpdatedValuesFromRowEditing
    };
    useGridApiMethod2(apiRef, editingApi, "public");
    useGridApiMethod2(apiRef, editingPrivateApi, "private");
    React367.useEffect(() => {
      if (rowModesModelProp) {
        updateRowModesModel(rowModesModelProp);
      }
    }, [rowModesModelProp, updateRowModesModel]);
    React367.useEffect(() => {
      const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);
      const copyOfPrevRowModesModel = prevRowModesModel.current;
      prevRowModesModel.current = deepClone2(rowModesModel);
      Object.entries(rowModesModel).forEach(([id, params]) => {
        var _copyOfPrevRowModesMo, _idToIdLookup$id;
        const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;
        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;
        if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {
          updateStateToStartRowEditMode(_extends({
            id: originalId
          }, params));
        } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {
          updateStateToStopRowEditMode(_extends({
            id: originalId
          }, params));
        }
      });
    }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.js
  const React366 = __toModule(require_react());
  const editingStateInitializer = (state) => _extends({}, state, {
    editRows: {}
  });
  const useGridEditing2 = (apiRef, props) => {
    useGridCellEditing(apiRef, props);
    useGridRowEditing2(apiRef, props);
    const debounceMap = React366.useRef({});
    const {
      isCellEditable: isCellEditableProp
    } = props;
    const isCellEditable = React366.useCallback((params) => {
      if (isAutoGeneratedRow(params.rowNode)) {
        return false;
      }
      if (!params.colDef.editable) {
        return false;
      }
      if (!params.colDef.renderEditCell) {
        return false;
      }
      if (isCellEditableProp) {
        return isCellEditableProp(params);
      }
      if (params.rowNode.type === "pinnedRow") {
        return false;
      }
      return true;
    }, [isCellEditableProp]);
    const maybeDebounce = (id, field, debounceMs, callback) => {
      if (!debounceMs) {
        callback();
        return;
      }
      if (!debounceMap.current[id]) {
        debounceMap.current[id] = {};
      }
      if (debounceMap.current[id][field]) {
        const [timeout2] = debounceMap.current[id][field];
        clearTimeout(timeout2);
      }
      const runImmediately = () => {
        const [timeout2] = debounceMap.current[id][field];
        clearTimeout(timeout2);
        callback();
        delete debounceMap.current[id][field];
      };
      const timeout = setTimeout(() => {
        callback();
        delete debounceMap.current[id][field];
      }, debounceMs);
      debounceMap.current[id][field] = [timeout, runImmediately];
    };
    React366.useEffect(() => {
      const debounces = debounceMap.current;
      return () => {
        Object.entries(debounces).forEach(([id, fields]) => {
          Object.keys(fields).forEach((field) => {
            const [timeout] = debounces[id][field];
            clearTimeout(timeout);
            delete debounces[id][field];
          });
        });
      };
    }, []);
    const runPendingEditCellValueMutation = React366.useCallback((id, field) => {
      if (!debounceMap.current[id]) {
        return;
      }
      if (!field) {
        Object.keys(debounceMap.current[id]).forEach((debouncedField) => {
          const [, runCallback] = debounceMap.current[id][debouncedField];
          runCallback();
        });
      } else if (debounceMap.current[id][field]) {
        const [, runCallback] = debounceMap.current[id][field];
        runCallback();
      }
    }, []);
    const setEditCellValue = React366.useCallback((params) => {
      const {
        id,
        field,
        debounceMs
      } = params;
      return new Promise((resolve) => {
        maybeDebounce(id, field, debounceMs, async () => {
          const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.setRowEditingEditCellValue : apiRef.current.setCellEditingEditCellValue;
          if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {
            const result = await setEditCellValueToCall(params);
            resolve(result);
          }
        });
      });
    }, [apiRef, props.editMode]);
    const getRowWithUpdatedValues = React366.useCallback((id, field) => {
      return props.editMode === GridEditModes.Cell ? apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
    }, [apiRef, props.editMode]);
    const getEditCellMeta = React366.useCallback((id, field) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      return editingState[id][field];
    }, [apiRef]);
    const editingSharedApi = {
      isCellEditable,
      setEditCellValue,
      getRowWithUpdatedValues,
      unstable_getEditCellMeta: getEditCellMeta
    };
    const editingSharedPrivateApi = {
      runPendingEditCellValueMutation
    };
    useGridApiMethod2(apiRef, editingSharedApi, "public");
    useGridApiMethod2(apiRef, editingSharedPrivateApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js
  const React378 = __toModule(require_react());
  const rowsStateInitializer = (state, props, apiRef) => {
    apiRef.current.caches.rows = createRowsInternalCache({
      rows: props.rows,
      getRowId: props.getRowId,
      loading: props.loading,
      rowCount: props.rowCount
    });
    return _extends({}, state, {
      rows: getRowsStateFromCache({
        apiRef,
        rowCountProp: props.rowCount,
        loadingProp: props.loading,
        previousTree: null,
        previousTreeDepths: null
      })
    });
  };
  const useGridRows2 = (apiRef, props) => {
    if (true) {
      try {
        Object.freeze(props.rows);
      } catch (error) {
      }
    }
    const logger = useGridLogger(apiRef, "useGridRows");
    const currentPage = useGridVisibleRows2(apiRef, props);
    const lastUpdateMs = React378.useRef(Date.now());
    const timeout = React378.useRef(null);
    const getRow = React378.useCallback((id) => {
      const model = gridRowsLookupSelector(apiRef)[id];
      if (model) {
        return model;
      }
      const node = apiRef.current.getRowNode(id);
      if (node && isAutoGeneratedRow(node)) {
        return {};
      }
      return null;
    }, [apiRef]);
    const lookup = React378.useMemo(() => currentPage.rows.reduce((acc, {
      id
    }, index) => {
      acc[id] = index;
      return acc;
    }, {}), [currentPage.rows]);
    const throttledRowsChange = React378.useCallback(({
      cache: cache6,
      throttle
    }) => {
      const run = () => {
        timeout.current = null;
        lastUpdateMs.current = Date.now();
        apiRef.current.setState((state) => _extends({}, state, {
          rows: getRowsStateFromCache({
            apiRef,
            rowCountProp: props.rowCount,
            loadingProp: props.loading,
            previousTree: gridRowTreeSelector(apiRef),
            previousTreeDepths: gridRowTreeDepthsSelector(apiRef)
          })
        }));
        apiRef.current.publishEvent("rowsSet");
        apiRef.current.forceUpdate();
      };
      if (timeout.current) {
        clearTimeout(timeout.current);
        timeout.current = null;
      }
      apiRef.current.caches.rows = cache6;
      if (!throttle) {
        run();
        return;
      }
      const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);
      if (throttleRemainingTimeMs > 0) {
        timeout.current = setTimeout(run, throttleRemainingTimeMs);
        return;
      }
      run();
    }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);
    const setRows = React378.useCallback((rows3) => {
      logger.debug(`Updating all rows, new length ${rows3.length}`);
      const cache6 = createRowsInternalCache({
        rows: rows3,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
      });
      const prevCache = apiRef.current.caches.rows;
      cache6.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;
      throttledRowsChange({
        cache: cache6,
        throttle: true
      });
    }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);
    const updateRows = React378.useCallback((updates) => {
      if (props.signature === GridSignature.DataGrid && updates.length > 1) {
        throw new Error(["MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
      }
      const cache6 = updateCacheWithNewRows({
        updates,
        getRowId: props.getRowId,
        previousCache: apiRef.current.caches.rows
      });
      throttledRowsChange({
        cache: cache6,
        throttle: true
      });
    }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);
    const getRowModels = React378.useCallback(() => {
      const dataRows = gridDataRowIdsSelector(apiRef);
      const idRowsLookup = gridRowsLookupSelector(apiRef);
      return new Map(dataRows.map((id) => {
        var _idRowsLookup$id;
        return [id, (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}];
      }));
    }, [apiRef]);
    const getRowsCount = React378.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);
    const getAllRowIds = React378.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);
    const getRowIndexRelativeToVisibleRows = React378.useCallback((id) => lookup[id], [lookup]);
    const setRowChildrenExpansion = React378.useCallback((id, isExpanded) => {
      const currentNode = apiRef.current.getRowNode(id);
      if (!currentNode) {
        throw new Error(`MUI: No row with id #${id} found`);
      }
      if (currentNode.type !== "group") {
        throw new Error("MUI: Only group nodes can be expanded or collapsed");
      }
      const newNode = _extends({}, currentNode, {
        childrenExpanded: isExpanded
      });
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          rows: _extends({}, state.rows, {
            tree: _extends({}, state.rows.tree, {
              [id]: newNode
            })
          })
        });
      });
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent("rowExpansionChange", newNode);
    }, [apiRef]);
    const getRowNode = React378.useCallback((id) => {
      var _ref;
      return (_ref = gridRowTreeSelector(apiRef)[id]) != null ? _ref : null;
    }, [apiRef]);
    const getRowGroupChildren = React378.useCallback(({
      skipAutoGeneratedRows = true,
      groupId,
      applySorting,
      applyFiltering
    }) => {
      const tree = gridRowTreeSelector(apiRef);
      let children;
      if (applySorting) {
        const groupNode = tree[groupId];
        if (!groupNode) {
          return [];
        }
        const sortedRowIds = gridSortedRowIdsSelector(apiRef);
        children = [];
        const startIndex = sortedRowIds.findIndex((id) => id === groupId) + 1;
        for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {
          const id = sortedRowIds[index];
          if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {
            children.push(id);
          }
        }
      } else {
        children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);
      }
      if (applyFiltering) {
        const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
        children = children.filter((childId) => filteredRowsLookup[childId] !== false);
      }
      return children;
    }, [apiRef]);
    const setRowIndex = React378.useCallback((rowId, targetIndex) => {
      const node = apiRef.current.getRowNode(rowId);
      if (!node) {
        throw new Error(`MUI: No row with id #${rowId} found`);
      }
      if (node.parent !== GRID_ROOT_GROUP_ID) {
        throw new Error(`MUI: The row reordering do not support reordering of grouped rows yet`);
      }
      if (node.type !== "leaf") {
        throw new Error(`MUI: The row reordering do not support reordering of footer or grouping rows`);
      }
      apiRef.current.setState((state) => {
        const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];
        const allRows = group.children;
        const oldIndex = allRows.findIndex((row) => row === rowId);
        if (oldIndex === -1 || oldIndex === targetIndex) {
          return state;
        }
        logger.debug(`Moving row ${rowId} to index ${targetIndex}`);
        const updatedRows = [...allRows];
        updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
        return _extends({}, state, {
          rows: _extends({}, state.rows, {
            tree: _extends({}, state.rows.tree, {
              [GRID_ROOT_GROUP_ID]: _extends({}, group, {
                children: updatedRows
              })
            })
          })
        });
      });
      apiRef.current.publishEvent("rowsSet");
    }, [apiRef, logger]);
    const replaceRows = React378.useCallback((firstRowToRender, newRows) => {
      if (props.signature === GridSignature.DataGrid && newRows.length > 1) {
        throw new Error(["MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
      }
      if (newRows.length === 0) {
        return;
      }
      const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);
      if (treeDepth > 1) {
        throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");
      }
      const tree = _extends({}, gridRowTreeSelector(apiRef));
      const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));
      const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));
      const rootGroup = tree[GRID_ROOT_GROUP_ID];
      const rootGroupChildren = [...rootGroup.children];
      for (let i2 = 0; i2 < newRows.length; i2 += 1) {
        const rowModel = newRows[i2];
        const rowId = getRowIdFromRowModel(rowModel, props.getRowId, "A row was provided without id when calling replaceRows().");
        const [replacedRowId] = rootGroupChildren.splice(firstRowToRender + i2, 1, rowId);
        delete dataRowIdToModelLookup[replacedRowId];
        delete dataRowIdToIdLookup[replacedRowId];
        delete tree[replacedRowId];
        const rowTreeNodeConfig = {
          id: rowId,
          depth: 0,
          parent: GRID_ROOT_GROUP_ID,
          type: "leaf",
          groupingKey: null
        };
        dataRowIdToModelLookup[rowId] = rowModel;
        dataRowIdToIdLookup[rowId] = rowId;
        tree[rowId] = rowTreeNodeConfig;
      }
      tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
        children: rootGroupChildren
      });
      const dataRowIds = rootGroupChildren.filter((childId) => tree[childId].type === "leaf");
      apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;
      apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;
      apiRef.current.setState((state) => _extends({}, state, {
        rows: _extends({}, state.rows, {
          dataRowIdToModelLookup,
          dataRowIdToIdLookup,
          dataRowIds,
          tree
        })
      }));
      apiRef.current.publishEvent("rowsSet");
    }, [apiRef, props.signature, props.getRowId]);
    const rowApi = {
      getRow,
      getRowModels,
      getRowsCount,
      getAllRowIds,
      setRows,
      updateRows,
      getRowNode,
      getRowIndexRelativeToVisibleRows,
      unstable_replaceRows: replaceRows
    };
    const rowProApi = {
      setRowIndex,
      setRowChildrenExpansion,
      getRowGroupChildren
    };
    const groupRows = React378.useCallback(() => {
      logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
      let cache6;
      if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {
        cache6 = _extends({}, apiRef.current.caches.rows, {
          updates: {
            type: "full",
            rows: gridDataRowIdsSelector(apiRef)
          }
        });
      } else {
        cache6 = createRowsInternalCache({
          rows: props.rows,
          getRowId: props.getRowId,
          loading: props.loading,
          rowCount: props.rowCount
        });
      }
      throttledRowsChange({
        cache: cache6,
        throttle: false
      });
    }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);
    const handleStrategyProcessorChange = React378.useCallback((methodName) => {
      if (methodName === "rowTreeCreation") {
        groupRows();
      }
    }, [groupRows]);
    const handleStrategyActivityChange = React378.useCallback(() => {
      if (apiRef.current.getActiveStrategy("rowTree") !== gridRowGroupingNameSelector(apiRef)) {
        groupRows();
      }
    }, [apiRef, groupRows]);
    useGridApiEventHandler2(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
    useGridApiEventHandler2(apiRef, "strategyAvailabilityChange", handleStrategyActivityChange);
    const applyHydrateRowsProcessor = React378.useCallback(() => {
      apiRef.current.setState((state) => {
        const response = apiRef.current.unstable_applyPipeProcessors("hydrateRows", {
          tree: gridRowTreeSelector(state, apiRef.current.instanceId),
          treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),
          dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),
          dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),
          dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)
        });
        return _extends({}, state, {
          rows: _extends({}, state.rows, response, {
            totalTopLevelRowCount: getTopLevelRowCount({
              tree: response.tree,
              rowCountProp: props.rowCount
            })
          })
        });
      });
      apiRef.current.publishEvent("rowsSet");
      apiRef.current.forceUpdate();
    }, [apiRef, props.rowCount]);
    useGridRegisterPipeApplier(apiRef, "hydrateRows", applyHydrateRowsProcessor);
    useGridApiMethod2(apiRef, rowApi, "public");
    useGridApiMethod2(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? "private" : "public");
    React378.useEffect(() => {
      return () => {
        if (timeout.current !== null) {
          clearTimeout(timeout.current);
        }
      };
    }, []);
    const isFirstRender = React378.useRef(true);
    React378.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }
      const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;
      const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;
      const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;
      if (areNewRowsAlreadyInState) {
        if (!isNewLoadingAlreadyInState) {
          apiRef.current.setState((state) => _extends({}, state, {
            rows: _extends({}, state.rows, {
              loading: props.loading
            })
          }));
          apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;
          apiRef.current.forceUpdate();
        }
        if (!isNewRowCountAlreadyInState) {
          apiRef.current.setState((state) => _extends({}, state, {
            rows: _extends({}, state.rows, {
              totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),
              totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)
            })
          }));
          apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;
          apiRef.current.forceUpdate();
        }
        return;
      }
      logger.debug(`Updating all rows, new length ${props.rows.length}`);
      throttledRowsChange({
        cache: createRowsInternalCache({
          rows: props.rows,
          getRowId: props.getRowId,
          loading: props.loading,
          rowCount: props.rowCount
        }),
        throttle: false
      });
    }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js
  const createFlatRowTree = (rows3) => {
    const tree = {
      [GRID_ROOT_GROUP_ID]: _extends({}, buildRootGroup(), {
        children: rows3
      })
    };
    for (let i2 = 0; i2 < rows3.length; i2 += 1) {
      const rowId = rows3[i2];
      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: "leaf",
        groupingKey: null
      };
    }
    return {
      groupingName: GRID_DEFAULT_STRATEGY,
      tree,
      treeDepths: {
        0: rows3.length
      },
      dataRowIds: rows3
    };
  };
  const updateFlatRowTree = ({
    previousTree,
    actions
  }) => {
    const tree = _extends({}, previousTree);
    const idsToRemoveFromRootGroup = {};
    for (let i2 = 0; i2 < actions.remove.length; i2 += 1) {
      const idToDelete = actions.remove[i2];
      idsToRemoveFromRootGroup[idToDelete] = true;
      delete tree[idToDelete];
    }
    for (let i2 = 0; i2 < actions.insert.length; i2 += 1) {
      const idToInsert = actions.insert[i2];
      tree[idToInsert] = {
        id: idToInsert,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: "leaf",
        groupingKey: null
      };
    }
    const rootGroup = tree[GRID_ROOT_GROUP_ID];
    let rootGroupChildren = [...rootGroup.children, ...actions.insert];
    if (Object.values(idsToRemoveFromRootGroup).length) {
      rootGroupChildren = rootGroupChildren.filter((id) => !idsToRemoveFromRootGroup[id]);
    }
    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
      children: rootGroupChildren
    });
    return {
      groupingName: GRID_DEFAULT_STRATEGY,
      tree,
      treeDepths: {
        0: rootGroupChildren.length
      },
      dataRowIds: rootGroupChildren
    };
  };
  const flatRowTreeCreationMethod = (params) => {
    if (params.updates.type === "full") {
      return createFlatRowTree(params.updates.rows);
    }
    return updateFlatRowTree({
      previousTree: params.previousTree,
      actions: params.updates.actions
    });
  };
  const useGridRowsPreProcessors2 = (apiRef) => {
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "rowTreeCreation", flatRowTreeCreationMethod);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js
  const React377 = __toModule(require_react());
  let warnedOnceMissingColumn = false;
  function warnMissingColumn(field) {
    console.warn([`MUI: You are calling getValue('${field}') but the column \`${field}\` is not defined.`, `Instead, you can access the data from \`params.row.${field}\`.`].join("\n"));
    warnedOnceMissingColumn = true;
  }
  function useGridParamsApi2(apiRef) {
    const getColumnHeaderParams = React377.useCallback((field) => ({
      field,
      colDef: apiRef.current.getColumn(field)
    }), [apiRef]);
    const getRowParams = React377.useCallback((id) => {
      const row = apiRef.current.getRow(id);
      if (!row) {
        throw new Error(`No row with id #${id} found`);
      }
      const params = {
        id,
        columns: apiRef.current.getAllColumns(),
        row
      };
      return params;
    }, [apiRef]);
    const getBaseCellParams = React377.useCallback((id, field) => {
      const row = apiRef.current.getRow(id);
      const rowNode = apiRef.current.getRowNode(id);
      if (!row || !rowNode) {
        throw new Error(`No row with id #${id} found`);
      }
      const cellFocus = gridFocusCellSelector(apiRef);
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      const params = {
        id,
        field,
        row,
        rowNode,
        value: row[field],
        colDef: apiRef.current.getColumn(field),
        cellMode: apiRef.current.getCellMode(id, field),
        api: apiRef.current,
        hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
        tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1
      };
      return params;
    }, [apiRef]);
    const getCellParams = React377.useCallback((id, field) => {
      const colDef6 = apiRef.current.getColumn(field);
      const value = apiRef.current.getCellValue(id, field);
      const row = apiRef.current.getRow(id);
      const rowNode = apiRef.current.getRowNode(id);
      if (!row || !rowNode) {
        throw new Error(`No row with id #${id} found`);
      }
      const cellFocus = gridFocusCellSelector(apiRef);
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      const params = {
        id,
        field,
        row,
        rowNode,
        colDef: colDef6,
        cellMode: apiRef.current.getCellMode(id, field),
        hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
        tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
        value,
        formattedValue: value
      };
      if (colDef6 && colDef6.valueFormatter) {
        params.formattedValue = colDef6.valueFormatter({
          id,
          field: params.field,
          value: params.value,
          api: apiRef.current
        });
      }
      params.isEditable = colDef6 && apiRef.current.isCellEditable(params);
      return params;
    }, [apiRef]);
    const getCellValue = React377.useCallback((id, field) => {
      const colDef6 = apiRef.current.getColumn(field);
      if (true) {
        if (!colDef6 && !warnedOnceMissingColumn) {
          warnMissingColumn(field);
        }
      }
      if (!colDef6 || !colDef6.valueGetter) {
        const rowModel = apiRef.current.getRow(id);
        if (!rowModel) {
          throw new Error(`No row with id #${id} found`);
        }
        return rowModel[field];
      }
      return colDef6.valueGetter(getBaseCellParams(id, field));
    }, [apiRef, getBaseCellParams]);
    const getColumnHeaderElement = React377.useCallback((field) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);
    }, [apiRef]);
    const getRowElement = React377.useCallback((id) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridRowElement(apiRef.current.rootElementRef.current, id);
    }, [apiRef]);
    const getCellElement = React377.useCallback((id, field) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridCellElement(apiRef.current.rootElementRef.current, {
        id,
        field
      });
    }, [apiRef]);
    const paramsApi = {
      getCellValue,
      getCellParams,
      getCellElement,
      getRowParams,
      getRowElement,
      getColumnHeaderParams,
      getColumnHeaderElement
    };
    useGridApiMethod2(apiRef, paramsApi, "public");
  }

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js
  const React375 = __toModule(require_react());
  const getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {
    if (selectionModelProp == null) {
      return selectionModelProp;
    }
    if (Array.isArray(selectionModelProp)) {
      return selectionModelProp;
    }
    if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {
      return prevSelectionModel;
    }
    return [selectionModelProp];
  };
  const rowSelectionStateInitializer = (state, props) => {
    var _getSelectionModelPro;
    return _extends({}, state, {
      rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []
    });
  };
  const useGridRowSelection2 = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridSelection");
    const runIfRowSelectionIsEnabled = (callback) => (...args) => {
      if (props.rowSelection) {
        callback(...args);
      }
    };
    const propRowSelectionModel = React375.useMemo(() => {
      return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));
    }, [apiRef, props.rowSelectionModel]);
    const lastRowToggled = React375.useRef(null);
    apiRef.current.registerControlState({
      stateId: "rowSelection",
      propModel: propRowSelectionModel,
      propOnChange: props.onRowSelectionModelChange,
      stateSelector: gridRowSelectionStateSelector,
      changeEvent: "rowSelectionChange"
    });
    const {
      checkboxSelection,
      disableMultipleRowSelection,
      disableRowSelectionOnClick,
      isRowSelectable: propIsRowSelectable
    } = props;
    const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;
    const visibleRows = useGridVisibleRows2(apiRef, props);
    const expandMouseRowRangeSelection = React375.useCallback((id) => {
      var _lastRowToggled$curre;
      let endId = id;
      const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;
      const isSelected = apiRef.current.isRowSelected(id);
      if (isSelected) {
        const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);
        const startIndex = visibleRowIds.findIndex((rowId) => rowId === startId);
        const endIndex = visibleRowIds.findIndex((rowId) => rowId === endId);
        if (startIndex === endIndex) {
          return;
        }
        if (startIndex > endIndex) {
          endId = visibleRowIds[endIndex + 1];
        } else {
          endId = visibleRowIds[endIndex - 1];
        }
      }
      lastRowToggled.current = id;
      apiRef.current.selectRowRange({
        startId,
        endId
      }, !isSelected);
    }, [apiRef]);
    const setRowSelectionModel = React375.useCallback((model) => {
      if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {
        throw new Error(["MUI: `rowSelectionModel` can only contain 1 item in DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join("\n"));
      }
      const currentModel = gridRowSelectionStateSelector(apiRef.current.state);
      if (currentModel !== model) {
        logger.debug(`Setting selection model`);
        apiRef.current.setState((state) => _extends({}, state, {
          rowSelection: props.rowSelection ? model : []
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);
    const isRowSelected = React375.useCallback((id) => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);
    const isRowSelectable = React375.useCallback((id) => {
      if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {
        return false;
      }
      const rowNode = apiRef.current.getRowNode(id);
      if ((rowNode == null ? void 0 : rowNode.type) === "footer" || (rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
        return false;
      }
      return true;
    }, [apiRef, propIsRowSelectable]);
    const getSelectedRows = React375.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);
    const selectRow = React375.useCallback((id, isSelected = true, resetSelection = false) => {
      if (!apiRef.current.isRowSelectable(id)) {
        return;
      }
      lastRowToggled.current = id;
      if (resetSelection) {
        logger.debug(`Setting selection for row ${id}`);
        apiRef.current.setRowSelectionModel(isSelected ? [id] : []);
      } else {
        logger.debug(`Toggling selection for row ${id}`);
        const selection = gridRowSelectionStateSelector(apiRef.current.state);
        const newSelection = selection.filter((el) => el !== id);
        if (isSelected) {
          newSelection.push(id);
        }
        const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
        if (isSelectionValid) {
          apiRef.current.setRowSelectionModel(newSelection);
        }
      }
    }, [apiRef, logger, canHaveMultipleSelection]);
    const selectRows = React375.useCallback((ids, isSelected = true, resetSelection = false) => {
      logger.debug(`Setting selection for several rows`);
      const selectableIds = ids.filter((id) => apiRef.current.isRowSelectable(id));
      let newSelection;
      if (resetSelection) {
        newSelection = isSelected ? selectableIds : [];
      } else {
        const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));
        selectableIds.forEach((id) => {
          if (isSelected) {
            selectionLookup[id] = id;
          } else {
            delete selectionLookup[id];
          }
        });
        newSelection = Object.values(selectionLookup);
      }
      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
      if (isSelectionValid) {
        apiRef.current.setRowSelectionModel(newSelection);
      }
    }, [apiRef, logger, canHaveMultipleSelection]);
    const selectRowRange = React375.useCallback(({
      startId,
      endId
    }, isSelected = true, resetSelection = false) => {
      if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {
        return;
      }
      logger.debug(`Expanding selection from row ${startId} to row ${endId}`);
      const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);
      const startIndex = allPagesRowIds.indexOf(startId);
      const endIndex = allPagesRowIds.indexOf(endId);
      const [start2, end2] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];
      const rowsBetweenStartAndEnd = allPagesRowIds.slice(start2, end2 + 1);
      apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
    }, [apiRef, logger]);
    const selectionPublicApi = {
      selectRow,
      setRowSelectionModel,
      getSelectedRows,
      isRowSelected,
      isRowSelectable
    };
    const selectionPrivateApi = {
      selectRows,
      selectRowRange
    };
    useGridApiMethod2(apiRef, selectionPublicApi, "public");
    useGridApiMethod2(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? "private" : "public");
    const removeOutdatedSelection = React375.useCallback(() => {
      if (props.keepNonExistentRowsSelected) {
        return;
      }
      const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);
      const rowsLookup = gridRowsLookupSelector(apiRef);
      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));
      let hasChanged = false;
      currentSelection.forEach((id) => {
        if (!rowsLookup[id]) {
          delete selectionLookup[id];
          hasChanged = true;
        }
      });
      if (hasChanged) {
        apiRef.current.setRowSelectionModel(Object.values(selectionLookup));
      }
    }, [apiRef, props.keepNonExistentRowsSelected]);
    const handleSingleRowSelection = React375.useCallback((id, event) => {
      const hasCtrlKey = event.metaKey || event.ctrlKey;
      const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent2(event);
      const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
      const isSelected = apiRef.current.isRowSelected(id);
      if (resetSelection) {
        apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);
      } else {
        apiRef.current.selectRow(id, !isSelected, false);
      }
    }, [apiRef, canHaveMultipleSelection, checkboxSelection]);
    const handleRowClick = React375.useCallback((params, event) => {
      var _closest;
      if (disableRowSelectionOnClick) {
        return;
      }
      const field = (_closest = event.target.closest(`.${gridClasses7.cell}`)) == null ? void 0 : _closest.getAttribute("data-field");
      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
        return;
      }
      if (field) {
        const column = apiRef.current.getColumn(field);
        if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
          return;
        }
      }
      const rowNode = apiRef.current.getRowNode(params.id);
      if (rowNode.type === "pinnedRow") {
        return;
      }
      if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {
        expandMouseRowRangeSelection(params.id);
      } else {
        handleSingleRowSelection(params.id, event);
      }
    }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);
    const preventSelectionOnShift = React375.useCallback((params, event) => {
      if (canHaveMultipleSelection && event.shiftKey) {
        var _window$getSelection;
        (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();
      }
    }, [canHaveMultipleSelection]);
    const handleRowSelectionCheckboxChange = React375.useCallback((params, event) => {
      if (event.nativeEvent.shiftKey) {
        expandMouseRowRangeSelection(params.id);
      } else {
        apiRef.current.selectRow(params.id, params.value);
      }
    }, [apiRef, expandMouseRowRangeSelection]);
    const handleHeaderSelectionCheckboxChange = React375.useCallback((params) => {
      const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;
      const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);
      apiRef.current.selectRows(rowsToBeSelected, params.value);
    }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);
    const handleCellKeyDown = React375.useCallback((params, event) => {
      if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {
        return;
      }
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (isNavigationKey(event.key) && event.shiftKey) {
        const focusCell = gridFocusCellSelector(apiRef);
        if (focusCell && focusCell.id !== params.id) {
          event.preventDefault();
          const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);
          if (!canHaveMultipleSelection) {
            apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);
            return;
          }
          const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);
          const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);
          let start2;
          let end2;
          if (newRowIndex > previousRowIndex) {
            if (isNextRowSelected) {
              start2 = previousRowIndex;
              end2 = newRowIndex - 1;
            } else {
              start2 = previousRowIndex;
              end2 = newRowIndex;
            }
          } else {
            if (isNextRowSelected) {
              start2 = newRowIndex + 1;
              end2 = previousRowIndex;
            } else {
              start2 = newRowIndex;
              end2 = previousRowIndex;
            }
          }
          const rowsBetweenStartAndEnd = visibleRows.rows.slice(start2, end2 + 1).map((row) => row.id);
          apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
          return;
        }
      }
      if (event.key === " " && event.shiftKey) {
        event.preventDefault();
        handleSingleRowSelection(params.id, event);
        return;
      }
      if (event.key === "a" && (event.ctrlKey || event.metaKey)) {
        event.preventDefault();
        selectRows(apiRef.current.getAllRowIds(), true);
      }
    }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);
    useGridApiEventHandler2(apiRef, "sortedRowsSet", runIfRowSelectionIsEnabled(removeOutdatedSelection));
    useGridApiEventHandler2(apiRef, "rowClick", runIfRowSelectionIsEnabled(handleRowClick));
    useGridApiEventHandler2(apiRef, "rowSelectionCheckboxChange", runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));
    useGridApiEventHandler2(apiRef, "headerSelectionCheckboxChange", handleHeaderSelectionCheckboxChange);
    useGridApiEventHandler2(apiRef, "cellMouseDown", runIfRowSelectionIsEnabled(preventSelectionOnShift));
    useGridApiEventHandler2(apiRef, "cellKeyDown", runIfRowSelectionIsEnabled(handleCellKeyDown));
    React375.useEffect(() => {
      if (propRowSelectionModel !== void 0) {
        apiRef.current.setRowSelectionModel(propRowSelectionModel);
      }
    }, [apiRef, propRowSelectionModel, props.rowSelection]);
    React375.useEffect(() => {
      if (!props.rowSelection) {
        apiRef.current.setRowSelectionModel([]);
      }
    }, [apiRef, props.rowSelection]);
    const isStateControlled = propRowSelectionModel != null;
    React375.useEffect(() => {
      if (isStateControlled || !props.rowSelection) {
        return;
      }
      const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);
      if (isRowSelectable) {
        const newSelection = currentSelection.filter((id) => isRowSelectable(id));
        if (newSelection.length < currentSelection.length) {
          apiRef.current.setRowSelectionModel(newSelection);
        }
      }
    }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);
    React375.useEffect(() => {
      if (!props.rowSelection || isStateControlled) {
        return;
      }
      const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);
      if (!canHaveMultipleSelection && currentSelection.length > 1) {
        apiRef.current.setRowSelectionModel([]);
      }
    }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);
  };

  // node_modules/@mui/x-data-grid/constants/localeTextConstants.js
  const GRID_DEFAULT_LOCALE_TEXT = {
    noRowsLabel: "No rows",
    noResultsOverlayLabel: "No results found.",
    toolbarDensity: "Density",
    toolbarDensityLabel: "Density",
    toolbarDensityCompact: "Compact",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Comfortable",
    toolbarColumns: "Columns",
    toolbarColumnsLabel: "Select columns",
    toolbarFilters: "Filters",
    toolbarFiltersLabel: "Show filters",
    toolbarFiltersTooltipHide: "Hide filters",
    toolbarFiltersTooltipShow: "Show filters",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
    toolbarQuickFilterPlaceholder: "Search…",
    toolbarQuickFilterLabel: "Search",
    toolbarQuickFilterDeleteIconLabel: "Clear",
    toolbarExport: "Export",
    toolbarExportLabel: "Export",
    toolbarExportCSV: "Download as CSV",
    toolbarExportPrint: "Print",
    toolbarExportExcel: "Download as Excel",
    columnsPanelTextFieldLabel: "Find column",
    columnsPanelTextFieldPlaceholder: "Column title",
    columnsPanelDragIconLabel: "Reorder column",
    columnsPanelShowAllButton: "Show all",
    columnsPanelHideAllButton: "Hide all",
    filterPanelAddFilter: "Add filter",
    filterPanelRemoveAll: "Remove all",
    filterPanelDeleteIconLabel: "Delete",
    filterPanelLogicOperator: "Logic operator",
    filterPanelOperator: "Operator",
    filterPanelOperatorAnd: "And",
    filterPanelOperatorOr: "Or",
    filterPanelColumns: "Columns",
    filterPanelInputLabel: "Value",
    filterPanelInputPlaceholder: "Filter value",
    filterOperatorContains: "contains",
    filterOperatorEquals: "equals",
    filterOperatorStartsWith: "starts with",
    filterOperatorEndsWith: "ends with",
    filterOperatorIs: "is",
    filterOperatorNot: "is not",
    filterOperatorAfter: "is after",
    filterOperatorOnOrAfter: "is on or after",
    filterOperatorBefore: "is before",
    filterOperatorOnOrBefore: "is on or before",
    filterOperatorIsEmpty: "is empty",
    filterOperatorIsNotEmpty: "is not empty",
    filterOperatorIsAnyOf: "is any of",
    filterValueAny: "any",
    filterValueTrue: "true",
    filterValueFalse: "false",
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Show columns",
    columnMenuManageColumns: "Manage columns",
    columnMenuFilter: "Filter",
    columnMenuHideColumn: "Hide column",
    columnMenuUnsort: "Unsort",
    columnMenuSortAsc: "Sort by ASC",
    columnMenuSortDesc: "Sort by DESC",
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
    columnHeaderFiltersLabel: "Show filters",
    columnHeaderSortIconLabel: "Sort",
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rows selected` : `${count.toLocaleString()} row selected`,
    footerTotalRows: "Total Rows:",
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,
    checkboxSelectionHeaderName: "Checkbox selection",
    checkboxSelectionSelectAllRows: "Select all rows",
    checkboxSelectionUnselectAllRows: "Unselect all rows",
    checkboxSelectionSelectRow: "Select row",
    checkboxSelectionUnselectRow: "Unselect row",
    booleanCellTrueLabel: "yes",
    booleanCellFalseLabel: "no",
    actionsCellMore: "more",
    pinToLeft: "Pin to left",
    pinToRight: "Pin to right",
    unpin: "Unpin",
    treeDataGroupingHeaderName: "Group",
    treeDataExpand: "see children",
    treeDataCollapse: "hide children",
    groupingColumnHeaderName: "Group",
    groupColumn: (name) => `Group by ${name}`,
    unGroupColumn: (name) => `Stop grouping by ${name}`,
    detailPanelToggle: "Detail panel toggle",
    expandDetailPanel: "Expand",
    collapseDetailPanel: "Collapse",
    MuiTablePagination: {},
    rowReorderingHeaderName: "Row reordering",
    aggregationMenuItemHeader: "Aggregation",
    aggregationFunctionLabelSum: "sum",
    aggregationFunctionLabelAvg: "avg",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "size"
  };

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js
  const React376 = __toModule(require_react());
  const useUtilityClasses173 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return React376.useMemo(() => {
      const slots = {
        cellCheckbox: ["cellCheckbox"],
        columnHeaderCheckbox: ["columnHeaderCheckbox"]
      };
      return composeClasses2(slots, getDataGridUtilityClass, classes);
    }, [classes]);
  };
  const useGridRowSelectionPreProcessors2 = (apiRef, props) => {
    const ownerState = {
      classes: props.classes
    };
    const classes = useUtilityClasses173(ownerState);
    const updateSelectionColumn = React376.useCallback((columnsState) => {
      const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {
        cellClassName: classes.cellCheckbox,
        headerClassName: classes.columnHeaderCheckbox,
        headerName: apiRef.current.getLocaleText("checkboxSelectionHeaderName")
      });
      const shouldHaveSelectionColumn = props.checkboxSelection;
      const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;
      if (shouldHaveSelectionColumn && !haveSelectionColumn) {
        columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;
        columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.orderedFields];
      } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {
        delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];
        columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== GRID_CHECKBOX_SELECTION_FIELD);
      } else if (shouldHaveSelectionColumn && haveSelectionColumn) {
        columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);
      }
      return columnsState;
    }, [apiRef, classes, props.checkboxSelection]);
    useGridRegisterPipeProcessor(apiRef, "hydrateColumns", updateSelectionColumn);
  };

  // node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js
  const React381 = __toModule(require_react());
  const sortingStateInitializer = (state, props) => {
    var _ref, _props$sortModel, _props$initialState, _props$initialState$s;
    const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];
    return _extends({}, state, {
      sorting: {
        sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),
        sortedRows: []
      }
    });
  };
  const useGridSorting2 = (apiRef, props) => {
    var _props$initialState3, _props$initialState3$;
    const logger = useGridLogger(apiRef, "useGridSorting");
    apiRef.current.registerControlState({
      stateId: "sortModel",
      propModel: props.sortModel,
      propOnChange: props.onSortModelChange,
      stateSelector: gridSortModelSelector,
      changeEvent: "sortModelChange"
    });
    const upsertSortModel = React381.useCallback((field, sortItem) => {
      const sortModel = gridSortModelSelector(apiRef);
      const existingIdx = sortModel.findIndex((c2) => c2.field === field);
      let newSortModel = [...sortModel];
      if (existingIdx > -1) {
        if (!sortItem) {
          newSortModel.splice(existingIdx, 1);
        } else {
          newSortModel.splice(existingIdx, 1, sortItem);
        }
      } else {
        newSortModel = [...sortModel, sortItem];
      }
      return newSortModel;
    }, [apiRef]);
    const createSortItem = React381.useCallback((col, directionOverride) => {
      var _col$sortingOrder2;
      const sortModel = gridSortModelSelector(apiRef);
      const existing = sortModel.find((c2) => c2.field === col.field);
      if (existing) {
        var _col$sortingOrder;
        const nextSort = directionOverride === void 0 ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;
        return nextSort == null ? void 0 : _extends({}, existing, {
          sort: nextSort
        });
      }
      return {
        field: col.field,
        sort: directionOverride === void 0 ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride
      };
    }, [apiRef, props.sortingOrder]);
    const addColumnMenuItem = React381.useCallback((columnMenuItems, colDef6) => {
      if (colDef6 == null || colDef6.sortable === false) {
        return columnMenuItems;
      }
      const sortingOrder = colDef6.sortingOrder || props.sortingOrder;
      if (sortingOrder.some((item) => !!item)) {
        return [...columnMenuItems, "columnMenuSortItem"];
      }
      return columnMenuItems;
    }, [props.sortingOrder]);
    const applySorting = React381.useCallback(() => {
      apiRef.current.setState((state) => {
        if (props.sortingMode === "server") {
          logger.debug("Skipping sorting rows as sortingMode = server");
          return _extends({}, state, {
            sorting: _extends({}, state.sorting, {
              sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)
            })
          });
        }
        const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);
        const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);
        const sortedRows = apiRef.current.applyStrategyProcessor("sorting", {
          sortRowList
        });
        return _extends({}, state, {
          sorting: _extends({}, state.sorting, {
            sortedRows
          })
        });
      });
      apiRef.current.publishEvent("sortedRowsSet");
      apiRef.current.forceUpdate();
    }, [apiRef, logger, props.sortingMode]);
    const setSortModel = React381.useCallback((model) => {
      const currentModel = gridSortModelSelector(apiRef);
      if (currentModel !== model) {
        logger.debug(`Setting sort model`);
        apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));
        apiRef.current.forceUpdate();
        apiRef.current.applySorting();
      }
    }, [apiRef, logger, props.disableMultipleColumnsSorting]);
    const sortColumn = React381.useCallback((column, direction, allowMultipleSorting) => {
      if (!column.sortable) {
        return;
      }
      const sortItem = createSortItem(column, direction);
      let sortModel;
      if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
        sortModel = !sortItem ? [] : [sortItem];
      } else {
        sortModel = upsertSortModel(column.field, sortItem);
      }
      apiRef.current.setSortModel(sortModel);
    }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);
    const getSortModel = React381.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);
    const getSortedRows = React381.useCallback(() => {
      const sortedRows = gridSortedRowEntriesSelector(apiRef);
      return sortedRows.map((row) => row.model);
    }, [apiRef]);
    const getSortedRowIds = React381.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);
    const getRowIdFromRowIndex = React381.useCallback((index) => apiRef.current.getSortedRowIds()[index], [apiRef]);
    const sortApi = {
      getSortModel,
      getSortedRows,
      getSortedRowIds,
      getRowIdFromRowIndex,
      setSortModel,
      sortColumn,
      applySorting
    };
    useGridApiMethod2(apiRef, sortApi, "public");
    const stateExportPreProcessing = React381.useCallback((prevState, context) => {
      var _props$initialState2, _props$initialState2$;
      const sortModelToExport = gridSortModelSelector(apiRef);
      const shouldExportSortModel = !context.exportOnlyDirtyModels || props.sortModel != null || ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.sorting) == null ? void 0 : _props$initialState2$.sortModel) != null || sortModelToExport.length > 0;
      if (!shouldExportSortModel) {
        return prevState;
      }
      return _extends({}, prevState, {
        sorting: {
          sortModel: sortModelToExport
        }
      });
    }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.sorting) == null ? void 0 : _props$initialState3$.sortModel]);
    const stateRestorePreProcessing = React381.useCallback((params, context) => {
      var _context$stateToResto;
      const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;
      if (sortModel == null) {
        return params;
      }
      apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));
      return _extends({}, params, {
        callbacks: [...params.callbacks, apiRef.current.applySorting]
      });
    }, [apiRef, props.disableMultipleColumnsSorting]);
    const flatSortingMethod = React381.useCallback((params) => {
      const rowTree = gridRowTreeSelector(apiRef);
      const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];
      const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map((childId) => rowTree[childId])) : [...rootGroupNode.children];
      if (rootGroupNode.footerId != null) {
        sortedChildren.push(rootGroupNode.footerId);
      }
      return sortedChildren;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "sorting", flatSortingMethod);
    const handleColumnHeaderClick = React381.useCallback(({
      colDef: colDef6
    }, event) => {
      const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;
      sortColumn(colDef6, void 0, allowMultipleSorting);
    }, [sortColumn]);
    const handleColumnHeaderKeyDown = React381.useCallback(({
      colDef: colDef6
    }, event) => {
      if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {
        sortColumn(colDef6, void 0, event.shiftKey);
      }
    }, [sortColumn]);
    const handleColumnsChange = React381.useCallback(() => {
      const sortModel = gridSortModelSelector(apiRef);
      const latestColumns = gridColumnLookupSelector(apiRef);
      if (sortModel.length > 0) {
        const newModel = sortModel.filter((sortItem) => latestColumns[sortItem.field]);
        if (newModel.length < sortModel.length) {
          apiRef.current.setSortModel(newModel);
        }
      }
    }, [apiRef]);
    const handleStrategyProcessorChange = React381.useCallback((methodName) => {
      if (methodName === "sorting") {
        apiRef.current.applySorting();
      }
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItem);
    useGridApiEventHandler2(apiRef, "columnHeaderClick", handleColumnHeaderClick);
    useGridApiEventHandler2(apiRef, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
    useGridApiEventHandler2(apiRef, "rowsSet", apiRef.current.applySorting);
    useGridApiEventHandler2(apiRef, "columnsChange", handleColumnsChange);
    useGridApiEventHandler2(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
    useFirstRender2(() => {
      apiRef.current.applySorting();
    });
    React381.useEffect(() => {
      if (props.sortModel !== void 0) {
        apiRef.current.setSortModel(props.sortModel);
      }
    }, [apiRef, props.sortModel]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js
  const React380 = __toModule(require_react());
  function scrollIntoView(dimensions) {
    const {
      clientHeight,
      scrollTop,
      offsetHeight,
      offsetTop
    } = dimensions;
    const elementBottom = offsetTop + offsetHeight;
    if (offsetHeight > clientHeight) {
      return offsetTop;
    }
    if (elementBottom - clientHeight > scrollTop) {
      return elementBottom - clientHeight;
    }
    if (offsetTop < scrollTop) {
      return offsetTop;
    }
    return void 0;
  }
  const useGridScroll2 = (apiRef, props) => {
    const theme = useTheme3();
    const logger = useGridLogger(apiRef, "useGridScroll");
    const colRef = apiRef.current.columnHeadersElementRef;
    const virtualScrollerRef = apiRef.current.virtualScrollerRef;
    const visibleSortedRows = useGridSelector2(apiRef, gridExpandedSortedRowEntriesSelector);
    const scrollToIndexes = React380.useCallback((params) => {
      const totalRowCount = gridRowCountSelector(apiRef);
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      const scrollToHeader = params.rowIndex == null;
      if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
        return false;
      }
      logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
      let scrollCoordinates = {};
      if (params.colIndex != null) {
        const columnPositions = gridColumnPositionsSelector(apiRef);
        let cellWidth;
        if (typeof params.rowIndex !== "undefined") {
          var _visibleSortedRows$pa;
          const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;
          const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);
          if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
            cellWidth = cellColSpanInfo.cellProps.width;
          }
        }
        if (typeof cellWidth === "undefined") {
          cellWidth = visibleColumns[params.colIndex].computedWidth;
        }
        scrollCoordinates.left = scrollIntoView({
          clientHeight: virtualScrollerRef.current.clientWidth,
          scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),
          offsetHeight: cellWidth,
          offsetTop: columnPositions[params.colIndex]
        });
      }
      if (params.rowIndex != null) {
        var _querySelector, _querySelector2;
        const rowsMeta = gridRowsMetaSelector2(apiRef.current.state);
        const page = gridPageSelector(apiRef);
        const pageSize2 = gridPageSizeSelector(apiRef);
        const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize2;
        const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
        const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses7["pinnedRows--top"]}`)) == null ? void 0 : _querySelector.clientHeight) || 0;
        const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses7["pinnedRows--bottom"]}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;
        scrollCoordinates.top = scrollIntoView({
          clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,
          scrollTop: virtualScrollerRef.current.scrollTop,
          offsetHeight: targetOffsetHeight,
          offsetTop: rowsMeta.positions[elementIndex]
        });
      }
      scrollCoordinates = apiRef.current.unstable_applyPipeProcessors("scrollToIndexes", scrollCoordinates, params);
      if (typeof scrollCoordinates.left !== void 0 || typeof scrollCoordinates.top !== void 0) {
        apiRef.current.scroll(scrollCoordinates);
        return true;
      }
      return false;
    }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);
    const scroll = React380.useCallback((params) => {
      if (virtualScrollerRef.current && params.left != null && colRef.current) {
        const direction = theme.direction === "rtl" ? -1 : 1;
        colRef.current.scrollLeft = params.left;
        virtualScrollerRef.current.scrollLeft = direction * params.left;
        logger.debug(`Scrolling left: ${params.left}`);
      }
      if (virtualScrollerRef.current && params.top != null) {
        virtualScrollerRef.current.scrollTop = params.top;
        logger.debug(`Scrolling top: ${params.top}`);
      }
      logger.debug(`Scrolling, updating container, and viewport`);
    }, [virtualScrollerRef, theme.direction, colRef, logger]);
    const getScrollPosition = React380.useCallback(() => {
      if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {
        return {
          top: 0,
          left: 0
        };
      }
      return {
        top: virtualScrollerRef.current.scrollTop,
        left: virtualScrollerRef.current.scrollLeft
      };
    }, [virtualScrollerRef]);
    const scrollApi = {
      scroll,
      scrollToIndexes,
      getScrollPosition
    };
    useGridApiMethod2(apiRef, scrollApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/features/events/useGridEvents.js
  function useGridEvents2(apiRef, props) {
    useGridApiOptionHandler(apiRef, "columnHeaderClick", props.onColumnHeaderClick);
    useGridApiOptionHandler(apiRef, "columnHeaderDoubleClick", props.onColumnHeaderDoubleClick);
    useGridApiOptionHandler(apiRef, "columnHeaderOver", props.onColumnHeaderOver);
    useGridApiOptionHandler(apiRef, "columnHeaderOut", props.onColumnHeaderOut);
    useGridApiOptionHandler(apiRef, "columnHeaderEnter", props.onColumnHeaderEnter);
    useGridApiOptionHandler(apiRef, "columnHeaderLeave", props.onColumnHeaderLeave);
    useGridApiOptionHandler(apiRef, "cellClick", props.onCellClick);
    useGridApiOptionHandler(apiRef, "cellDoubleClick", props.onCellDoubleClick);
    useGridApiOptionHandler(apiRef, "cellKeyDown", props.onCellKeyDown);
    useGridApiOptionHandler(apiRef, "preferencePanelClose", props.onPreferencePanelClose);
    useGridApiOptionHandler(apiRef, "preferencePanelOpen", props.onPreferencePanelOpen);
    useGridApiOptionHandler(apiRef, "menuOpen", props.onMenuOpen);
    useGridApiOptionHandler(apiRef, "menuClose", props.onMenuClose);
    useGridApiOptionHandler(apiRef, "rowDoubleClick", props.onRowDoubleClick);
    useGridApiOptionHandler(apiRef, "rowClick", props.onRowClick);
    useGridApiOptionHandler(apiRef, "stateChange", props.onStateChange);
  }

  // node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js
  const React364 = __toModule(require_react());
  const isTestEnvironment = false;
  const hasScroll = ({
    content,
    container,
    scrollBarSize
  }) => {
    const hasScrollXIfNoYScrollBar = content.width > container.width;
    const hasScrollYIfNoXScrollBar = content.height > container.height;
    let hasScrollX = false;
    let hasScrollY = false;
    if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
      hasScrollX = hasScrollXIfNoYScrollBar;
      hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;
      if (hasScrollY) {
        hasScrollX = content.width + scrollBarSize > container.width;
      }
    }
    return {
      hasScrollX,
      hasScrollY
    };
  };
  function useGridDimensions2(apiRef, props) {
    const logger = useGridLogger(apiRef, "useResizeContainer");
    const errorShown = React364.useRef(false);
    const rootDimensionsRef = React364.useRef(null);
    const fullDimensionsRef = React364.useRef(null);
    const rowsMeta = useGridSelector2(apiRef, gridRowsMetaSelector2);
    const densityFactor = useGridSelector2(apiRef, gridDensityFactorSelector);
    const rowHeight = Math.floor(props.rowHeight * densityFactor);
    const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);
    const updateGridDimensionsRef = React364.useCallback(() => {
      var _apiRef$current$rootE;
      const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;
      const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);
      const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);
      if (!rootDimensionsRef.current) {
        return;
      }
      let scrollBarSize;
      if (props.scrollbarSize != null) {
        scrollBarSize = props.scrollbarSize;
      } else if (!columnsTotalWidth || !rootElement) {
        scrollBarSize = 0;
      } else {
        const doc = ownerDocument(rootElement);
        const scrollDiv = doc.createElement("div");
        scrollDiv.style.width = "99px";
        scrollDiv.style.height = "99px";
        scrollDiv.style.position = "absolute";
        scrollDiv.style.overflow = "scroll";
        scrollDiv.className = "scrollDiv";
        rootElement.appendChild(scrollDiv);
        scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        rootElement.removeChild(scrollDiv);
      }
      let viewportOuterSize;
      let hasScrollX;
      let hasScrollY;
      if (props.autoHeight) {
        hasScrollY = false;
        hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;
        viewportOuterSize = {
          width: rootDimensionsRef.current.width,
          height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)
        };
      } else {
        viewportOuterSize = {
          width: rootDimensionsRef.current.width,
          height: rootDimensionsRef.current.height - totalHeaderHeight
        };
        const scrollInformation = hasScroll({
          content: {
            width: Math.round(columnsTotalWidth),
            height: rowsMeta.currentPageTotalHeight
          },
          container: {
            width: viewportOuterSize.width,
            height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom
          },
          scrollBarSize
        });
        hasScrollY = scrollInformation.hasScrollY;
        hasScrollX = scrollInformation.hasScrollX;
      }
      const viewportInnerSize = {
        width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),
        height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)
      };
      const newFullDimensions = {
        viewportOuterSize,
        viewportInnerSize,
        hasScrollX,
        hasScrollY,
        scrollBarSize
      };
      const prevDimensions = fullDimensionsRef.current;
      fullDimensionsRef.current = newFullDimensions;
      if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {
        apiRef.current.publishEvent("viewportInnerSizeChange", newFullDimensions.viewportInnerSize);
      }
    }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);
    const [savedSize, setSavedSize] = React364.useState();
    const debouncedSetSavedSize = React364.useMemo(() => debounce(setSavedSize, 60), []);
    const previousSize = React364.useRef();
    useEnhancedEffect_default(() => {
      if (savedSize) {
        updateGridDimensionsRef();
        apiRef.current.publishEvent("debouncedResize", rootDimensionsRef.current);
      }
    }, [apiRef, savedSize, updateGridDimensionsRef]);
    const resize = React364.useCallback(() => {
      apiRef.current.computeSizeAndPublishResizeEvent();
    }, [apiRef]);
    const getRootDimensions = React364.useCallback(() => fullDimensionsRef.current, []);
    const getViewportPageSize = React364.useCallback(() => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return 0;
      }
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      if (props.getRowHeight) {
        const renderContext = apiRef.current.getRenderContext();
        const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
        return Math.min(viewportPageSize - 1, currentPage.rows.length);
      }
      const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);
      return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);
    }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);
    const computeSizeAndPublishResizeEvent = React364.useCallback(() => {
      var _apiRef$current$rootE2, _previousSize$current, _previousSize$current2;
      const rootEl = (_apiRef$current$rootE2 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE2.current;
      const mainEl = rootEl == null ? void 0 : rootEl.querySelector(`.${gridClasses7.main}`);
      if (!mainEl) {
        return;
      }
      const height2 = mainEl.offsetHeight || 0;
      const width2 = mainEl.offsetWidth || 0;
      const win = ownerWindow(mainEl);
      const computedStyle = win.getComputedStyle(mainEl);
      const paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
      const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
      const paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
      const paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
      const newHeight = height2 - paddingTop - paddingBottom;
      const newWidth = width2 - paddingLeft - paddingRight;
      const hasHeightChanged = newHeight !== ((_previousSize$current = previousSize.current) == null ? void 0 : _previousSize$current.height);
      const hasWidthChanged = newWidth !== ((_previousSize$current2 = previousSize.current) == null ? void 0 : _previousSize$current2.width);
      if (!previousSize.current || hasHeightChanged || hasWidthChanged) {
        const size = {
          width: newWidth,
          height: newHeight
        };
        apiRef.current.publishEvent("resize", size);
        previousSize.current = size;
      }
    }, [apiRef]);
    const dimensionsApi = {
      resize,
      getRootDimensions
    };
    const dimensionsPrivateApi = {
      getViewportPageSize,
      updateGridDimensionsRef,
      computeSizeAndPublishResizeEvent
    };
    useGridApiMethod2(apiRef, dimensionsApi, "public");
    useGridApiMethod2(apiRef, dimensionsPrivateApi, "private");
    const isFirstSizing = React364.useRef(true);
    const handleResize = React364.useCallback((size) => {
      rootDimensionsRef.current = size;
      const isJSDOM = /jsdom/.test(window.navigator.userAgent);
      if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {
        logger.error(["The parent DOM element of the data grid has an empty height.", "Please make sure that this element has an intrinsic height.", "The grid displays with a height of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
        errorShown.current = true;
      }
      if (size.width === 0 && !errorShown.current && !isJSDOM) {
        logger.error(["The parent DOM element of the data grid has an empty width.", "Please make sure that this element has an intrinsic width.", "The grid displays with a width of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
        errorShown.current = true;
      }
      if (isTestEnvironment) {
        setSavedSize(size);
        isFirstSizing.current = false;
        return;
      }
      if (isFirstSizing.current) {
        setSavedSize(size);
        isFirstSizing.current = false;
        return;
      }
      debouncedSetSavedSize(size);
    }, [props.autoHeight, debouncedSetSavedSize, logger]);
    useEnhancedEffect_default(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);
    useGridApiOptionHandler(apiRef, "sortedRowsSet", updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, "paginationModelChange", updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, "columnsChange", updateGridDimensionsRef);
    useGridApiEventHandler2(apiRef, "resize", handleResize);
    useGridApiOptionHandler(apiRef, "debouncedResize", props.onResize);
  }

  // node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js
  const React383 = __toModule(require_react());
  const ReactDOM5 = __toModule(require_react_dom());
  const jsx_runtime375 = __toModule(require_jsx_runtime());
  const _excluded252 = ["style"];
  const _excluded253 = ["style"];
  const _excluded312 = ["style"];
  function binarySearch(offset4, positions3, sliceStart = 0, sliceEnd = positions3.length) {
    if (positions3.length <= 0) {
      return -1;
    }
    if (sliceStart >= sliceEnd) {
      return sliceStart;
    }
    const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
    const itemOffset = positions3[pivot];
    return offset4 <= itemOffset ? binarySearch(offset4, positions3, sliceStart, pivot) : binarySearch(offset4, positions3, pivot + 1, sliceEnd);
  }
  function exponentialSearch(offset4, positions3, index) {
    let interval = 1;
    while (index < positions3.length && Math.abs(positions3[index]) < offset4) {
      index += interval;
      interval *= 2;
    }
    return binarySearch(offset4, positions3, Math.floor(index / 2), Math.min(index, positions3.length));
  }
  const getRenderableIndexes = ({
    firstIndex,
    lastIndex,
    buffer,
    minFirstIndex,
    maxLastIndex
  }) => {
    return [clamp5(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp5(lastIndex + buffer, minFirstIndex, maxLastIndex)];
  };
  const areRenderContextsEqual = (context1, context2) => {
    if (context1 === context2) {
      return true;
    }
    return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;
  };
  const useGridVirtualScroller2 = (props) => {
    var _currentPage$range3, _currentPage$range4;
    const apiRef = useGridPrivateApiContext2();
    const rootProps = useGridRootProps2();
    const visibleColumns = useGridSelector2(apiRef, gridVisibleColumnDefinitionsSelector);
    const {
      ref,
      disableVirtualization,
      onRenderZonePositioning,
      renderZoneMinColumnIndex = 0,
      renderZoneMaxColumnIndex = visibleColumns.length,
      getRowProps
    } = props;
    const theme = useTheme3();
    const columnPositions = useGridSelector2(apiRef, gridColumnPositionsSelector);
    const columnsTotalWidth = useGridSelector2(apiRef, gridColumnsTotalWidthSelector);
    const cellFocus = useGridSelector2(apiRef, gridFocusCellSelector);
    const cellTabIndex = useGridSelector2(apiRef, gridTabIndexCellSelector);
    const rowsMeta = useGridSelector2(apiRef, gridRowsMetaSelector2);
    const selectedRowsLookup = useGridSelector2(apiRef, selectedIdsLookupSelector);
    const currentPage = useGridVisibleRows2(apiRef, rootProps);
    const renderZoneRef = React383.useRef(null);
    const rootRef = React383.useRef(null);
    const handleRef = useForkRef(ref, rootRef);
    const [renderContext, setRenderContext] = React383.useState(null);
    const prevRenderContext = React383.useRef(renderContext);
    const scrollPosition = React383.useRef({
      top: 0,
      left: 0
    });
    const [containerDimensions, setContainerDimensions] = React383.useState({
      width: null,
      height: null
    });
    const prevTotalWidth = React383.useRef(columnsTotalWidth);
    const rowStyleCache = React383.useRef({});
    const prevGetRowProps = React383.useRef();
    const prevRootRowStyle = React383.useRef();
    const getRenderedColumnsRef = React383.useRef(defaultMemoize((columns6, firstColumnToRender, lastColumnToRender) => {
      return columns6.slice(firstColumnToRender, lastColumnToRender);
    }));
    const getNearestIndexToRender = React383.useCallback((offset4) => {
      var _currentPage$range, _currentPage$range2;
      const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();
      let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;
      if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {
        allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;
      }
      const lastMeasuredIndexRelativeToCurrentPage = clamp5(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);
      if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset4) {
        return binarySearch(offset4, rowsMeta.positions);
      }
      return exponentialSearch(offset4, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);
    }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);
    const computeRenderContext = React383.useCallback(() => {
      if (disableVirtualization) {
        return {
          firstRowIndex: 0,
          lastRowIndex: currentPage.rows.length,
          firstColumnIndex: 0,
          lastColumnIndex: visibleColumns.length
        };
      }
      const {
        top: top3,
        left: left3
      } = scrollPosition.current;
      const firstRowIndex = Math.min(getNearestIndexToRender(top3), rowsMeta.positions.length - 1);
      const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top3 + containerDimensions.height);
      let hasRowWithAutoHeight = false;
      let firstColumnIndex = 0;
      let lastColumnIndex = columnPositions.length;
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: firstRowIndex,
        lastIndex: lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      for (let i2 = firstRowToRender; i2 < lastRowToRender && !hasRowWithAutoHeight; i2 += 1) {
        const row = currentPage.rows[i2];
        hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);
      }
      if (!hasRowWithAutoHeight) {
        firstColumnIndex = binarySearch(Math.abs(left3), columnPositions);
        lastColumnIndex = binarySearch(Math.abs(left3) + containerDimensions.width, columnPositions);
      }
      return {
        firstRowIndex,
        lastRowIndex,
        firstColumnIndex,
        lastColumnIndex
      };
    }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);
    useEnhancedEffect_default(() => {
      if (disableVirtualization) {
        renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;
      } else {
        rootRef.current.scrollLeft = 0;
        rootRef.current.scrollTop = 0;
      }
    }, [disableVirtualization]);
    useEnhancedEffect_default(() => {
      setContainerDimensions({
        width: rootRef.current.clientWidth,
        height: rootRef.current.clientHeight
      });
    }, [rowsMeta.currentPageTotalHeight]);
    const handleResize = React383.useCallback(() => {
      if (rootRef.current) {
        setContainerDimensions({
          width: rootRef.current.clientWidth,
          height: rootRef.current.clientHeight
        });
      }
    }, []);
    useGridApiEventHandler2(apiRef, "debouncedResize", handleResize);
    const updateRenderZonePosition = React383.useCallback((nextRenderContext) => {
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const [initialFirstColumnToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: renderZoneMinColumnIndex,
        maxLastIndex: renderZoneMaxColumnIndex,
        buffer: rootProps.columnBuffer
      });
      const firstColumnToRender = getFirstNonSpannedColumnToRender({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const direction = theme.direction === "ltr" ? 1 : -1;
      const top3 = gridRowsMetaSelector2(apiRef.current.state).positions[firstRowToRender];
      const left3 = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender];
      renderZoneRef.current.style.transform = `translate3d(${left3}px, ${top3}px, 0px)`;
      if (typeof onRenderZonePositioning === "function") {
        onRenderZonePositioning({
          top: top3,
          left: left3
        });
      }
    }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);
    const updateRenderContext = React383.useCallback((nextRenderContext) => {
      if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {
        updateRenderZonePosition(nextRenderContext);
        return;
      }
      setRenderContext(nextRenderContext);
      updateRenderZonePosition(nextRenderContext);
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      apiRef.current.publishEvent("renderedRowsIntervalChange", {
        firstRowToRender,
        lastRowToRender
      });
      prevRenderContext.current = nextRenderContext;
    }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);
    useEnhancedEffect_default(() => {
      if (containerDimensions.width == null) {
        return;
      }
      const initialRenderContext = computeRenderContext();
      updateRenderContext(initialRenderContext);
      const {
        top: top3,
        left: left3
      } = scrollPosition.current;
      const params = {
        top: top3,
        left: left3,
        renderContext: initialRenderContext
      };
      apiRef.current.publishEvent("scrollPositionChange", params);
    }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);
    const handleScroll = (event) => {
      const {
        scrollTop,
        scrollLeft: scrollLeft3
      } = event.currentTarget;
      scrollPosition.current.top = scrollTop;
      scrollPosition.current.left = scrollLeft3;
      if (!prevRenderContext.current || scrollTop < 0) {
        return;
      }
      if (theme.direction === "ltr") {
        if (scrollLeft3 < 0) {
          return;
        }
      }
      if (theme.direction === "rtl") {
        if (scrollLeft3 > 0) {
          return;
        }
      }
      const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();
      const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);
      const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);
      const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);
      const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);
      const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;
      apiRef.current.publishEvent("scrollPositionChange", {
        top: scrollTop,
        left: scrollLeft3,
        renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current
      }, event);
      if (shouldSetState) {
        ReactDOM5.flushSync(() => {
          updateRenderContext(nextRenderContext);
        });
        prevTotalWidth.current = columnsTotalWidth;
      }
    };
    const handleWheel = (event) => {
      apiRef.current.publishEvent("virtualScrollerWheel", {}, event);
    };
    const handleTouchMove = (event) => {
      apiRef.current.publishEvent("virtualScrollerTouchMove", {}, event);
    };
    const getRows = (params = {
      renderContext
    }) => {
      var _rootProps$slotProps;
      const {
        onRowRender,
        renderContext: nextRenderContext,
        minFirstColumn = renderZoneMinColumnIndex,
        maxLastColumn = renderZoneMaxColumnIndex,
        availableSpace = containerDimensions.width,
        rowIndexOffset = 0,
        position: position2 = "center"
      } = params;
      if (!nextRenderContext || availableSpace == null) {
        return null;
      }
      const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;
      const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rowBuffer
      });
      const renderedRows = [];
      if (params.rows) {
        params.rows.forEach((row) => {
          renderedRows.push(row);
          apiRef.current.calculateColSpan({
            rowId: row.id,
            minFirstColumn,
            maxLastColumn,
            columns: visibleColumns
          });
        });
      } else {
        if (!currentPage.range) {
          return null;
        }
        for (let i2 = firstRowToRender; i2 < lastRowToRender; i2 += 1) {
          const row = currentPage.rows[i2];
          renderedRows.push(row);
          apiRef.current.calculateColSpan({
            rowId: row.id,
            minFirstColumn,
            maxLastColumn,
            columns: visibleColumns
          });
        }
      }
      const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: minFirstColumn,
        maxLastIndex: maxLastColumn,
        buffer: columnBuffer
      });
      const firstColumnToRender = getFirstNonSpannedColumnToRender({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);
      const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {}, {
        style: rootRowStyle
      } = _ref, rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded252);
      const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;
      if (invalidatesCachedRowStyle) {
        rowStyleCache.current = {};
      }
      const rows3 = [];
      for (let i2 = 0; i2 < renderedRows.length; i2 += 1) {
        var _currentPage$range5;
        const {
          id,
          model
        } = renderedRows[i2];
        const lastVisibleRowIndex = firstRowToRender + i2 === currentPage.rows.length - 1;
        const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : "auto";
        let isSelected;
        if (selectedRowsLookup[id] == null) {
          isSelected = false;
        } else {
          isSelected = apiRef.current.isRowSelectable(id);
        }
        if (onRowRender) {
          onRowRender(id);
        }
        const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;
        let tabbableCell = null;
        if (cellTabIndex !== null && cellTabIndex.id === id) {
          const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);
          tabbableCell = cellParams.cellMode === "view" ? cellTabIndex.field : null;
        }
        const _ref2 = typeof getRowProps === "function" && getRowProps(id, model) || {}, {
          style: rowStyle
        } = _ref2, rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded253);
        if (!rowStyleCache.current[id]) {
          const style16 = _extends({}, rowStyle, rootRowStyle);
          rowStyleCache.current[id] = style16;
        }
        rows3.push(jsx_runtime375.jsx(rootProps.slots.row, _extends({
          row: model,
          rowId: id,
          rowHeight: baseRowHeight,
          focusedCell,
          tabbableCell,
          renderedColumns,
          visibleColumns,
          firstColumnToRender,
          lastColumnToRender,
          selected: isSelected,
          index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i2,
          containerWidth: availableSpace,
          isLastVisible: lastVisibleRowIndex,
          position: position2
        }, rowProps, rootRowProps, {
          style: rowStyleCache.current[id]
        }), id));
      }
      prevGetRowProps.current = getRowProps;
      prevRootRowStyle.current = rootRowStyle;
      return rows3;
    };
    const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;
    const contentSize = React383.useMemo(() => {
      const height2 = Math.max(rowsMeta.currentPageTotalHeight, 1);
      let shouldExtendContent = false;
      if (rootRef != null && rootRef.current && height2 <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {
        shouldExtendContent = true;
      }
      const size = {
        width: needsHorizontalScrollbar ? columnsTotalWidth : "auto",
        height: height2,
        minHeight: shouldExtendContent ? "100%" : "auto"
      };
      return size;
    }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar]);
    React383.useEffect(() => {
      apiRef.current.publishEvent("virtualScrollerContentSizeChange");
    }, [apiRef, contentSize]);
    if (rootProps.autoHeight && currentPage.rows.length === 0) {
      contentSize.height = getMinimalContentHeight(apiRef, rootProps.rowHeight);
    }
    const rootStyle = {};
    if (!needsHorizontalScrollbar) {
      rootStyle.overflowX = "hidden";
    }
    if (rootProps.autoHeight) {
      rootStyle.overflowY = "hidden";
    }
    const getRenderContext = React383.useCallback(() => {
      return prevRenderContext.current;
    }, []);
    apiRef.current.register("private", {
      getRenderContext
    });
    return {
      renderContext,
      updateRenderZonePosition,
      getRows,
      getRootProps: (_ref3 = {}) => {
        let {
          style: style16 = {}
        } = _ref3, other = _objectWithoutPropertiesLoose(_ref3, _excluded312);
        return _extends({
          ref: handleRef,
          onScroll: handleScroll,
          onWheel: handleWheel,
          onTouchMove: handleTouchMove,
          style: _extends({}, style16, rootStyle)
        }, other);
      },
      getContentProps: ({
        style: style16 = {}
      } = {}) => ({
        style: _extends({}, style16, contentSize)
      }),
      getRenderZoneProps: () => ({
        ref: renderZoneRef
      })
    };
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnGroupHeader.js
  const React295 = __toModule(require_react());
  const jsx_runtime301 = __toModule(require_jsx_runtime());
  const useUtilityClasses147 = (ownerState) => {
    const {
      classes,
      headerAlign,
      isDragging,
      showColumnBorder,
      groupId
    } = ownerState;
    const slots = {
      root: ["columnHeader", headerAlign === "left" && "columnHeader--alignLeft", headerAlign === "center" && "columnHeader--alignCenter", headerAlign === "right" && "columnHeader--alignRight", isDragging && "columnHeader--moving", showColumnBorder && "columnHeader--showColumnBorder", showColumnBorder && "columnHeader--withRightBorder", "withBorderColor", groupId === null ? "columnHeader--emptyGroup" : "columnHeader--filledGroup"],
      draggableContainer: ["columnHeaderDraggableContainer"],
      titleContainer: ["columnHeaderTitleContainer", "withBorderColor"],
      titleContainerContent: ["columnHeaderTitleContainerContent"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnGroupHeader(props) {
    var _columnGroupsLookup$g;
    const {
      groupId,
      width: width2,
      depth,
      maxDepth,
      fields,
      height: height2,
      colIndex,
      hasFocus,
      tabIndex,
      isLastColumn
    } = props;
    const rootProps = useGridRootProps2();
    const headerCellRef = React295.useRef(null);
    const apiRef = useGridApiContext2();
    const columnGroupsLookup = useGridSelector2(apiRef, gridColumnGroupsLookupSelector);
    const group = groupId ? columnGroupsLookup[groupId] : {};
    const {
      headerName = groupId != null ? groupId : "",
      description = "",
      headerAlign = void 0
    } = group;
    let headerComponent;
    const render = groupId && ((_columnGroupsLookup$g = columnGroupsLookup[groupId]) == null ? void 0 : _columnGroupsLookup$g.renderHeaderGroup);
    const renderParams = React295.useMemo(() => ({
      groupId,
      headerName,
      description,
      depth,
      maxDepth,
      fields,
      colIndex,
      isLastColumn
    }), [groupId, headerName, description, depth, maxDepth, fields, colIndex, isLastColumn]);
    if (groupId && render) {
      headerComponent = render(renderParams);
    }
    const showColumnBorder = rootProps.showColumnVerticalBorder;
    const ownerState = _extends({}, props, {
      classes: rootProps.classes,
      showColumnBorder,
      headerAlign,
      depth,
      isDragging: false
    });
    const label = headerName != null ? headerName : groupId;
    const id = useId();
    const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;
    const classes = useUtilityClasses147(ownerState);
    React295.useLayoutEffect(() => {
      if (hasFocus) {
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null ? void 0 : elementToFocus.focus();
      }
    }, [apiRef, hasFocus]);
    const publish = React295.useCallback((eventName) => (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      apiRef.current.publishEvent(eventName, renderParams, event);
    }, [apiRef, renderParams]);
    const mouseEventsHandlers = React295.useMemo(() => ({
      onKeyDown: publish("columnGroupHeaderKeyDown"),
      onFocus: publish("columnGroupHeaderFocus"),
      onBlur: publish("columnGroupHeaderBlur")
    }), [publish]);
    const headerClassName = typeof group.headerClassName === "function" ? group.headerClassName(renderParams) : group.headerClassName;
    return jsx_runtime301.jsx(GridGenericColumnHeaderItem2, _extends({
      ref: headerCellRef,
      classes,
      columnMenuOpen: false,
      colIndex,
      height: height2,
      isResizing: false,
      sortDirection: null,
      hasFocus: false,
      tabIndex,
      isDraggable: false,
      headerComponent,
      headerClassName,
      description,
      elementId,
      width: width2,
      columnMenuIconButton: null,
      columnTitleIconButtons: null,
      resizable: false,
      label,
      "aria-colspan": fields.length,
      "data-fields": `|-${fields.join("-|-")}-|`
    }, mouseEventsHandlers));
  }

  // node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js
  const React358 = __toModule(require_react());
  const ReactDOM4 = __toModule(require_react_dom());
  const jsx_runtime370 = __toModule(require_jsx_runtime());
  const GridColumnHeaderRow = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaderRow",
    overridesResolver: (props, styles30) => styles30.columnHeaderRow
  })(() => ({
    display: "flex"
  }));
  function isUIEvent(event) {
    return !!event.target;
  }
  const useGridColumnHeaders2 = (props) => {
    const {
      innerRef: innerRefProp,
      minColumnIndex = 0,
      visibleColumns,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      densityFactor,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence
    } = props;
    const theme = useTheme_default();
    const [dragCol, setDragCol] = React358.useState("");
    const [resizeCol, setResizeCol] = React358.useState("");
    const apiRef = useGridPrivateApiContext2();
    const rootProps = useGridRootProps2();
    const innerRef = React358.useRef(null);
    const handleInnerRef = useForkRef(innerRefProp, innerRef);
    const [renderContext, setRenderContext] = React358.useState(null);
    const prevRenderContext = React358.useRef(renderContext);
    const prevScrollLeft = React358.useRef(0);
    const currentPage = useGridVisibleRows2(apiRef, rootProps);
    const totalHeaderHeight = getTotalHeaderHeight(apiRef, rootProps.columnHeaderHeight);
    const headerHeight = Math.floor(rootProps.columnHeaderHeight * densityFactor);
    React358.useEffect(() => {
      apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
    }, [apiRef]);
    const getFirstColumnIndexToRenderRef = React358.useRef(defaultMemoize(getFirstColumnIndexToRender, {
      equalityCheck: (a2, b2) => ["firstColumnIndex", "minColumnIndex", "columnBuffer"].every((key) => a2[key] === b2[key])
    }));
    const updateInnerPosition = React358.useCallback((nextRenderContext) => {
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
        firstColumnIndex: nextRenderContext.firstColumnIndex,
        minColumnIndex,
        columnBuffer: rootProps.columnBuffer,
        firstRowToRender,
        lastRowToRender,
        apiRef,
        visibleRows: currentPage.rows
      });
      const direction = theme.direction === "ltr" ? 1 : -1;
      const offset4 = firstColumnToRender > 0 ? prevScrollLeft.current - direction * columnPositions[firstColumnToRender] : prevScrollLeft.current;
      innerRef.current.style.transform = `translate3d(${-offset4}px, 0px, 0px)`;
    }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer, theme.direction]);
    React358.useLayoutEffect(() => {
      if (renderContext) {
        updateInnerPosition(renderContext);
      }
    }, [renderContext, updateInnerPosition]);
    const handleScroll = React358.useCallback(({
      left: left3,
      renderContext: nextRenderContext = null
    }, event) => {
      var _prevRenderContext$cu, _prevRenderContext$cu2;
      if (!innerRef.current) {
        return;
      }
      if (prevScrollLeft.current === left3 && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {
        return;
      }
      prevScrollLeft.current = left3;
      let canUpdateInnerPosition = false;
      if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {
        if (isUIEvent(event)) {
          ReactDOM4.flushSync(() => {
            setRenderContext(nextRenderContext);
          });
          canUpdateInnerPosition = true;
        } else {
          setRenderContext(nextRenderContext);
        }
        prevRenderContext.current = nextRenderContext;
      } else {
        canUpdateInnerPosition = true;
      }
      if (nextRenderContext && canUpdateInnerPosition) {
        updateInnerPosition(nextRenderContext);
      }
    }, [updateInnerPosition]);
    const handleColumnResizeStart = React358.useCallback((params) => setResizeCol(params.field), []);
    const handleColumnResizeStop = React358.useCallback(() => setResizeCol(""), []);
    const handleColumnReorderStart = React358.useCallback((params) => setDragCol(params.field), []);
    const handleColumnReorderStop = React358.useCallback(() => setDragCol(""), []);
    useGridApiEventHandler2(apiRef, "columnResizeStart", handleColumnResizeStart);
    useGridApiEventHandler2(apiRef, "columnResizeStop", handleColumnResizeStop);
    useGridApiEventHandler2(apiRef, "columnHeaderDragStart", handleColumnReorderStart);
    useGridApiEventHandler2(apiRef, "columnHeaderDragEnd", handleColumnReorderStop);
    useGridApiEventHandler2(apiRef, "scrollPositionChange", handleScroll);
    const getColumnsToRender = (params) => {
      const {
        renderContext: nextRenderContext = renderContext,
        minFirstColumn = minColumnIndex,
        maxLastColumn = visibleColumns.length
      } = params || {};
      if (!nextRenderContext) {
        return null;
      }
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
        firstColumnIndex: nextRenderContext.firstColumnIndex,
        minColumnIndex: minFirstColumn,
        columnBuffer: rootProps.columnBuffer,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);
      const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
      return {
        renderedColumns,
        firstColumnToRender,
        lastColumnToRender,
        minFirstColumn,
        maxLastColumn
      };
    };
    const getColumnHeaders = (params, other = {}) => {
      const columnsToRender = getColumnsToRender(params);
      if (columnsToRender == null) {
        return null;
      }
      const {
        renderedColumns,
        firstColumnToRender
      } = columnsToRender;
      const columns6 = [];
      for (let i2 = 0; i2 < renderedColumns.length; i2 += 1) {
        const colDef6 = renderedColumns[i2];
        const columnIndex = firstColumnToRender + i2;
        const isFirstColumn = columnIndex === 0;
        const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef6.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;
        const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef6.field;
        const open = columnMenuState.open && columnMenuState.field === colDef6.field;
        columns6.push(jsx_runtime370.jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef6.field], {
          columnMenuOpen: open,
          filterItemsCounter: filterColumnLookup[colDef6.field] && filterColumnLookup[colDef6.field].length,
          headerHeight,
          isDragging: colDef6.field === dragCol,
          colDef: colDef6,
          colIndex: columnIndex,
          isResizing: resizeCol === colDef6.field,
          hasFocus,
          tabIndex
        }, other), colDef6.field));
      }
      return jsx_runtime370.jsx(GridColumnHeaderRow, {
        role: "row",
        "aria-rowindex": headerGroupingMaxDepth + 1,
        ownerState: rootProps,
        children: columns6
      });
    };
    const getColumnGroupHeaders = (params) => {
      if (headerGroupingMaxDepth === 0) {
        return null;
      }
      const columnsToRender = getColumnsToRender(params);
      if (columnsToRender == null || columnsToRender.renderedColumns.length === 0) {
        return null;
      }
      const {
        firstColumnToRender,
        lastColumnToRender
      } = columnsToRender;
      const columns6 = [];
      const headerToRender = [];
      for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {
        var _apiRef$current$unsta, _apiRef$current$unsta2;
        const rowStructure = columnGroupsHeaderStructure[depth];
        const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;
        const firstGroupToRender = (_apiRef$current$unsta = apiRef.current.unstable_getColumnGroupPath(firstColumnFieldToRender)[depth]) != null ? _apiRef$current$unsta : null;
        const firstGroupIndex = rowStructure.findIndex(({
          groupId,
          columnFields
        }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));
        const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;
        const lastGroupToRender = (_apiRef$current$unsta2 = apiRef.current.unstable_getColumnGroupPath(lastColumnFieldToRender)[depth]) != null ? _apiRef$current$unsta2 : null;
        const lastGroupIndex = rowStructure.findIndex(({
          groupId,
          columnFields
        }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));
        const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map((groupStructure) => {
          return _extends({}, groupStructure, {
            columnFields: groupStructure.columnFields.filter((field) => columnVisibility[field] !== false)
          });
        }).filter((groupStructure) => groupStructure.columnFields.length > 0);
        const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);
        const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);
        const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {
          var _column$computedWidth;
          const column = apiRef.current.getColumn(field);
          return acc + ((_column$computedWidth = column.computedWidth) != null ? _column$computedWidth : 0);
        }, 0);
        let columnIndex = firstColumnToRender;
        const elements = visibleColumnGroupHeader.map(({
          groupId,
          columnFields
        }) => {
          const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);
          const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;
          const headerInfo = {
            groupId,
            width: columnFields.map((field) => apiRef.current.getColumn(field).computedWidth).reduce((acc, val) => acc + val, 0),
            fields: columnFields,
            colIndex: columnIndex,
            hasFocus,
            tabIndex
          };
          columnIndex += columnFields.length;
          return headerInfo;
        });
        headerToRender.push({
          leftOverflow,
          elements
        });
      }
      headerToRender.forEach((depthInfo, depthIndex) => {
        columns6.push(jsx_runtime370.jsx(GridColumnHeaderRow, {
          style: {
            height: `${headerHeight}px`,
            transform: `translateX(-${depthInfo.leftOverflow}px)`
          },
          role: "row",
          "aria-rowindex": depthIndex + 1,
          ownerState: rootProps,
          children: depthInfo.elements.map(({
            groupId,
            width: width2,
            fields,
            colIndex,
            hasFocus,
            tabIndex
          }, groupIndex) => {
            return jsx_runtime370.jsx(GridColumnGroupHeader, {
              groupId,
              width: width2,
              fields,
              colIndex,
              depth: depthIndex,
              isLastColumn: colIndex === visibleColumns.length - fields.length,
              maxDepth: headerToRender.length,
              height: headerHeight,
              hasFocus,
              tabIndex
            }, groupIndex);
          })
        }, depthIndex));
      });
      return columns6;
    };
    const rootStyle = {
      minHeight: totalHeaderHeight,
      maxHeight: totalHeaderHeight,
      lineHeight: `${headerHeight}px`
    };
    return {
      renderContext,
      getColumnHeaders,
      getColumnGroupHeaders,
      isDragging: !!dragCol,
      getRootProps: (other = {}) => _extends({
        style: rootStyle
      }, other),
      getInnerProps: () => ({
        ref: handleInnerRef,
        role: "rowgroup"
      })
    };
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridBaseColumnHeaders.js
  const React294 = __toModule(require_react());
  const jsx_runtime300 = __toModule(require_jsx_runtime());
  const _excluded190 = ["className"];
  const useUtilityClasses146 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeaders", "withBorderColor"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridColumnHeadersRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaders",
    overridesResolver: (props, styles30) => styles30.columnHeaders
  })({
    position: "relative",
    overflow: "hidden",
    display: "flex",
    alignItems: "center",
    boxSizing: "border-box",
    borderBottom: "1px solid",
    borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
    borderTopRightRadius: "var(--unstable_DataGrid-radius)"
  });
  const GridBaseColumnHeaders2 = React294.forwardRef(function GridColumnHeaders4(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded190);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses146(rootProps);
    return jsx_runtime300.jsx(GridColumnHeadersRoot, _extends({
      ref,
      className: clsx_m_default(className3, classes.root),
      ownerState: rootProps
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeadersInner.js
  const React301 = __toModule(require_react());
  const jsx_runtime310 = __toModule(require_jsx_runtime());
  const _excluded193 = ["isDragging", "className"];
  const useUtilityClasses153 = (ownerState) => {
    const {
      isDragging,
      hasScrollX,
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeadersInner", isDragging && "columnHeaderDropZone", hasScrollX && "columnHeadersInner--scrollable"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const GridColumnHeadersInnerRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "columnHeadersInner",
    overridesResolver: (props, styles30) => [{
      [`&.${gridClasses7.columnHeaderDropZone}`]: styles30.columnHeaderDropZone
    }, styles30.columnHeadersInner]
  })(() => ({
    display: "flex",
    alignItems: "flex-start",
    flexDirection: "column",
    [`&.${gridClasses7.columnHeaderDropZone} .${gridClasses7.columnHeaderDraggableContainer}`]: {
      cursor: "move"
    },
    [`&.${gridClasses7["columnHeadersInner--scrollable"]} .${gridClasses7.columnHeader}:last-child`]: {
      borderRight: "none"
    }
  }));
  const GridColumnHeadersInner2 = React301.forwardRef(function GridColumnHeadersInner3(props, ref) {
    var _apiRef$current$getRo, _apiRef$current$getRo2;
    const {
      isDragging,
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded193);
    const apiRef = useGridApiContext2();
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, rootProps, {
      isDragging,
      hasScrollX: (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.hasScrollX) != null ? _apiRef$current$getRo : false
    });
    const classes = useUtilityClasses153(ownerState);
    return jsx_runtime310.jsx(GridColumnHeadersInnerRoot, _extends({
      ref,
      className: clsx_m_default(className3, classes.root),
      ownerState
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/GridColumnHeaders.js
  const React270 = __toModule(require_react());
  const prop_types185 = __toModule(require_prop_types7());
  const jsx_runtime269 = __toModule(require_jsx_runtime());
  const jsx_runtime270 = __toModule(require_jsx_runtime());
  const _excluded177 = ["innerRef", "className", "visibleColumns", "sortColumnLookup", "filterColumnLookup", "columnPositions", "columnHeaderTabIndexState", "columnGroupHeaderTabIndexState", "columnHeaderFocus", "columnGroupHeaderFocus", "densityFactor", "headerGroupingMaxDepth", "columnMenuState", "columnVisibility", "columnGroupsHeaderStructure", "hasOtherElementInTabSequence"];
  const GridColumnHeaders = React270.forwardRef(function GridColumnsHeaders(props, ref) {
    const {
      innerRef,
      visibleColumns,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      densityFactor,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded177);
    const {
      isDragging,
      getRootProps,
      getInnerProps,
      getColumnHeaders,
      getColumnGroupHeaders
    } = useGridColumnHeaders2({
      innerRef,
      visibleColumns,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      densityFactor,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence
    });
    return jsx_runtime270.jsxs(GridBaseColumnHeaders2, _extends({
      ref
    }, getRootProps(other), {
      children: [jsx_runtime269.jsx(GridScrollArea2, {
        scrollDirection: "left"
      }), jsx_runtime270.jsxs(GridColumnHeadersInner2, _extends({
        isDragging
      }, getInnerProps(), {
        children: [getColumnGroupHeaders(), getColumnHeaders()]
      })), jsx_runtime269.jsx(GridScrollArea2, {
        scrollDirection: "right"
      })]
    }));
  });
  GridColumnHeaders.propTypes = {
    columnGroupHeaderFocus: prop_types185.default.shape({
      depth: prop_types185.default.number.isRequired,
      field: prop_types185.default.string.isRequired
    }),
    columnGroupHeaderTabIndexState: prop_types185.default.shape({
      depth: prop_types185.default.number.isRequired,
      field: prop_types185.default.string.isRequired
    }),
    columnGroupsHeaderStructure: prop_types185.default.arrayOf(prop_types185.default.arrayOf(prop_types185.default.shape({
      columnFields: prop_types185.default.arrayOf(prop_types185.default.string).isRequired,
      groupId: prop_types185.default.string
    }))).isRequired,
    columnHeaderFocus: prop_types185.default.shape({
      field: prop_types185.default.string.isRequired
    }),
    columnHeaderTabIndexState: prop_types185.default.shape({
      field: prop_types185.default.string.isRequired
    }),
    columnMenuState: prop_types185.default.shape({
      field: prop_types185.default.string,
      open: prop_types185.default.bool.isRequired
    }).isRequired,
    columnPositions: prop_types185.default.arrayOf(prop_types185.default.number).isRequired,
    columnVisibility: prop_types185.default.object.isRequired,
    densityFactor: prop_types185.default.number.isRequired,
    filterColumnLookup: prop_types185.default.object.isRequired,
    hasOtherElementInTabSequence: prop_types185.default.bool.isRequired,
    headerGroupingMaxDepth: prop_types185.default.number.isRequired,
    innerRef: prop_types185.default.oneOfType([prop_types185.default.func, prop_types185.default.shape({
      current: prop_types185.default.object
    })]),
    minColumnIndex: prop_types185.default.number,
    sortColumnLookup: prop_types185.default.object.isRequired,
    visibleColumns: prop_types185.default.arrayOf(prop_types185.default.object).isRequired
  };

  // node_modules/@mui/x-data-grid/components/GridNoResultsOverlay.js
  const React274 = __toModule(require_react());
  const jsx_runtime276 = __toModule(require_jsx_runtime());
  const GridNoResultsOverlay = React274.forwardRef(function GridNoResultsOverlay3(props, ref) {
    const apiRef = useGridApiContext2();
    const noResultsOverlayLabel = apiRef.current.getLocaleText("noResultsOverlayLabel");
    return jsx_runtime276.jsx(GridOverlay2, _extends({
      ref
    }, props, {
      children: noResultsOverlayLabel
    }));
  });

  // node_modules/@mui/x-data-grid/material/icons/GridColumnUnsortedIcon.js
  const React396 = __toModule(require_react());
  const jsx_runtime377 = __toModule(require_jsx_runtime());
  const _excluded255 = ["sortingOrder"];
  const GridColumnUnsortedIcon = React396.memo(function GridColumnHeaderSortIcon3(props) {
    const {
      sortingOrder
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded255);
    const rootProps = useGridRootProps2();
    const [nextSortDirection] = sortingOrder;
    const Icon4 = nextSortDirection === "asc" ? rootProps.slots.columnSortedAscendingIcon : rootProps.slots.columnSortedDescendingIcon;
    return Icon4 ? jsx_runtime377.jsx(Icon4, _extends({}, other)) : null;
  });

  // node_modules/@mui/x-data-grid/material/components/MUISelectOption.js
  const React395 = __toModule(require_react());
  const jsx_runtime376 = __toModule(require_jsx_runtime());
  const _excluded254 = ["native"];
  function MUISelectOption(_ref) {
    let {
      native
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded254);
    if (native) {
      return jsx_runtime376.jsx("option", _extends({}, props));
    }
    return jsx_runtime376.jsx(MenuItem_default, _extends({}, props));
  }

  // node_modules/@mui/x-data-grid/material/index.js
  const iconSlots = {
    BooleanCellTrueIcon: GridCheckIcon,
    BooleanCellFalseIcon: GridCloseIcon,
    ColumnMenuIcon: GridTripleDotsVerticalIcon,
    OpenFilterButtonIcon: GridFilterListIcon,
    FilterPanelDeleteIcon: GridCloseIcon,
    ColumnFilteredIcon: GridFilterAltIcon,
    ColumnSelectorIcon: GridColumnIcon,
    ColumnUnsortedIcon: GridColumnUnsortedIcon,
    ColumnSortedAscendingIcon: GridArrowUpwardIcon,
    ColumnSortedDescendingIcon: GridArrowDownwardIcon,
    ColumnResizeIcon: GridSeparatorIcon,
    DensityCompactIcon: GridViewHeadlineIcon,
    DensityStandardIcon: GridTableRowsIcon,
    DensityComfortableIcon: GridViewStreamIcon,
    ExportIcon: GridSaveAltIcon,
    MoreActionsIcon: GridMoreVertIcon,
    TreeDataCollapseIcon: GridExpandMoreIcon,
    TreeDataExpandIcon: GridKeyboardArrowRight,
    GroupingCriteriaCollapseIcon: GridExpandMoreIcon,
    GroupingCriteriaExpandIcon: GridKeyboardArrowRight,
    DetailPanelExpandIcon: GridAddIcon,
    DetailPanelCollapseIcon: GridRemoveIcon,
    RowReorderIcon: GridDragIcon,
    QuickFilterIcon: GridSearchIcon,
    QuickFilterClearIcon: GridCloseIcon,
    ColumnMenuHideIcon: GridVisibilityOffIcon,
    ColumnMenuSortAscendingIcon: GridArrowUpwardIcon,
    ColumnMenuSortDescendingIcon: GridArrowDownwardIcon,
    ColumnMenuFilterIcon: GridFilterAltIcon,
    ColumnMenuManageColumnsIcon: GridViewColumnIcon,
    ColumnMenuClearIcon: GridClearIcon,
    LoadIcon: GridLoadIcon,
    FilterPanelAddIcon: GridAddIcon,
    FilterPanelRemoveAllIcon: GridDeleteForeverIcon,
    ColumnReorderIcon: GridDragIcon
  };
  const materialSlots = _extends({}, iconSlots, {
    BaseCheckbox: Checkbox_default,
    BaseTextField: TextField_default,
    BaseFormControl: FormControl_default2,
    BaseSelect: Select_default,
    BaseSwitch: Switch_default2,
    BaseButton: Button_default2,
    BaseIconButton: IconButton_default,
    BaseTooltip: Tooltip_default,
    BasePopper: Popper_default2,
    BaseInputLabel: InputLabel_default,
    BaseSelectOption: MUISelectOption
  });
  const material_default = materialSlots;

  // node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.js
  const DATA_GRID_DEFAULT_SLOTS_COMPONENTS = _extends({}, material_default, {
    Cell: MemoizedCell,
    SkeletonCell: GridSkeletonCell,
    ColumnHeaderFilterIconButton: GridColumnHeaderFilterIconButton,
    ColumnMenu: GridColumnMenu,
    ColumnHeaders: GridColumnHeaders,
    Footer: GridFooter,
    Toolbar: null,
    PreferencesPanel: GridPreferencesPanel,
    LoadingOverlay: GridLoadingOverlay,
    NoResultsOverlay: GridNoResultsOverlay,
    NoRowsOverlay: GridNoRowsOverlay,
    Pagination: GridPagination,
    FilterPanel: GridFilterPanel,
    ColumnsPanel: GridColumnsPanel,
    Panel: GridPanel,
    Row: GridRow
  });

  // node_modules/@mui/x-data-grid/internals/utils/slotsMigration.js
  const uncapitalizeObjectKeys = (capitalizedObject) => {
    if (capitalizedObject === void 0) {
      return void 0;
    }
    return Object.keys(capitalizedObject).reduce((acc, key) => _extends({}, acc, {
      [`${key.charAt(0).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
    }), {});
  };

  // node_modules/@mui/x-data-grid/internals/utils/computeSlots.js
  function computeSlots({
    defaultSlots: defaultSlots2,
    slots,
    components: components3
  }) {
    const overrides = slots != null ? slots : components3 ? uncapitalizeObjectKeys(components3) : null;
    if (!overrides || Object.keys(overrides).length === 0) {
      return defaultSlots2;
    }
    return _extends({}, defaultSlots2, overrides);
  }

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js
  const React266 = __toModule(require_react());
  const _excluded175 = ["components", "componentsProps"];
  const DATA_GRID_FORCED_PROPS = {
    disableMultipleColumnsFiltering: true,
    disableMultipleColumnsSorting: true,
    disableMultipleRowSelection: true,
    throttleRowsMs: void 0,
    hideFooterRowCount: false,
    pagination: true,
    checkboxSelectionVisibleOnly: false,
    disableColumnReorder: true,
    disableColumnResize: true,
    keepColumnPositionIfDraggedOutside: false,
    signature: "DataGrid"
  };
  const DATA_GRID_PROPS_DEFAULT_VALUES = {
    autoHeight: false,
    autoPageSize: false,
    checkboxSelection: false,
    checkboxSelectionVisibleOnly: false,
    columnBuffer: 3,
    rowBuffer: 3,
    columnThreshold: 3,
    rowThreshold: 3,
    rowSelection: true,
    density: "standard",
    disableColumnFilter: false,
    disableColumnMenu: false,
    disableColumnSelector: false,
    disableDensitySelector: false,
    disableMultipleColumnsFiltering: false,
    disableMultipleRowSelection: false,
    disableMultipleColumnsSorting: false,
    disableRowSelectionOnClick: false,
    disableVirtualization: false,
    editMode: GridEditModes.Cell,
    filterMode: "client",
    columnHeaderHeight: 56,
    hideFooter: false,
    hideFooterPagination: false,
    hideFooterRowCount: false,
    hideFooterSelectedRowCount: false,
    logger: console,
    logLevel: "warn",
    pagination: false,
    paginationMode: "client",
    rowHeight: 52,
    pageSizeOptions: [25, 50, 100],
    rowSpacingType: "margin",
    showCellVerticalBorder: false,
    showColumnVerticalBorder: false,
    sortingOrder: ["asc", "desc", null],
    sortingMode: "client",
    throttleRowsMs: 0,
    disableColumnReorder: false,
    disableColumnResize: false,
    keepNonExistentRowsSelected: false,
    keepColumnPositionIfDraggedOutside: false
  };
  const defaultSlots = uncapitalizeObjectKeys(DATA_GRID_DEFAULT_SLOTS_COMPONENTS);
  const useDataGridProps2 = (inProps) => {
    const _useThemeProps = useThemeProps2({
      props: inProps,
      name: "MuiDataGrid"
    }), {
      components: components3,
      componentsProps
    } = _useThemeProps, themedProps = _objectWithoutPropertiesLoose(_useThemeProps, _excluded175);
    const localeText = React266.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
    const slots = React266.useMemo(() => computeSlots({
      defaultSlots,
      slots: themedProps.slots,
      components: components3
    }), [components3, themedProps.slots]);
    return React266.useMemo(() => {
      var _themedProps$slotProp;
      return _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, themedProps, {
        localeText,
        slots,
        slotProps: (_themedProps$slotProp = themedProps.slotProps) != null ? _themedProps$slotProp : componentsProps
      }, DATA_GRID_FORCED_PROPS);
    }, [themedProps, localeText, slots, componentsProps]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js
  const React379 = __toModule(require_react());
  const rowsMetaStateInitializer = (state) => _extends({}, state, {
    rowsMeta: {
      currentPageTotalHeight: 0,
      positions: []
    }
  });
  let warnedOnceInvalidRowHeight = false;
  const getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {
    if (typeof rowHeightProp === "number" && rowHeightProp > 0) {
      return rowHeightProp;
    }
    if (!warnedOnceInvalidRowHeight && typeof rowHeightProp !== "undefined" && rowHeightProp !== null) {
      console.warn(warningMessage);
      warnedOnceInvalidRowHeight = true;
    }
    return defaultRowHeight;
  };
  const rowHeightWarning = [`MUI: The \`rowHeight\` prop should be a number greater than 0.`, `The default value will be used instead.`].join("\n");
  const getRowHeightWarning = [`MUI: The \`getRowHeight\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join("\n");
  const useGridRowsMeta2 = (apiRef, props) => {
    const {
      getRowHeight: getRowHeightProp,
      getRowSpacing,
      getEstimatedRowHeight
    } = props;
    const rowsHeightLookup = React379.useRef({});
    const lastMeasuredRowIndex = React379.useRef(-1);
    const hasRowWithAutoHeight = React379.useRef(false);
    const densityFactor = useGridSelector2(apiRef, gridDensityFactorSelector);
    const filterModel = useGridSelector2(apiRef, gridFilterModelSelector);
    const paginationState = useGridSelector2(apiRef, gridPaginationSelector3);
    const sortModel = useGridSelector2(apiRef, gridSortModelSelector);
    const currentPage = useGridVisibleRows2(apiRef, props);
    const pinnedRows = useGridSelector2(apiRef, gridPinnedRowsSelector);
    const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);
    const rowHeight = Math.floor(validRowHeight * densityFactor);
    const hydrateRowsMeta = React379.useCallback(() => {
      var _pinnedRows$top, _pinnedRows$bottom;
      hasRowWithAutoHeight.current = false;
      const calculateRowProcessedSizes = (row) => {
        if (!rowsHeightLookup.current[row.id]) {
          rowsHeightLookup.current[row.id] = {
            sizes: {
              baseCenter: rowHeight
            },
            isResized: false,
            autoHeight: false,
            needsFirstMeasurement: true
          };
        }
        const {
          isResized,
          needsFirstMeasurement,
          sizes
        } = rowsHeightLookup.current[row.id];
        let baseRowHeight = typeof rowHeight === "number" && rowHeight > 0 ? rowHeight : 52;
        const existingBaseRowHeight = sizes.baseCenter;
        if (isResized) {
          baseRowHeight = existingBaseRowHeight;
        } else if (getRowHeightProp) {
          const rowHeightFromUser = getRowHeightProp(_extends({}, row, {
            densityFactor
          }));
          if (rowHeightFromUser === "auto") {
            if (needsFirstMeasurement) {
              const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {
                densityFactor
              })) : rowHeight;
              baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;
            } else {
              baseRowHeight = existingBaseRowHeight;
            }
            hasRowWithAutoHeight.current = true;
            rowsHeightLookup.current[row.id].autoHeight = true;
          } else {
            baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);
            rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
            rowsHeightLookup.current[row.id].autoHeight = false;
          }
        } else {
          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
        }
        const existingBaseSizes = Object.entries(sizes).reduce((acc, [key, size]) => {
          if (/^base[A-Z]/.test(key)) {
            acc[key] = size;
          }
          return acc;
        }, {});
        const initialHeights = _extends({}, existingBaseSizes, {
          baseCenter: baseRowHeight
        });
        if (getRowSpacing) {
          var _spacing$top, _spacing$bottom;
          const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);
          const spacing9 = getRowSpacing(_extends({}, row, {
            isFirstVisible: indexRelativeToCurrentPage === 0,
            isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
            indexRelativeToCurrentPage
          }));
          initialHeights.spacingTop = (_spacing$top = spacing9.top) != null ? _spacing$top : 0;
          initialHeights.spacingBottom = (_spacing$bottom = spacing9.bottom) != null ? _spacing$bottom : 0;
        }
        const processedSizes = apiRef.current.unstable_applyPipeProcessors("rowHeight", initialHeights, row);
        rowsHeightLookup.current[row.id].sizes = processedSizes;
        return processedSizes;
      };
      const positions3 = [];
      const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {
        positions3.push(acc);
        let maximumBaseSize = 0;
        let otherSizes = 0;
        const processedSizes = calculateRowProcessedSizes(row);
        Object.entries(processedSizes).forEach(([size, value]) => {
          if (/^base[A-Z]/.test(size)) {
            maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;
          } else {
            otherSizes += value;
          }
        });
        return acc + maximumBaseSize + otherSizes;
      }, 0);
      pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach((row) => {
        calculateRowProcessedSizes(row);
      });
      pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach((row) => {
        calculateRowProcessedSizes(row);
      });
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          rowsMeta: {
            currentPageTotalHeight,
            positions: positions3
          }
        });
      });
      if (!hasRowWithAutoHeight.current) {
        lastMeasuredRowIndex.current = Infinity;
      }
      apiRef.current.forceUpdate();
    }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);
    const getRowHeight = React379.useCallback((rowId) => {
      const height2 = rowsHeightLookup.current[rowId];
      return height2 ? height2.sizes.baseCenter : rowHeight;
    }, [rowHeight]);
    const getRowInternalSizes = (rowId) => {
      var _rowsHeightLookup$cur;
      return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;
    };
    const setRowHeight = React379.useCallback((id, height2) => {
      rowsHeightLookup.current[id].sizes.baseCenter = height2;
      rowsHeightLookup.current[id].isResized = true;
      rowsHeightLookup.current[id].needsFirstMeasurement = false;
      hydrateRowsMeta();
    }, [hydrateRowsMeta]);
    const debouncedHydrateRowsMeta = React379.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);
    const storeMeasuredRowHeight = React379.useCallback((id, height2, position2) => {
      if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {
        return;
      }
      const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize48(position2)}`] !== height2;
      rowsHeightLookup.current[id].needsFirstMeasurement = false;
      rowsHeightLookup.current[id].sizes[`base${capitalize48(position2)}`] = height2;
      if (needsHydration) {
        debouncedHydrateRowsMeta();
      }
    }, [debouncedHydrateRowsMeta]);
    const rowHasAutoHeight = React379.useCallback((id) => {
      var _rowsHeightLookup$cur2;
      return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;
    }, []);
    const getLastMeasuredRowIndex = React379.useCallback(() => {
      return lastMeasuredRowIndex.current;
    }, []);
    const setLastMeasuredRowIndex = React379.useCallback((index) => {
      if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {
        lastMeasuredRowIndex.current = index;
      }
    }, []);
    const resetRowHeights = React379.useCallback(() => {
      rowsHeightLookup.current = {};
      hydrateRowsMeta();
    }, [hydrateRowsMeta]);
    React379.useEffect(() => {
      hydrateRowsMeta();
    }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);
    useGridRegisterPipeApplier(apiRef, "rowHeight", hydrateRowsMeta);
    const rowsMetaApi = {
      unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,
      unstable_getRowHeight: getRowHeight,
      unstable_getRowInternalSizes: getRowInternalSizes,
      unstable_setRowHeight: setRowHeight,
      unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,
      resetRowHeights
    };
    const rowsMetaPrivateApi = {
      getLastMeasuredRowIndex,
      rowHasAutoHeight
    };
    useGridApiMethod2(apiRef, rowsMetaApi, "public");
    useGridApiMethod2(apiRef, rowsMetaPrivateApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/features/statePersistence/useGridStatePersistence.js
  const React382 = __toModule(require_react());
  const useGridStatePersistence2 = (apiRef) => {
    const exportState = React382.useCallback((params = {}) => {
      const stateToExport = apiRef.current.unstable_applyPipeProcessors("exportState", {}, params);
      return stateToExport;
    }, [apiRef]);
    const restoreState = React382.useCallback((stateToRestore) => {
      const response = apiRef.current.unstable_applyPipeProcessors("restoreState", {
        callbacks: []
      }, {
        stateToRestore
      });
      response.callbacks.forEach((callback) => {
        callback();
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const statePersistenceApi = {
      exportState,
      restoreState
    };
    useGridApiMethod2(apiRef, statePersistenceApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js
  const React361 = __toModule(require_react());
  const useGridColumnSpanning2 = (apiRef) => {
    const lookup = React361.useRef({});
    const setCellColSpanInfo = React361.useCallback((rowId, columnIndex, cellColSpanInfo) => {
      const sizes = lookup.current;
      if (!sizes[rowId]) {
        sizes[rowId] = {};
      }
      sizes[rowId][columnIndex] = cellColSpanInfo;
    }, []);
    const getCellColSpanInfo = React361.useCallback((rowId, columnIndex) => {
      var _lookup$current$rowId;
      return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];
    }, []);
    const calculateCellColSpan = React361.useCallback((params) => {
      const {
        columnIndex,
        rowId,
        minFirstColumnIndex,
        maxLastColumnIndex,
        columns: columns6
      } = params;
      const columnsLength = columns6.length;
      const column = columns6[columnIndex];
      const colSpan = typeof column.colSpan === "function" ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;
      if (!colSpan || colSpan === 1) {
        setCellColSpanInfo(rowId, columnIndex, {
          spannedByColSpan: false,
          cellProps: {
            colSpan: 1,
            width: column.computedWidth
          }
        });
        return {
          colSpan: 1
        };
      }
      let width2 = column.computedWidth;
      for (let j2 = 1; j2 < colSpan; j2 += 1) {
        const nextColumnIndex = columnIndex + j2;
        if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
          const nextColumn = columns6[nextColumnIndex];
          width2 += nextColumn.computedWidth;
          setCellColSpanInfo(rowId, columnIndex + j2, {
            spannedByColSpan: true,
            rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
            leftVisibleCellIndex: columnIndex
          });
        }
        setCellColSpanInfo(rowId, columnIndex, {
          spannedByColSpan: false,
          cellProps: {
            colSpan,
            width: width2
          }
        });
      }
      return {
        colSpan
      };
    }, [apiRef, setCellColSpanInfo]);
    const calculateColSpan = React361.useCallback(({
      rowId,
      minFirstColumn,
      maxLastColumn,
      columns: columns6
    }) => {
      for (let i2 = minFirstColumn; i2 < maxLastColumn; i2 += 1) {
        const cellProps = calculateCellColSpan({
          columnIndex: i2,
          rowId,
          minFirstColumnIndex: minFirstColumn,
          maxLastColumnIndex: maxLastColumn,
          columns: columns6
        });
        if (cellProps.colSpan > 1) {
          i2 += cellProps.colSpan - 1;
        }
      }
    }, [calculateCellColSpan]);
    const columnSpanningPublicApi = {
      unstable_getCellColSpanInfo: getCellColSpanInfo
    };
    const columnSpanningPrivateApi = {
      calculateColSpan
    };
    useGridApiMethod2(apiRef, columnSpanningPublicApi, "public");
    useGridApiMethod2(apiRef, columnSpanningPrivateApi, "private");
    const handleColumnReorderChange = React361.useCallback(() => {
      lookup.current = {};
    }, []);
    useGridApiEventHandler2(apiRef, "columnOrderChange", handleColumnReorderChange);
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js
  const recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {
    if (isLeaf(columnGroupNode)) {
      if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== void 0) {
        throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(" > ")}`, `- ${parents.join(" > ")}`].join("\n"));
      }
      unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;
      return;
    }
    const {
      groupId,
      children
    } = columnGroupNode;
    children.forEach((child) => {
      recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);
    });
  };
  const unwrapGroupingColumnModel = (columnGroupingModel) => {
    if (!columnGroupingModel) {
      return {};
    }
    const unwrappedSubTree = {};
    columnGroupingModel.forEach((columnGroupNode) => {
      recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);
    });
    return unwrappedSubTree;
  };
  const getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel) => {
    const getParents = (field) => {
      var _unwrappedGroupingMod;
      return (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];
    };
    const groupingHeaderStructure = [];
    const maxDepth = Math.max(...orderedColumns.map((field) => getParents(field).length));
    const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));
    for (let depth = 0; depth < maxDepth; depth += 1) {
      const depthStructure = orderedColumns.reduce((structure, newField) => {
        var _getParents$depth;
        const groupId = (_getParents$depth = getParents(newField)[depth]) != null ? _getParents$depth : null;
        if (structure.length === 0) {
          return [{
            columnFields: [newField],
            groupId
          }];
        }
        const lastGroup = structure[structure.length - 1];
        const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];
        const prevGroupId = lastGroup.groupId;
        if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth)) {
          return [...structure, {
            columnFields: [newField],
            groupId
          }];
        }
        return [...structure.slice(0, structure.length - 1), {
          columnFields: [...lastGroup.columnFields, newField],
          groupId
        }];
      }, []);
      groupingHeaderStructure.push(depthStructure);
    }
    return groupingHeaderStructure;
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js
  const React357 = __toModule(require_react());
  const _excluded246 = ["groupId", "children"];
  const createGroupLookup = (columnGroupingModel) => {
    let groupLookup = {};
    columnGroupingModel.forEach((node) => {
      if (isLeaf(node)) {
        return;
      }
      const {
        groupId,
        children
      } = node, other = _objectWithoutPropertiesLoose(node, _excluded246);
      if (!groupId) {
        throw new Error("MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.");
      }
      if (!children) {
        console.warn(`MUI: group groupId=${groupId} has no children.`);
      }
      const groupParam = _extends({}, other, {
        groupId
      });
      const subTreeLookup = createGroupLookup(children);
      if (subTreeLookup[groupId] !== void 0 || groupLookup[groupId] !== void 0) {
        throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);
      }
      groupLookup = _extends({}, groupLookup, subTreeLookup, {
        [groupId]: groupParam
      });
    });
    return _extends({}, groupLookup);
  };
  const columnGroupsStateInitializer = (state, props, apiRef) => {
    var _props$experimentalFe, _props$columnGrouping, _props$columnGrouping2;
    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {
      return state;
    }
    const columnFields = gridColumnFieldsSelector(apiRef);
    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);
    const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);
    const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);
    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);
    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
      var _unwrappedGroupingMod, _unwrappedGroupingMod2;
      return (_unwrappedGroupingMod = (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod2.length) != null ? _unwrappedGroupingMod : 0;
    }));
    return _extends({}, state, {
      columnGrouping: {
        lookup: groupLookup,
        unwrappedGroupingModel,
        headerStructure: columnGroupsHeaderStructure,
        maxDepth
      }
    });
  };
  const useGridColumnGrouping2 = (apiRef, props) => {
    var _props$experimentalFe3;
    const getColumnGroupPath = React357.useCallback((field) => {
      var _unwrappedGroupingMod3;
      const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);
      return (_unwrappedGroupingMod3 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod3 : [];
    }, [apiRef]);
    const getAllGroupDetails = React357.useCallback(() => {
      const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);
      return columnGroupLookup;
    }, [apiRef]);
    const columnGroupingApi = {
      unstable_getColumnGroupPath: getColumnGroupPath,
      unstable_getAllGroupDetails: getAllGroupDetails
    };
    useGridApiMethod2(apiRef, columnGroupingApi, "public");
    const handleColumnIndexChange = React357.useCallback(() => {
      var _props$columnGrouping3;
      const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping3 = props.columnGroupingModel) != null ? _props$columnGrouping3 : []);
      apiRef.current.setState((state) => {
        var _state$columns$ordere, _state$columns;
        const orderedFields = (_state$columns$ordere = (_state$columns = state.columns) == null ? void 0 : _state$columns.orderedFields) != null ? _state$columns$ordere : [];
        const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel);
        return _extends({}, state, {
          columnGrouping: _extends({}, state.columnGrouping, {
            headerStructure: columnGroupsHeaderStructure
          })
        });
      });
    }, [apiRef, props.columnGroupingModel]);
    const updateColumnGroupingState = React357.useCallback((columnGroupingModel) => {
      var _props$experimentalFe2;
      if (!((_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.columnGrouping)) {
        return;
      }
      const columnFields = gridColumnFieldsSelector(apiRef);
      const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);
      const groupLookup = createGroupLookup(columnGroupingModel != null ? columnGroupingModel : []);
      const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel != null ? columnGroupingModel : []);
      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);
      const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
        var _unwrappedGroupingMod4, _unwrappedGroupingMod5;
        return (_unwrappedGroupingMod4 = (_unwrappedGroupingMod5 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod5.length) != null ? _unwrappedGroupingMod4 : 0;
      }));
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          columnGrouping: {
            lookup: groupLookup,
            unwrappedGroupingModel,
            headerStructure: columnGroupsHeaderStructure,
            maxDepth
          }
        });
      });
    }, [apiRef, (_props$experimentalFe3 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe3.columnGrouping]);
    useGridApiEventHandler2(apiRef, "columnIndexChange", handleColumnIndexChange);
    useGridApiEventHandler2(apiRef, "columnsChange", () => {
      updateColumnGroupingState(props.columnGroupingModel);
    });
    useGridApiEventHandler2(apiRef, "columnVisibilityModelChange", () => {
      updateColumnGroupingState(props.columnGroupingModel);
    });
    React357.useEffect(() => {
      updateColumnGroupingState(props.columnGroupingModel);
    }, [updateColumnGroupingState, props.columnGroupingModel]);
  };

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js
  const useDataGridComponent2 = (inputApiRef, props) => {
    const privateApiRef = useGridInitialization2(inputApiRef, props);
    useGridRowSelectionPreProcessors2(privateApiRef, props);
    useGridRowsPreProcessors2(privateApiRef);
    useGridInitializeState2(rowSelectionStateInitializer, privateApiRef, props);
    useGridInitializeState2(columnsStateInitializer, privateApiRef, props);
    useGridInitializeState2(rowsStateInitializer, privateApiRef, props);
    useGridInitializeState2(editingStateInitializer, privateApiRef, props);
    useGridInitializeState2(focusStateInitializer, privateApiRef, props);
    useGridInitializeState2(sortingStateInitializer, privateApiRef, props);
    useGridInitializeState2(preferencePanelStateInitializer, privateApiRef, props);
    useGridInitializeState2(filterStateInitializer, privateApiRef, props);
    useGridInitializeState2(densityStateInitializer, privateApiRef, props);
    useGridInitializeState2(paginationStateInitializer, privateApiRef, props);
    useGridInitializeState2(rowsMetaStateInitializer, privateApiRef, props);
    useGridInitializeState2(columnMenuStateInitializer, privateApiRef, props);
    useGridInitializeState2(columnGroupsStateInitializer, privateApiRef, props);
    useGridKeyboardNavigation2(privateApiRef, props);
    useGridRowSelection2(privateApiRef, props);
    useGridColumns2(privateApiRef, props);
    useGridRows2(privateApiRef, props);
    useGridParamsApi2(privateApiRef);
    useGridColumnSpanning2(privateApiRef);
    useGridColumnGrouping2(privateApiRef, props);
    useGridEditing2(privateApiRef, props);
    useGridFocus2(privateApiRef, props);
    useGridPreferencesPanel2(privateApiRef, props);
    useGridFilter2(privateApiRef, props);
    useGridSorting2(privateApiRef, props);
    useGridDensity2(privateApiRef, props);
    useGridPagination2(privateApiRef, props);
    useGridRowsMeta2(privateApiRef, props);
    useGridScroll2(privateApiRef, props);
    useGridColumnMenu2(privateApiRef);
    useGridCsvExport2(privateApiRef);
    useGridPrintExport2(privateApiRef, props);
    useGridClipboard2(privateApiRef);
    useGridDimensions2(privateApiRef, props);
    useGridEvents2(privateApiRef, props);
    useGridStatePersistence2(privateApiRef);
    return privateApiRef;
  };

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScroller.js
  const React342 = __toModule(require_react());
  const jsx_runtime366 = __toModule(require_jsx_runtime());
  const _excluded242 = ["className"];
  const useUtilityClasses170 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["virtualScroller"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const VirtualScrollerRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "VirtualScroller",
    overridesResolver: (props, styles30) => styles30.virtualScroller
  })({
    overflow: "auto",
    height: "100%",
    position: "relative",
    "@media print": {
      overflow: "hidden"
    }
  });
  const GridVirtualScroller2 = React342.forwardRef(function GridVirtualScroller3(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded242);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses170(rootProps);
    return jsx_runtime366.jsx(VirtualScrollerRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState: rootProps
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerContent.js
  const React343 = __toModule(require_react());
  const jsx_runtime367 = __toModule(require_jsx_runtime());
  const _excluded243 = ["className", "style"];
  const useUtilityClasses171 = (ownerState) => {
    const {
      classes,
      overflowedContent
    } = ownerState;
    const slots = {
      root: ["virtualScrollerContent", overflowedContent && "virtualScrollerContent--overflowed"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const VirtualScrollerContentRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "VirtualScrollerContent",
    overridesResolver: (props, styles30) => styles30.virtualScrollerContent
  })({});
  const GridVirtualScrollerContent2 = React343.forwardRef(function GridVirtualScrollerContent3(props, ref) {
    const {
      className: className3,
      style: style16
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded243);
    const rootProps = useGridRootProps2();
    const ownerState = _extends({}, rootProps, {
      overflowedContent: !rootProps.autoHeight && (style16 == null ? void 0 : style16.minHeight) === "auto"
    });
    const classes = useUtilityClasses171(ownerState);
    return jsx_runtime367.jsx(VirtualScrollerContentRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState,
      style: style16
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerRenderZone.js
  const React344 = __toModule(require_react());
  const jsx_runtime368 = __toModule(require_jsx_runtime());
  const _excluded244 = ["className"];
  const useUtilityClasses172 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["virtualScrollerRenderZone"]
    };
    return composeClasses2(slots, getDataGridUtilityClass, classes);
  };
  const VirtualScrollerRenderZoneRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "VirtualScrollerRenderZone",
    overridesResolver: (props, styles30) => styles30.virtualScrollerRenderZone
  })({
    position: "absolute",
    display: "flex",
    flexDirection: "column"
  });
  const GridVirtualScrollerRenderZone2 = React344.forwardRef(function GridVirtualScrollerRenderZone3(props, ref) {
    const {
      className: className3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded244);
    const rootProps = useGridRootProps2();
    const classes = useUtilityClasses172(rootProps);
    return jsx_runtime368.jsx(VirtualScrollerRenderZoneRoot, _extends({
      ref,
      className: clsx_m_default(classes.root, className3),
      ownerState: rootProps
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.js
  const React268 = __toModule(require_react());
  const jsx_runtime267 = __toModule(require_jsx_runtime());
  const jsx_runtime268 = __toModule(require_jsx_runtime());
  const _excluded176 = ["className", "disableVirtualization"];
  const DataGridVirtualScroller2 = React268.forwardRef(function DataGridVirtualScroller3(props, ref) {
    const {
      className: className3,
      disableVirtualization
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded176);
    const {
      getRootProps,
      getContentProps,
      getRenderZoneProps,
      getRows
    } = useGridVirtualScroller2({
      ref,
      disableVirtualization
    });
    return jsx_runtime268.jsxs(GridVirtualScroller2, _extends({
      className: className3
    }, getRootProps(other), {
      children: [jsx_runtime267.jsx(GridOverlays2, {}), jsx_runtime267.jsx(GridVirtualScrollerContent2, _extends({}, getContentProps(), {
        children: jsx_runtime267.jsx(GridVirtualScrollerRenderZone2, _extends({}, getRenderZoneProps(), {
          children: getRows()
        }))
      }))]
    }));
  });

  // node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
  const React265 = __toModule(require_react());
  const prop_types184 = __toModule(require_prop_types7());
  const jsx_runtime264 = __toModule(require_jsx_runtime());
  const jsx_runtime265 = __toModule(require_jsx_runtime());
  const DataGridRaw = React265.forwardRef(function DataGrid2(inProps, ref) {
    const props = useDataGridProps2(inProps);
    const privateApiRef = useDataGridComponent2(props.apiRef, props);
    return jsx_runtime264.jsx(GridContextProvider2, {
      privateApiRef,
      props,
      children: jsx_runtime265.jsxs(GridRoot2, {
        className: props.className,
        style: props.style,
        sx: props.sx,
        ref,
        children: [jsx_runtime264.jsx(GridHeader, {}), jsx_runtime264.jsx(GridBody, {
          VirtualScrollerComponent: DataGridVirtualScroller2
        }), jsx_runtime264.jsx(GridFooterPlaceholder, {})]
      })
    });
  });
  const DataGrid = React265.memo(DataGridRaw);
  DataGridRaw.propTypes = {
    apiRef: prop_types184.default.shape({
      current: prop_types184.default.object.isRequired
    }),
    "aria-label": prop_types184.default.string,
    "aria-labelledby": prop_types184.default.string,
    autoHeight: prop_types184.default.bool,
    autoPageSize: prop_types184.default.bool,
    cellModesModel: prop_types184.default.object,
    checkboxSelection: prop_types184.default.bool,
    classes: prop_types184.default.object,
    columnBuffer: prop_types184.default.number,
    columnGroupingModel: prop_types184.default.arrayOf(prop_types184.default.object),
    columnHeaderHeight: prop_types184.default.number,
    columns: chainPropTypes(prop_types184.default.array.isRequired, (props) => {
      if (props.columns && props.columns.some((column) => column.resizable)) {
        return new Error([`MUI: \`column.resizable = true\` is not a valid prop.`, "Column resizing is not available in the MIT version.", "", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
      }
      return null;
    }),
    columnThreshold: prop_types184.default.number,
    columnVisibilityModel: prop_types184.default.object,
    components: prop_types184.default.object,
    componentsProps: prop_types184.default.object,
    density: prop_types184.default.oneOf(["comfortable", "compact", "standard"]),
    disableColumnFilter: prop_types184.default.bool,
    disableColumnMenu: prop_types184.default.bool,
    disableColumnSelector: prop_types184.default.bool,
    disableDensitySelector: prop_types184.default.bool,
    disableRowSelectionOnClick: prop_types184.default.bool,
    disableVirtualization: prop_types184.default.bool,
    editMode: prop_types184.default.oneOf(["cell", "row"]),
    experimentalFeatures: prop_types184.default.shape({
      columnGrouping: prop_types184.default.bool,
      warnIfFocusStateIsNotSynced: prop_types184.default.bool
    }),
    filterMode: prop_types184.default.oneOf(["client", "server"]),
    filterModel: prop_types184.default.shape({
      items: prop_types184.default.arrayOf(prop_types184.default.shape({
        field: prop_types184.default.string.isRequired,
        id: prop_types184.default.oneOfType([prop_types184.default.number, prop_types184.default.string]),
        operator: prop_types184.default.string.isRequired,
        value: prop_types184.default.any
      })).isRequired,
      logicOperator: prop_types184.default.oneOf(["and", "or"]),
      quickFilterLogicOperator: prop_types184.default.oneOf(["and", "or"]),
      quickFilterValues: prop_types184.default.array
    }),
    getCellClassName: prop_types184.default.func,
    getDetailPanelContent: prop_types184.default.func,
    getEstimatedRowHeight: prop_types184.default.func,
    getRowClassName: prop_types184.default.func,
    getRowHeight: prop_types184.default.func,
    getRowId: prop_types184.default.func,
    getRowSpacing: prop_types184.default.func,
    hideFooter: prop_types184.default.bool,
    hideFooterPagination: prop_types184.default.bool,
    hideFooterSelectedRowCount: prop_types184.default.bool,
    initialState: prop_types184.default.object,
    isCellEditable: prop_types184.default.func,
    isRowSelectable: prop_types184.default.func,
    keepNonExistentRowsSelected: prop_types184.default.bool,
    loading: prop_types184.default.bool,
    localeText: prop_types184.default.object,
    logger: prop_types184.default.shape({
      debug: prop_types184.default.func.isRequired,
      error: prop_types184.default.func.isRequired,
      info: prop_types184.default.func.isRequired,
      warn: prop_types184.default.func.isRequired
    }),
    logLevel: prop_types184.default.oneOf(["debug", "error", "info", "warn", false]),
    nonce: prop_types184.default.string,
    onCellClick: prop_types184.default.func,
    onCellDoubleClick: prop_types184.default.func,
    onCellEditStart: prop_types184.default.func,
    onCellEditStop: prop_types184.default.func,
    onCellKeyDown: prop_types184.default.func,
    onCellModesModelChange: prop_types184.default.func,
    onColumnHeaderClick: prop_types184.default.func,
    onColumnHeaderDoubleClick: prop_types184.default.func,
    onColumnHeaderEnter: prop_types184.default.func,
    onColumnHeaderLeave: prop_types184.default.func,
    onColumnHeaderOut: prop_types184.default.func,
    onColumnHeaderOver: prop_types184.default.func,
    onColumnOrderChange: prop_types184.default.func,
    onColumnVisibilityModelChange: prop_types184.default.func,
    onFilterModelChange: prop_types184.default.func,
    onMenuClose: prop_types184.default.func,
    onMenuOpen: prop_types184.default.func,
    onPaginationModelChange: prop_types184.default.func,
    onPreferencePanelClose: prop_types184.default.func,
    onPreferencePanelOpen: prop_types184.default.func,
    onProcessRowUpdateError: prop_types184.default.func,
    onResize: prop_types184.default.func,
    onRowClick: prop_types184.default.func,
    onRowDoubleClick: prop_types184.default.func,
    onRowEditCommit: prop_types184.default.func,
    onRowEditStart: prop_types184.default.func,
    onRowEditStop: prop_types184.default.func,
    onRowModesModelChange: prop_types184.default.func,
    onRowSelectionModelChange: prop_types184.default.func,
    onSortModelChange: prop_types184.default.func,
    onStateChange: prop_types184.default.func,
    pageSizeOptions: prop_types184.default.arrayOf(prop_types184.default.number),
    pagination: (props) => {
      if (props.pagination === false) {
        return new Error(["MUI: `<DataGrid pagination={false} />` is not a valid prop.", "Infinite scrolling is not available in the MIT version.", "", "You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination."].join("\n"));
      }
      return null;
    },
    paginationMode: prop_types184.default.oneOf(["client", "server"]),
    paginationModel: prop_types184.default.shape({
      page: prop_types184.default.number.isRequired,
      pageSize: prop_types184.default.number.isRequired
    }),
    processRowUpdate: prop_types184.default.func,
    rowBuffer: prop_types184.default.number,
    rowCount: prop_types184.default.number,
    rowHeight: prop_types184.default.number,
    rowModesModel: prop_types184.default.object,
    rows: prop_types184.default.arrayOf(prop_types184.default.object).isRequired,
    rowSelection: prop_types184.default.bool,
    rowSelectionModel: prop_types184.default.oneOfType([prop_types184.default.arrayOf(prop_types184.default.oneOfType([prop_types184.default.number, prop_types184.default.string]).isRequired), prop_types184.default.number, prop_types184.default.string]),
    rowSpacingType: prop_types184.default.oneOf(["border", "margin"]),
    rowThreshold: prop_types184.default.number,
    scrollbarSize: prop_types184.default.number,
    showCellVerticalBorder: prop_types184.default.bool,
    showColumnVerticalBorder: prop_types184.default.bool,
    slotProps: prop_types184.default.object,
    slots: prop_types184.default.object,
    sortingMode: prop_types184.default.oneOf(["client", "server"]),
    sortingOrder: prop_types184.default.arrayOf(prop_types184.default.oneOf(["asc", "desc"])),
    sortModel: prop_types184.default.arrayOf(prop_types184.default.shape({
      field: prop_types184.default.string.isRequired,
      sort: prop_types184.default.oneOf(["asc", "desc"])
    })),
    sx: prop_types184.default.oneOfType([prop_types184.default.arrayOf(prop_types184.default.oneOfType([prop_types184.default.func, prop_types184.default.object, prop_types184.default.bool])), prop_types184.default.func, prop_types184.default.object])
  };

  // client/TransactionTable.jsx
  const React2 = __toModule(require_react());
  const react = __toModule(require_react());
  function CustomToolbar() {
    return React2.createElement(GridToolbarContainer, null, React2.createElement(GridToolbarColumnsButton, null), React2.createElement(GridToolbarFilterButton, null), React2.createElement(GridToolbarDensitySelector, null), React2.createElement(GridToolbarExport, null));
  }
  const TransactionTable2 = ({transactions, selectedOption}) => {
    const [selectedTransaction, setSelectedTransaction] = react.useState(null);
    const [modalOpen, setModalOpen] = react.useState(false);
    const handleRowClick = (transaction) => {
      setSelectedTransaction(transaction);
      setModalOpen(true);
    };
    const handleCloseModal = () => {
      setModalOpen(false);
    };
    const columnsMap = {
      transactions: [
        {field: "transactionDate", headerName: "Date", width: 100},
        {field: "description", headerName: "Description", width: 170},
        {field: "category", headerName: "Category", width: 100},
        {field: "debit", headerName: "Debit", width: 100},
        {field: "credit", headerName: "Credit", width: 100},
        {field: "id", headerName: "ID", width: 100},
        {field: "merchantStreetAddress", headerName: "Merchant Address", width: 170},
        {field: "merchantCity", headerName: "Merchant City", width: 100},
        {field: "merchantState", headerName: "Merchant State", width: 100},
        {field: "merchantCountry", headerName: "Merchant Country", width: 150},
        {field: "currency", headerName: "Currency", width: 100}
      ],
      topCategories: [
        {field: "name", headerName: "Category", width: 200},
        {field: "totalAmount", headerName: "Transaction Volume", width: 200}
      ],
      topMerchants: [
        {field: "name", headerName: "Merchant", width: 200},
        {field: "totalAmount", headerName: "Transaction Volume", width: 200}
      ]
    };
    const columns6 = selectedOption === "top-categories" ? columnsMap["topCategories"] : selectedOption === "top-merchants" ? columnsMap["topMerchants"] : columnsMap["transactions"];
    const addIdToRows = (rows3) => {
      return rows3.map((row, index) => ({
        ...row,
        id: index
      }));
    };
    return React2.createElement(React2.Fragment, null, React2.createElement("div", {
      style: {
        height: 600,
        width: "100%",
        borderRadius: 8,
        boxShadow: "2px 2px 4px rgba(0,0,0,0.1)",
        overflow: "hidden"
      }
    }, React2.createElement(DataGrid, {
      rows: selectedOption === "top-categories" || selectedOption === "top-merchants" ? addIdToRows(transactions) : transactions,
      columns: columns6,
      pageSize: 10,
      rowsPerPageOptions: [10],
      onRowClick: (param) => handleRowClick(param.row),
      slots: {
        toolbar: CustomToolbar
      }
    })), React2.createElement(Modal_default, {
      open: modalOpen,
      onClose: handleCloseModal
    }, React2.createElement(Box_default, {
      sx: {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: 400,
        bgcolor: "background.paper",
        boxShadow: 24,
        p: 4
      }
    }, React2.createElement(Typography_default, {
      variant: "h6"
    }, "Row Details"), columns6.map((column) => React2.createElement(Typography_default, {
      key: column.field
    }, column.headerName, ": ", selectedTransaction && selectedTransaction[column.field])))));
  };

  // node_modules/swr/_internal/dist/index.esm.js
  const react24 = __toModule(require_react());
  const SWRGlobalState = new WeakMap();
  const EMPTY_CACHE = {};
  const INITIAL_CACHE = {};
  const noop3 = () => {
  };
  const UNDEFINED = noop3();
  const OBJECT = Object;
  const isUndefined = (v2) => v2 === UNDEFINED;
  const isFunction2 = (v2) => typeof v2 == "function";
  const mergeObjects = (a2, b2) => ({
    ...a2,
    ...b2
  });
  const STR_UNDEFINED = "undefined";
  const isWindowDefined = typeof window != STR_UNDEFINED;
  const isDocumentDefined = typeof document != STR_UNDEFINED;
  const hasRequestAnimationFrame = () => isWindowDefined && typeof window["requestAnimationFrame"] != STR_UNDEFINED;
  const createCacheHelper = (cache6, key) => {
    const state = SWRGlobalState.get(cache6);
    return [
      () => !isUndefined(key) && cache6.get(key) || EMPTY_CACHE,
      (info) => {
        if (!isUndefined(key)) {
          const prev = cache6.get(key);
          if (!(key in INITIAL_CACHE)) {
            INITIAL_CACHE[key] = prev;
          }
          state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);
        }
      },
      state[6],
      () => {
        if (!isUndefined(key)) {
          if (key in INITIAL_CACHE)
            return INITIAL_CACHE[key];
        }
        return !isUndefined(key) && cache6.get(key) || EMPTY_CACHE;
      }
    ];
  };
  const table = new WeakMap();
  let counter = 0;
  const stableHash = (arg) => {
    const type = typeof arg;
    const constructor = arg && arg.constructor;
    const isDate = constructor == Date;
    let result;
    let index;
    if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {
      result = table.get(arg);
      if (result)
        return result;
      result = ++counter + "~";
      table.set(arg, result);
      if (constructor == Array) {
        result = "@";
        for (index = 0; index < arg.length; index++) {
          result += stableHash(arg[index]) + ",";
        }
        table.set(arg, result);
      }
      if (constructor == OBJECT) {
        result = "#";
        const keys = OBJECT.keys(arg).sort();
        while (!isUndefined(index = keys.pop())) {
          if (!isUndefined(arg[index])) {
            result += index + ":" + stableHash(arg[index]) + ",";
          }
        }
        table.set(arg, result);
      }
    } else {
      result = isDate ? arg.toJSON() : type == "symbol" ? arg.toString() : type == "string" ? JSON.stringify(arg) : "" + arg;
    }
    return result;
  };
  let online = true;
  const isOnline = () => online;
  const [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [
    window.addEventListener.bind(window),
    window.removeEventListener.bind(window)
  ] : [
    noop3,
    noop3
  ];
  const isVisible = () => {
    const visibilityState = isDocumentDefined && document.visibilityState;
    return isUndefined(visibilityState) || visibilityState !== "hidden";
  };
  const initFocus = (callback) => {
    if (isDocumentDefined) {
      document.addEventListener("visibilitychange", callback);
    }
    onWindowEvent("focus", callback);
    return () => {
      if (isDocumentDefined) {
        document.removeEventListener("visibilitychange", callback);
      }
      offWindowEvent("focus", callback);
    };
  };
  const initReconnect = (callback) => {
    const onOnline = () => {
      online = true;
      callback();
    };
    const onOffline = () => {
      online = false;
    };
    onWindowEvent("online", onOnline);
    onWindowEvent("offline", onOffline);
    return () => {
      offWindowEvent("online", onOnline);
      offWindowEvent("offline", onOffline);
    };
  };
  const preset = {
    isOnline,
    isVisible
  };
  const defaultConfigOptions = {
    initFocus,
    initReconnect
  };
  const IS_REACT_LEGACY = !react24.default.useId;
  const IS_SERVER = !isWindowDefined || "Deno" in window;
  const rAF = (f2) => hasRequestAnimationFrame() ? window["requestAnimationFrame"](f2) : setTimeout(f2, 1);
  const useIsomorphicLayoutEffect = IS_SERVER ? react24.useEffect : react24.useLayoutEffect;
  const navigatorConnection = typeof navigator !== "undefined" && navigator.connection;
  const slowConnection = !IS_SERVER && navigatorConnection && ([
    "slow-2g",
    "2g"
  ].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);
  const serialize5 = (key) => {
    if (isFunction2(key)) {
      try {
        key = key();
      } catch (err) {
        key = "";
      }
    }
    const args = key;
    key = typeof key == "string" ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : "";
    return [
      key,
      args
    ];
  };
  let __timestamp = 0;
  const getTimestamp = () => ++__timestamp;
  const FOCUS_EVENT = 0;
  const RECONNECT_EVENT = 1;
  const MUTATE_EVENT = 2;
  const ERROR_REVALIDATE_EVENT = 3;
  var constants3 = {
    __proto__: null,
    ERROR_REVALIDATE_EVENT,
    FOCUS_EVENT,
    MUTATE_EVENT,
    RECONNECT_EVENT
  };
  async function internalMutate(...args) {
    const [cache6, _key, _data, _opts] = args;
    const options = mergeObjects({
      populateCache: true,
      throwOnError: true
    }, typeof _opts === "boolean" ? {
      revalidate: _opts
    } : _opts || {});
    let populateCache = options.populateCache;
    const rollbackOnErrorOption = options.rollbackOnError;
    let optimisticData = options.optimisticData;
    const revalidate = options.revalidate !== false;
    const rollbackOnError = (error) => {
      return typeof rollbackOnErrorOption === "function" ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;
    };
    const throwOnError = options.throwOnError;
    if (isFunction2(_key)) {
      const keyFilter = _key;
      const matchedKeys = [];
      const it = cache6.keys();
      for (let keyIt = it.next(); !keyIt.done; keyIt = it.next()) {
        const key = keyIt.value;
        if (!/^\$(inf|sub)\$/.test(key) && keyFilter(cache6.get(key)._k)) {
          matchedKeys.push(key);
        }
      }
      return Promise.all(matchedKeys.map(mutateByKey));
    }
    return mutateByKey(_key);
    async function mutateByKey(_k) {
      const [key] = serialize5(_k);
      if (!key)
        return;
      const [get, set] = createCacheHelper(cache6, key);
      const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache6);
      const revalidators = EVENT_REVALIDATORS[key];
      const startRevalidate = () => {
        if (revalidate) {
          delete FETCH[key];
          if (revalidators && revalidators[0]) {
            return revalidators[0](MUTATE_EVENT).then(() => get().data);
          }
        }
        return get().data;
      };
      if (args.length < 3) {
        return startRevalidate();
      }
      let data = _data;
      let error;
      const beforeMutationTs = getTimestamp();
      MUTATION[key] = [
        beforeMutationTs,
        0
      ];
      const hasOptimisticData = !isUndefined(optimisticData);
      const state = get();
      const displayedData = state.data;
      const currentData = state._c;
      const committedData = isUndefined(currentData) ? displayedData : currentData;
      if (hasOptimisticData) {
        optimisticData = isFunction2(optimisticData) ? optimisticData(committedData) : optimisticData;
        set({
          data: optimisticData,
          _c: committedData
        });
      }
      if (isFunction2(data)) {
        try {
          data = data(committedData);
        } catch (err) {
          error = err;
        }
      }
      if (data && isFunction2(data.then)) {
        data = await data.catch((err) => {
          error = err;
        });
        if (beforeMutationTs !== MUTATION[key][0]) {
          if (error)
            throw error;
          return data;
        } else if (error && hasOptimisticData && rollbackOnError(error)) {
          populateCache = true;
          data = committedData;
          set({
            data,
            _c: UNDEFINED
          });
        }
      }
      if (populateCache) {
        if (!error) {
          if (isFunction2(populateCache)) {
            data = populateCache(data, committedData);
          }
          set({
            data,
            _c: UNDEFINED
          });
        }
      }
      MUTATION[key][1] = getTimestamp();
      const res = await startRevalidate();
      set({
        _c: UNDEFINED
      });
      if (error) {
        if (throwOnError)
          throw error;
        return;
      }
      return populateCache ? res : data;
    }
  }
  const revalidateAllKeys = (revalidators, type) => {
    for (const key in revalidators) {
      if (revalidators[key][0])
        revalidators[key][0](type);
    }
  };
  const initCache = (provider, options) => {
    if (!SWRGlobalState.has(provider)) {
      const opts = mergeObjects(defaultConfigOptions, options);
      const EVENT_REVALIDATORS = {};
      const mutate2 = internalMutate.bind(UNDEFINED, provider);
      let unmount = noop3;
      const subscriptions = {};
      const subscribe = (key, callback) => {
        const subs = subscriptions[key] || [];
        subscriptions[key] = subs;
        subs.push(callback);
        return () => subs.splice(subs.indexOf(callback), 1);
      };
      const setter = (key, value, prev) => {
        provider.set(key, value);
        const subs = subscriptions[key];
        if (subs) {
          for (const fn of subs) {
            fn(value, prev);
          }
        }
      };
      const initProvider = () => {
        if (!SWRGlobalState.has(provider)) {
          SWRGlobalState.set(provider, [
            EVENT_REVALIDATORS,
            {},
            {},
            {},
            mutate2,
            setter,
            subscribe
          ]);
          if (!IS_SERVER) {
            const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));
            const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));
            unmount = () => {
              releaseFocus && releaseFocus();
              releaseReconnect && releaseReconnect();
              SWRGlobalState.delete(provider);
            };
          }
        }
      };
      initProvider();
      return [
        provider,
        mutate2,
        initProvider,
        unmount
      ];
    }
    return [
      provider,
      SWRGlobalState.get(provider)[4]
    ];
  };
  const onErrorRetry = (_6, __, config3, revalidate, opts) => {
    const maxRetryCount = config3.errorRetryCount;
    const currentRetryCount = opts.retryCount;
    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config3.errorRetryInterval;
    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {
      return;
    }
    setTimeout(revalidate, timeout, opts);
  };
  const compare = (currentData, newData) => stableHash(currentData) == stableHash(newData);
  const [cache5, mutate] = initCache(new Map());
  const defaultConfig = mergeObjects({
    onLoadingSlow: noop3,
    onSuccess: noop3,
    onError: noop3,
    onErrorRetry,
    onDiscarded: noop3,
    revalidateOnFocus: true,
    revalidateOnReconnect: true,
    revalidateIfStale: true,
    shouldRetryOnError: true,
    errorRetryInterval: slowConnection ? 1e4 : 5e3,
    focusThrottleInterval: 5 * 1e3,
    dedupingInterval: 2 * 1e3,
    loadingTimeout: slowConnection ? 5e3 : 3e3,
    compare,
    isPaused: () => false,
    cache: cache5,
    mutate,
    fallback: {}
  }, preset);
  const mergeConfigs = (a2, b2) => {
    const v2 = mergeObjects(a2, b2);
    if (b2) {
      const {use: u1, fallback: f1} = a2;
      const {use: u2, fallback: f2} = b2;
      if (u1 && u2) {
        v2.use = u1.concat(u2);
      }
      if (f1 && f2) {
        v2.fallback = mergeObjects(f1, f2);
      }
    }
    return v2;
  };
  const SWRConfigContext = react24.createContext({});
  const SWRConfig = (props) => {
    const {value} = props;
    const parentConfig = react24.useContext(SWRConfigContext);
    const isFunctionalConfig = isFunction2(value);
    const config3 = react24.useMemo(() => isFunctionalConfig ? value(parentConfig) : value, [
      isFunctionalConfig,
      parentConfig,
      value
    ]);
    const extendedConfig = react24.useMemo(() => isFunctionalConfig ? config3 : mergeConfigs(parentConfig, config3), [
      isFunctionalConfig,
      parentConfig,
      config3
    ]);
    const provider = config3 && config3.provider;
    const cacheContextRef = react24.useRef(UNDEFINED);
    if (provider && !cacheContextRef.current) {
      cacheContextRef.current = initCache(provider(extendedConfig.cache || cache5), config3);
    }
    const cacheContext = cacheContextRef.current;
    if (cacheContext) {
      extendedConfig.cache = cacheContext[0];
      extendedConfig.mutate = cacheContext[1];
    }
    useIsomorphicLayoutEffect(() => {
      if (cacheContext) {
        cacheContext[2] && cacheContext[2]();
        return cacheContext[3];
      }
    }, []);
    return react24.createElement(SWRConfigContext.Provider, mergeObjects(props, {
      value: extendedConfig
    }));
  };
  const enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;
  const use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];
  const setupDevTools = () => {
    if (enableDevtools) {
      window.__SWR_DEVTOOLS_REACT__ = react24.default;
    }
  };
  const normalize = (args) => {
    return isFunction2(args[1]) ? [
      args[0],
      args[1],
      args[2] || {}
    ] : [
      args[0],
      null,
      (args[1] === null ? args[2] : args[1]) || {}
    ];
  };
  const useSWRConfig = () => {
    return mergeObjects(defaultConfig, react24.useContext(SWRConfigContext));
  };
  const middleware = (useSWRNext) => (key_, fetcher_, config3) => {
    const fetcher2 = fetcher_ && ((...args) => {
      const [key] = serialize5(key_);
      const [, , , PRELOAD] = SWRGlobalState.get(cache5);
      const req = PRELOAD[key];
      if (req) {
        delete PRELOAD[key];
        return req;
      }
      return fetcher_(...args);
    });
    return useSWRNext(key_, fetcher2, config3);
  };
  const BUILT_IN_MIDDLEWARE = use.concat(middleware);
  const withArgs = (hook) => {
    return function useSWRArgs(...args) {
      const fallbackConfig = useSWRConfig();
      const [key, fn, _config] = normalize(args);
      const config3 = mergeConfigs(fallbackConfig, _config);
      let next = hook;
      const {use: use2} = config3;
      const middleware2 = (use2 || []).concat(BUILT_IN_MIDDLEWARE);
      for (let i2 = middleware2.length; i2--; ) {
        next = middleware2[i2](next);
      }
      return next(key, fn || config3.fetcher || null, config3);
    };
  };
  const subscribeCallback = (key, callbacks, callback) => {
    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);
    keyedRevalidators.push(callback);
    return () => {
      const index = keyedRevalidators.indexOf(callback);
      if (index >= 0) {
        keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];
        keyedRevalidators.pop();
      }
    };
  };
  setupDevTools();

  // node_modules/swr/core/dist/index.esm.js
  const react25 = __toModule(require_react());
  const shim = __toModule(require_shim());
  const WITH_DEDUPE = {
    dedupe: true
  };
  const useSWRHandler = (_key, fetcher2, config3) => {
    const {cache: cache6, compare: compare2, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData} = config3;
    const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache6);
    const [key, fnArg] = serialize5(_key);
    const initialMountedRef = react25.useRef(false);
    const unmountedRef = react25.useRef(false);
    const keyRef = react25.useRef(key);
    const fetcherRef = react25.useRef(fetcher2);
    const configRef = react25.useRef(config3);
    const getConfig = () => configRef.current;
    const isActive = () => getConfig().isVisible() && getConfig().isOnline();
    const [getCache, setCache, subscribeCache, getInitialCache] = createCacheHelper(cache6, key);
    const stateDependencies = react25.useRef({}).current;
    const fallback = isUndefined(fallbackData) ? config3.fallback[key] : fallbackData;
    const isEqual = (prev, current) => {
      for (const _6 in stateDependencies) {
        const t2 = _6;
        if (t2 === "data") {
          if (!compare2(prev[t2], current[t2])) {
            if (!isUndefined(prev[t2])) {
              return false;
            }
            if (!compare2(returnedData, current[t2])) {
              return false;
            }
          }
        } else {
          if (current[t2] !== prev[t2]) {
            return false;
          }
        }
      }
      return true;
    };
    const getSnapshot = react25.useMemo(() => {
      const shouldStartRequest = (() => {
        if (!key)
          return false;
        if (!fetcher2)
          return false;
        if (!isUndefined(revalidateOnMount))
          return revalidateOnMount;
        if (getConfig().isPaused())
          return false;
        if (suspense)
          return false;
        if (!isUndefined(revalidateIfStale))
          return revalidateIfStale;
        return true;
      })();
      const getSelectedCache = (state) => {
        const snapshot = mergeObjects(state);
        delete snapshot._k;
        if (!shouldStartRequest) {
          return snapshot;
        }
        return {
          isValidating: true,
          isLoading: true,
          ...snapshot
        };
      };
      const cachedData2 = getCache();
      const initialData = getInitialCache();
      const clientSnapshot = getSelectedCache(cachedData2);
      const serverSnapshot = cachedData2 === initialData ? clientSnapshot : getSelectedCache(initialData);
      let memorizedSnapshot = clientSnapshot;
      return [
        () => {
          const newSnapshot = getSelectedCache(getCache());
          const compareResult = isEqual(newSnapshot, memorizedSnapshot);
          if (compareResult) {
            memorizedSnapshot.data = newSnapshot.data;
            memorizedSnapshot.isLoading = newSnapshot.isLoading;
            memorizedSnapshot.isValidating = newSnapshot.isValidating;
            memorizedSnapshot.error = newSnapshot.error;
            return memorizedSnapshot;
          } else {
            memorizedSnapshot = newSnapshot;
            return newSnapshot;
          }
        },
        () => serverSnapshot
      ];
    }, [
      cache6,
      key
    ]);
    const cached = shim.useSyncExternalStore(react25.useCallback((callback) => subscribeCache(key, (current, prev) => {
      if (!isEqual(prev, current))
        callback();
    }), [
      cache6,
      key
    ]), getSnapshot[0], getSnapshot[1]);
    const isInitialMount = !initialMountedRef.current;
    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;
    const cachedData = cached.data;
    const data = isUndefined(cachedData) ? fallback : cachedData;
    const error = cached.error;
    const laggyDataRef = react25.useRef(data);
    const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;
    const shouldDoInitialRevalidation = (() => {
      if (hasRevalidator && !isUndefined(error))
        return false;
      if (isInitialMount && !isUndefined(revalidateOnMount))
        return revalidateOnMount;
      if (getConfig().isPaused())
        return false;
      if (suspense)
        return isUndefined(data) ? false : revalidateIfStale;
      return isUndefined(data) || revalidateIfStale;
    })();
    const defaultValidatingState = !!(key && fetcher2 && isInitialMount && shouldDoInitialRevalidation);
    const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;
    const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;
    const revalidate = react25.useCallback(async (revalidateOpts) => {
      const currentFetcher = fetcherRef.current;
      if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {
        return false;
      }
      let newData;
      let startAt;
      let loading = true;
      const opts = revalidateOpts || {};
      const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;
      const callbackSafeguard = () => {
        if (IS_REACT_LEGACY) {
          return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;
        }
        return key === keyRef.current;
      };
      const finalState = {
        isValidating: false,
        isLoading: false
      };
      const finishRequestAndUpdateState = () => {
        setCache(finalState);
      };
      const cleanupState = () => {
        const requestInfo = FETCH[key];
        if (requestInfo && requestInfo[1] === startAt) {
          delete FETCH[key];
        }
      };
      const initialState = {
        isValidating: true
      };
      if (isUndefined(getCache().data)) {
        initialState.isLoading = true;
      }
      try {
        if (shouldStartNewRequest) {
          setCache(initialState);
          if (config3.loadingTimeout && isUndefined(getCache().data)) {
            setTimeout(() => {
              if (loading && callbackSafeguard()) {
                getConfig().onLoadingSlow(key, config3);
              }
            }, config3.loadingTimeout);
          }
          FETCH[key] = [
            currentFetcher(fnArg),
            getTimestamp()
          ];
        }
        [newData, startAt] = FETCH[key];
        newData = await newData;
        if (shouldStartNewRequest) {
          setTimeout(cleanupState, config3.dedupingInterval);
        }
        if (!FETCH[key] || FETCH[key][1] !== startAt) {
          if (shouldStartNewRequest) {
            if (callbackSafeguard()) {
              getConfig().onDiscarded(key);
            }
          }
          return false;
        }
        finalState.error = UNDEFINED;
        const mutationInfo = MUTATION[key];
        if (!isUndefined(mutationInfo) && (startAt <= mutationInfo[0] || startAt <= mutationInfo[1] || mutationInfo[1] === 0)) {
          finishRequestAndUpdateState();
          if (shouldStartNewRequest) {
            if (callbackSafeguard()) {
              getConfig().onDiscarded(key);
            }
          }
          return false;
        }
        const cacheData = getCache().data;
        finalState.data = compare2(cacheData, newData) ? cacheData : newData;
        if (shouldStartNewRequest) {
          if (callbackSafeguard()) {
            getConfig().onSuccess(newData, key, config3);
          }
        }
      } catch (err) {
        cleanupState();
        const currentConfig = getConfig();
        const {shouldRetryOnError} = currentConfig;
        if (!currentConfig.isPaused()) {
          finalState.error = err;
          if (shouldStartNewRequest && callbackSafeguard()) {
            currentConfig.onError(err, key, currentConfig);
            if (shouldRetryOnError === true || isFunction2(shouldRetryOnError) && shouldRetryOnError(err)) {
              if (isActive()) {
                currentConfig.onErrorRetry(err, key, currentConfig, (_opts) => {
                  const revalidators = EVENT_REVALIDATORS[key];
                  if (revalidators && revalidators[0]) {
                    revalidators[0](constants3.ERROR_REVALIDATE_EVENT, _opts);
                  }
                }, {
                  retryCount: (opts.retryCount || 0) + 1,
                  dedupe: true
                });
              }
            }
          }
        }
      }
      loading = false;
      finishRequestAndUpdateState();
      return true;
    }, [
      key,
      cache6
    ]);
    const boundMutate = react25.useCallback((...args) => {
      return internalMutate(cache6, keyRef.current, ...args);
    }, []);
    useIsomorphicLayoutEffect(() => {
      fetcherRef.current = fetcher2;
      configRef.current = config3;
      if (!isUndefined(cachedData)) {
        laggyDataRef.current = cachedData;
      }
    });
    useIsomorphicLayoutEffect(() => {
      if (!key)
        return;
      const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);
      let nextFocusRevalidatedAt = 0;
      const onRevalidate = (type, opts = {}) => {
        if (type == constants3.FOCUS_EVENT) {
          const now = Date.now();
          if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {
            nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;
            softRevalidate();
          }
        } else if (type == constants3.RECONNECT_EVENT) {
          if (getConfig().revalidateOnReconnect && isActive()) {
            softRevalidate();
          }
        } else if (type == constants3.MUTATE_EVENT) {
          return revalidate();
        } else if (type == constants3.ERROR_REVALIDATE_EVENT) {
          return revalidate(opts);
        }
        return;
      };
      const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);
      unmountedRef.current = false;
      keyRef.current = key;
      initialMountedRef.current = true;
      setCache({
        _k: fnArg
      });
      if (shouldDoInitialRevalidation) {
        if (isUndefined(data) || IS_SERVER) {
          softRevalidate();
        } else {
          rAF(softRevalidate);
        }
      }
      return () => {
        unmountedRef.current = true;
        unsubEvents();
      };
    }, [
      key
    ]);
    useIsomorphicLayoutEffect(() => {
      let timer;
      function next() {
        const interval = isFunction2(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;
        if (interval && timer !== -1) {
          timer = setTimeout(execute, interval);
        }
      }
      function execute() {
        if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {
          revalidate(WITH_DEDUPE).then(next);
        } else {
          next();
        }
      }
      next();
      return () => {
        if (timer) {
          clearTimeout(timer);
          timer = -1;
        }
      };
    }, [
      refreshInterval,
      refreshWhenHidden,
      refreshWhenOffline,
      key
    ]);
    react25.useDebugValue(returnedData);
    if (suspense && isUndefined(data) && key) {
      if (!IS_REACT_LEGACY && IS_SERVER) {
        throw new Error("Fallback data is required when using suspense in SSR.");
      }
      fetcherRef.current = fetcher2;
      configRef.current = config3;
      unmountedRef.current = false;
      throw isUndefined(error) ? revalidate(WITH_DEDUPE) : error;
    }
    return {
      mutate: boundMutate,
      get data() {
        stateDependencies.data = true;
        return returnedData;
      },
      get error() {
        stateDependencies.error = true;
        return error;
      },
      get isValidating() {
        stateDependencies.isValidating = true;
        return isValidating;
      },
      get isLoading() {
        stateDependencies.isLoading = true;
        return isLoading;
      }
    };
  };
  const SWRConfig2 = OBJECT.defineProperty(SWRConfig, "defaultValue", {
    value: defaultConfig
  });
  const useSWR = withArgs(useSWRHandler);

  // client/App.jsx
  const React = __toModule(require_react());
  const client = __toModule(require_client());
  const fetcher = async (url) => {
    try {
      const response = await fetch(url);
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching data:", error);
      throw error;
    }
  };
  const App = () => {
    const [selectedOption, setSelectedOption] = React.useState("transactions");
    const handleOptionChange = (event) => {
      setSelectedOption(event.target.value);
    };
    const {data: transactions, error} = useSWR(`/${selectedOption}`, fetcher);
    if (error) {
      console.error("Error fetching data", error);
    }
    return React.createElement(Container_default, {
      maxWidth: "xl"
    }, React.createElement(Select_default, {
      value: selectedOption,
      onChange: handleOptionChange,
      sx: {marginBottom: 2}
    }, React.createElement(MenuItem_default, {
      value: "transactions"
    }, "All Transactions"), React.createElement(MenuItem_default, {
      value: "top-transactions"
    }, "Top 10 Transactions"), React.createElement(MenuItem_default, {
      value: "top-categories"
    }, "Top Categories"), React.createElement(MenuItem_default, {
      value: "top-merchants"
    }, "Top 10 Merchants")), !transactions ? React.createElement(CircularProgress_default, null) : React.createElement(TransactionTable2, {
      transactions,
      selectedOption
    }));
  };
  const root = document.getElementById("root");
  client.createRoot(root).render(React.createElement(React.StrictMode, null, React.createElement(App, null)));
})();
//# sourceMappingURL=bundle.js.map
